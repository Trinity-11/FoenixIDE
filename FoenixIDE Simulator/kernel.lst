
; 64tass Turbo Assembler Macro V1.53.1515 listing file
; 64tass.exe --long-address -x --intel-hex -o kernel.hex --list kernel.lst kernel.asm
; Thu Jun 06 21:26:11 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: kernel.asm


;******  Processing file: macros_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: simulator_inc.asm


;******  Return to file: kernel.asm


;******  Processing file: page_00_inc.asm

=$000000				BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000				unused_0000      = $000000 ;12 Bytes unused
=$000008				OPL2_ADDY_PTR_LO = $000008  ; THis Points towards the Instruments Database
=$000009				OPL2_ADDY_PTR_MD = $000009
=$00000a				OPL2_ADDY_PTR_HI = $00000A
=$00000c				SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f				COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011				COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013				LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015				LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017				CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a				CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c				CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e				CURCOLOR         = $00001E ;2 Bytes Color of next character to be printed to the screen.
=$000020				CURATTR          = $000020 ;2 Bytes Attribute of next character to be printed to the screen.
=$000022				STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024				STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026				OPL2_OPERATOR    = $000026 ;
=$000027				OPL2_CHANNEL     = $000027 ;
=$000028				OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a				OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c				OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e				OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030				OPL2_NOTE        = $000030 ; 1 Byte
=$000031				OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032				OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033				OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034				OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035				OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036				OPL2_LOOP        = $000036 ;
=$000036				OPL2_BLOCK       = $000036
=$000038				SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c				SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f				SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040				CMD_PARSER_TMPX  = $000040 ; <<< Command Parser 2Bytes
=$000042				CMD_PARSER_TMPY  = $000042 ; <<< Command Parser 2Bytes
=$000044				CMD_LIST_PTR     = $000044 ; <<< Command Parser 3 Bytes
=$000048				CMD_PARSER_PTR   = $000048 ; <<< Command Parser 3 Bytes
=$00004b				CMD_ATTRIBUTE    = $00004B ; <<< Command Parser 2 Bytes (16bits Attribute Field)
=$00004d				CMD_EXEC_ADDY    = $00004D ; <<< Command Parser 3 Bytes 24 Bits Address Jump to execute the Command
=$000050				KEY_BUFFER_RPOS  = $000050 ;
=$000052				KEY_BUFFER_WPOS  = $000052 ;
=$000054				CMD_VARIABLE_TMP = $000054 ;
=$000056				CMD_ARG_DEV      = $000056 ;
=$000057				CMD_ARG_SA       = $000057 ;
=$00005a				CMD_ARG_EA       = $00005A ;
=$00005d				CMD_VALID        = $00005D ;
=$000040				BM_CLEAR_SCRN_X  = $000040
=$000042				BM_CLEAR_SCRN_Y  = $000042
=$000040				RAD_STARTLINE    = $000040 ; 1 Byte
=$000041				RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042				RAD_LINE         = $000042 ; 1 Byte
=$000043				RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044				RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045				RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046				RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048				RAD_TICK         = $000048
=$00004a				RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c				RAD_CHANNE_EFFCT = $00004C
=$00004d				RAD_TEMP         = $00004D
=$000040				BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042				BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044				BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048				BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c				BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e				SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050				BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054				BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056				BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058				BMP_PALET_CHOICE = $000058 ;
=$0000e0				MOUSE_PTR        = $0000E0
=$0000e1				MOUSE_POS_X_LO   = $0000E1
=$0000e2				MOUSE_POS_X_HI   = $0000E2
=$0000e3				MOUSE_POS_Y_LO   = $0000E3
=$0000e4				MOUSE_POS_Y_HI   = $0000E4
=$0000f0				USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100				GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000100				MULTIPLIER_0     = $000100 ;0 Byte  Unsigned multiplier
=$000100				M0_OPERAND_A     = $000100 ;2 Bytes Operand A (ie: A x B)
=$000102				M0_OPERAND_B     = $000102 ;2 Bytes Operand B (ie: A x B)
=$000104				M0_RESULT        = $000104 ;4 Bytes Result of A x B
=$000108				MULTIPLIER_1     = $000108 ;0 Byte  Signed Multiplier
=$000108				M1_OPERAND_A     = $000108 ;2 Bytes Operand A (ie: A x B)
=$00010a				M1_OPERAND_B     = $00010A ;2 Bytes Operand B (ie: A x B)
=$00010c				M1_RESULT        = $00010C ;4 Bytes Result of A x B
=$000108				DIVIDER_0        = $000108 ;0 Byte  Unsigned divider
=$000108				D0_OPERAND_A     = $000108 ;2 Bytes Divider 0 Dividend ex: A in  A/B
=$00010a				D0_OPERAND_B     = $00010A ;2 Bytes Divider 0 Divisor ex B in A/B
=$00010c				D0_RESULT        = $00010C ;2 Bytes Quotient result of A/B ex: 7/2 = 3 r 1
=$00010e				D0_REMAINDER     = $00010E ;2 Bytes Remainder of A/B ex: 1 in 7/2=3 r 1
=$000110				DIVIDER_1        = $000110 ;0 Byte  Signed divider
=$000110				D1_OPERAND_A     = $000110 ;2 Bytes Divider 1 Dividend ex: A in  A/B
=$000112				D1_OPERAND_B     = $000112 ;2 Bytes Divider 1 Divisor ex B in A/B
=$000114				D1_RESULT        = $000114 ;2 Bytes Signed quotient result of A/B ex: 7/2 = 3 r 1
=$000116				D1_REMAINDER     = $000116 ;2 Bytes Signed remainder of A/B ex: 1 in 7/2=3 r 1
=$000120				ADDER_SIGNED_32  = $000120 ; The 32 Bit Adders takes 12Byte that are NOT RAM Location
=$000140				INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160				TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160				TIMER_CTRL_REGLL = $000160 ;
=$000161				TIMER_CTRL_REGLH = $000161 ;
=$000162				TIMER_CTRL_REGHL = $000162 ;
=$000163				TIMER_CTRL_REGHH = $000163 ;
=$000240				CPU_REGISTERS    = $000240 ; Byte
=$000240				CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242				CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244				CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246				CPUX             = $000246 ;2 Bytes X Register (X)
=$000248				CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a				CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c				CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e				CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f				CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250				MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250				MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253				MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256				MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258				MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b				MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d				MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261				MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265				MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269				MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d				MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271				MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275				MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279				MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300				LOADFILE_VARS    = $000300 ; Byte
=$000300				LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303				LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304				LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305				LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307				LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308				LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a				LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d				BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f				BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311				BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312				BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000320				SDOS_BLOCK_BEGIN = $000320 ;
=$000324				SDOS_LOAD_ADDY   = $000324 ; 4 Bytes (Uses 3 Only)
=$000328				SDOS_FILE_SIZE   = $000328 ;
=$00032c				SDOS_BYTE_NUMBER = $00032C ; Number of Byte to Read or Write before changing the Pointer
=$000330				SDOS_REG_WR32_AD = $000330 ; 4 Bytes (Used to read and Write Values in/from CH376S)
=$000334				SDOS_BYTE_PTR    = $000334
=$000380				SDOS_FILE_NAME   = $000380 ; // Max of 128 Chars
=$000400				SDOS_BLK_BEGIN   = $000400 ; 512 Bytes to Store SD Card Incoming or Outcoming Block
=$0006ff				SDOS_BLK_END     = $0006FF ;
=$000f00				KEY_BUFFER       = $000F00 ;64 Bytes keyboard buffer
=$0080					KEY_BUFFER_SIZE  = $0080 ;128 Bytes (constant) keyboard buffer length
=$000f7f				KEY_BUFFER_END   = $000F7F ;1 Byte  Last byte of keyboard buffer
=$000f83				KEY_BUFFER_CMD   = $000F83 ;1 Byte  Indicates the Command Process Status
=$000f84				COMMAND_SIZE_STR = $000F84 ; 1 Byte
=$000f86				COMMAND_COMP_TMP = $000F86 ; 2 Bytes
=$000f87				KEYBOARD_SC_FLG  = $000F87 ;1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88				KEYBOARD_SC_TMP  = $000F88 ;1 Byte, Interrupt Save Scan Code while Processing
=$001000				TEST_BEGIN       = $001000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff				TEST_END         = $007FFF ;0 Byte
=$008000				STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff				STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00				ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00				HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10				HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20				HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30				HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40				HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60				HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80				Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0				VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$00ffe0				JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4				VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6				VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8				VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea				VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec				VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee				VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0				RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4				VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6				VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8				VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa				VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc				VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe				VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$200000				VECTORS_END      = $200000 ;*End of vector space
=$00ffff				BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: kernel.asm


;******  Processing file: page_00_data.asm

>180000	00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003	48 00				                .word 72            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005	80 00				                .word 128           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007	34 00				                .word 52            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009	40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b	00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e	00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010	00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012	0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013	00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014	00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016	ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: kernel.asm


;******  Processing file: page_00_code.asm

.18ff00	18		clc		RHRESET         CLC
.18ff01	fb		xce		                XCE
.18ff02	5c 00 00 19	jmp $190000	                JML BOOT
.18ff10					RHCOP
.18ff10	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12	8b		phb		                PHB
.18ff13	0b		phd		                PHD
.18ff14	48		pha		                PHA
.18ff15	da		phx		                PHX
.18ff16	5a		phy		                PHY
.18ff17	5c 08 00 19	jmp $190008	                JML BREAK
.18ff20					RHBRK
.18ff20	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22	8b		phb		                PHB
.18ff23	0b		phd		                PHD
.18ff24	48		pha		                PHA
.18ff25	da		phx		                PHX
.18ff26	5a		phy		                PHY
.18ff27	5c 08 00 19	jmp $190008	                JML BREAK
.18ff30					RHABORT
.18ff30	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32	8b		phb		                PHB
.18ff33	0b		phd		                PHD
.18ff34	48		pha		                PHA
.18ff35	da		phx		                PHX
.18ff36	5a		phy		                PHY
.18ff37	5c 08 00 19	jmp $190008	                JML BREAK
.18ff40					 RHNMI
.18ff40	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42	8b		phb		                PHB
.18ff43	0b		phd		                PHD
.18ff44	48		pha		                PHA
.18ff45	da		phx		                PHX
.18ff46	5a		phy		                PHY
.18ff47	22 8a 53 19	jsl $19538a	                JSL NMI_HANDLER
.18ff4b	7a		ply		                PLY
.18ff4c	fa		plx		                PLX
.18ff4d	68		pla		                PLA
.18ff4e	2b		pld		                PLD
.18ff4f	ab		plb		                PLB
.18ff50	40		rti		                RTI
.18ff60					RHIRQ
.18ff60	c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62	8b		phb		                PHB
.18ff63	0b		phd		                PHD
.18ff64	48		pha		                PHA
.18ff65	da		phx		                PHX
.18ff66	5a		phy		                PHY
.18ff67	22 79 51 19	jsl $195179	                JSL IRQ_HANDLER
.18ff6b	7a		ply		                PLY
.18ff6c	fa		plx		                PLX
.18ff6d	68		pla		                PLA
.18ff6e	2b		pld		                PLD
.18ff6f	ab		plb		                PLB
.18ff70	40		rti		                RTI
.18ffe0	5c 68 50 19	jmp $195068	JUMP_READY      JML IMREADY     ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4	10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6	20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8	30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea	40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec	00 00				                .word $0000    ; FFEC
>18ffee	60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0	5c 6b 05 19	jmp $19056b	RRETURN         JML IRETURN
>18fff4	10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6	20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8	30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa	40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc	00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe	60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: kernel.asm


;******  Processing file: Math_def.asm

=$000100				UNSIGNED_MULT_A_LO  = $000100
=$000101				UNSIGNED_MULT_A_HI  = $000101
=$000102				UNSIGNED_MULT_B_LO  = $000102
=$000103				UNSIGNED_MULT_B_HI  = $000103
=$000104				UNSIGNED_MULT_AL_LO = $000104
=$000105				UNSIGNED_MULT_AL_HI = $000105
=$000106				UNSIGNED_MULT_AH_LO = $000106
=$000107				UNSIGNED_MULT_AH_HI = $000107
=$000108				SIGNED_MULT_A_LO    = $000108
=$000109				SIGNED_MULT_A_HI    = $000109
=$00010a				SIGNED_MULT_B_LO    = $00010A
=$00010b				SIGNED_MULT_B_HI    = $00010B
=$00010c				SIGNED_MULT_AL_LO   = $00010C
=$00010d				SIGNED_MULT_AL_HI   = $00010D
=$00010e				SIGNED_MULT_AH_LO   = $00010E
=$00010f				SIGNED_MULT_AH_HI   = $00010F
=$000110				UNSIGNED_DIV_DEM_LO = $000110
=$000111				UNSIGNED_DIV_DEM_HI = $000111
=$000112				UNSIGNED_DIV_NUM_LO = $000112
=$000113				UNSIGNED_DIV_NUM_HI = $000113
=$000114				UNSIGNED_DIV_QUO_LO = $000114
=$000115				UNSIGNED_DIV_QUO_HI = $000115
=$000116				UNSIGNED_DIV_REM_LO = $000116
=$000117				UNSIGNED_DIV_REM_HI = $000117
=$000118				SIGNED_DIV_DEM_LO   = $000118
=$000119				SIGNED_DIV_DEM_HI   = $000119
=$00011a				SIGNED_DIV_NUM_LO   = $00011A
=$00011b				SIGNED_DIV_NUM_HI   = $00011B
=$00011c				SIGNED_DIV_QUO_LO   = $00011C
=$00011d				SIGNED_DIV_QUO_HI   = $00011D
=$00011e				SIGNED_DIV_REM_LO   = $00011E
=$00011f				SIGNED_DIV_REM_HI   = $00011F
=$000120				ADDER32_A_LL        = $000120
=$000121				ADDER32_A_LH        = $000121
=$000122				ADDER32_A_HL        = $000122
=$000123				ADDER32_A_HH        = $000123
=$000124				ADDER32_B_LL        = $000124
=$000125				ADDER32_B_LH        = $000125
=$000126				ADDER32_B_HL        = $000126
=$000127				ADDER32_B_HH        = $000127
=$000128				ADDER32_R_LL        = $000128
=$000129				ADDER32_R_LH        = $000129
=$00012a				ADDER32_R_HL        = $00012A
=$00012b				ADDER32_R_HH        = $00012B

;******  Return to file: kernel.asm


;******  Processing file: interrupt_def.asm

=$000140				INT_PENDING_REG0 = $000140 ;
=$000141				INT_PENDING_REG1 = $000141 ;
=$000142				INT_PENDING_REG2 = $000142 ;
=$000144				INT_POL_REG0     = $000144 ;
=$000145				INT_POL_REG1     = $000145 ;
=$000146				INT_POL_REG2     = $000146 ;
=$000148				INT_EDGE_REG0    = $000148 ;
=$000149				INT_EDGE_REG1    = $000149 ;
=$00014a				INT_EDGE_REG2    = $00014A ;
=$00014c				INT_MASK_REG0    = $00014C ;
=$00014d				INT_MASK_REG1    = $00014D ;
=$00014e				INT_MASK_REG2    = $00014E ;
=$01					FNX0_INT00_SOF    = $01  ;Start of Frame @ 60FPS
=$02					FNX0_INT01_SOL    = $02  ;Start of Line (Programmable)
=$04					FNX0_INT02_TMR0   = $04  ;Timer 0 Interrupt
=$08					FNX0_INT03_TMR1   = $08  ;Timer 1 Interrupt
=$10					FNX0_INT04_TMR2   = $10  ;Timer 2 Interrupt
=$20					FNX0_INT05_RTC    = $20  ;Real-Time Clock Interrupt
=$40					FNX0_INT06_FDC    = $40  ;Floppy Disk Controller
=$80					FNX0_INT07_MOUSE  = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01					FNX1_INT00_KBD    = $01  ;Keyboard Interrupt
=$02					FNX1_INT01_SC0    = $02  ;Sprite 2 Sprite Collision
=$04					FNX1_INT02_SC1    = $04  ;Sprite 2 Tiles Collision
=$08					FNX1_INT03_COM2   = $08  ;Serial Port 2
=$10					FNX1_INT04_COM1   = $10  ;Serial Port 1
=$20					FNX1_INT05_MPU401 = $20  ;Midi Controller Interrupt
=$40					FNX1_INT06_LPT    = $40  ;Parallel Port
=$80					FNX1_INT07_SDCARD = $80  ;SD Card Controller Interrupt
=$01					FNX2_INT00_OPL2R  = $01  ;OPl2 Right Channel
=$02					FNX2_INT01_OPL2L  = $02  ;OPL2 Left Channel
=$04					FNX2_INT02_BTX_INT= $04  ;Beatrix Interrupt (TBD)
=$08					FNX2_INT03_SDMA   = $08  ;System DMA
=$10					FNX2_INT04_VDMA   = $10  ;Video DMA
=$20					FNX2_INT05_DACHP  = $20  ;DAC Hot Plug
=$40					FNX2_INT06_EXT    = $40  ;External Expansion
=$80					FNX2_INT07_ALLONE = $80  ; Not Used - Always 1

;******  Return to file: kernel.asm


;******  Processing file: dram_inc.asm

=$afa000				SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000				SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000				SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: kernel.asm


;******  Processing file: vicky_def.asm

=$af0000				MASTER_CTRL_REG_L	      = $AF0000
=$01					Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02					Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04					Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08					Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10					Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20					Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40					Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80					Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001				MASTER_CTRL_REG_H	      = $AF0001
=$af0002				VKY_RESERVED_00         = $AF0002
=$af0003				VKY_RESERVED_01         = $AF0003
=$af0004				BORDER_CTRL_REG         = $AF0004   ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$01					Border_Ctrl_Enable      = $01
=$af0005				BORDER_COLOR_B          = $AF0005
=$af0006				BORDER_COLOR_G          = $AF0006
=$af0007				BORDER_COLOR_R          = $AF0007
=$af0008				BORDER_X_SIZE           = $AF0008   ; X-  Values: 0 - 32 (Default: 32)
=$af0009				BORDER_Y_SIZE           = $AF0009   ; Y- Values 0 -32 (Default: 32)
=$af000d				BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e				BACKGROUND_COLOR_G      = $AF000E
=$af000f				BACKGROUND_COLOR_R      = $AF000F ;
=$af0010				VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01					Vky_Cursor_Enable       = $01
=$02					Vky_Cursor_Flash_Rate0  = $02
=$04					Vky_Cursor_Flash_Rate1  = $04
=$08					Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10					Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011				VKY_TXT_RESERVED        = $AF0011   ;Not in Use
=$af0012				VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013				VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014				VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015				VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016				VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017				VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af0018				TXT_CLR_START_DISPLAY_PTR = $AF0018  ; (0 to 255) (this Add a X Offset to the Display Start Address)
=$af001c				VKY_INFO_CHIP_NUM_L     = $AF001C
=$af001d				VKY_INFO_CHIP_NUM_H     = $AF001D
=$af001e				VKY_INFO_CHIP_VER_L     = $AF001E
=$af001f				VKY_INFO_CHIP_VER_H     = $AF001F
=$01					TILE_Enable             = $01
=$02					TILE_LUT0               = $02
=$04					TILE_LUT1               = $04
=$08					TILE_LUT2               = $08
=$80					TILESHEET_256x256_En    = $80   ; 0 -> Sequential, 1-> 256x256 Tile Sheet Striding
=$af0100				TL0_CONTROL_REG         = $AF0100       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0101				TL0_START_ADDY_L        = $AF0101       ; Not USed right now - Starting Address to where is the MAP
=$af0102				TL0_START_ADDY_M        = $AF0102
=$af0103				TL0_START_ADDY_H        = $AF0103
=$af0104				TL0_MAP_X_STRIDE_L      = $AF0104       ; The Stride of the Map
=$af0105				TL0_MAP_X_STRIDE_H      = $AF0105
=$af0106				TL0_MAP_Y_STRIDE_L      = $AF0106       ; The Stride of the Map
=$af0107				TL0_MAP_Y_STRIDE_H      = $AF0107
=$af0108				TL1_CONTROL_REG         = $AF0108       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0109				TL1_START_ADDY_L        = $AF0109       ; Not USed right now - Starting Address to where is the MAP
=$af010a				TL1_START_ADDY_M        = $AF010A
=$af010b				TL1_START_ADDY_H        = $AF010B
=$af010c				TL1_MAP_X_STRIDE_L      = $AF010C       ; The Stride of the Map
=$af010d				TL1_MAP_X_STRIDE_H      = $AF010D
=$af010e				TL1_MAP_Y_STRIDE_L      = $AF010E       ; The Stride of the Map
=$af010f				TL1_MAP_Y_STRIDE_H      = $AF010F
=$af0110				TL2_CONTROL_REG         = $AF0110       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0111				TL2_START_ADDY_L        = $AF0111       ; Not USed right now - Starting Address to where is the MAP
=$af0112				TL2_START_ADDY_M        = $AF0112
=$af0113				TL2_START_ADDY_H        = $AF0113
=$af0114				TL2_MAP_X_STRIDE_L      = $AF0114       ; The Stride of the Map
=$af0115				TL2_MAP_X_STRIDE_H      = $AF0115
=$af0116				TL2_MAP_Y_STRIDE_L      = $AF0116       ; The Stride of the Map
=$af0117				TL2_MAP_Y_STRIDE_H      = $AF0117
=$af0118				TL3_CONTROL_REG         = $AF0118       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0119				TL3_START_ADDY_L        = $AF0119       ; Not USed right now - Starting Address to where is the MAP
=$af011a				TL3_START_ADDY_M        = $AF011A
=$af011b				TL3_START_ADDY_H        = $AF011B
=$af011c				TL3_MAP_X_STRIDE_L      = $AF011C       ; The Stride of the Map
=$af011d				TL3_MAP_X_STRIDE_H      = $AF011D
=$af011e				TL3_MAP_Y_STRIDE_L      = $AF011E       ; The Stride of the Map
=$af011f				TL3_MAP_Y_STRIDE_H      = $AF011F
=$af0140				BM_CONTROL_REG          = $AF0140
=$af0141				BM_START_ADDY_L         = $AF0141
=$af0142				BM_START_ADDY_M         = $AF0142
=$af0143				BM_START_ADDY_H         = $AF0143
=$af0144				BM_X_SIZE_L             = $AF0144
=$af0145				BM_X_SIZE_H             = $AF0145
=$af0146				BM_Y_SIZE_L             = $AF0146
=$af0147				BM_Y_SIZE_H             = $AF0147
=$af0148				BM_RESERVED_0           = $AF0148
=$af0149				BM_RESERVED_1           = $AF0149
=$af014a				BM_RESERVED_2           = $AF014A
=$af014b				BM_RESERVED_3           = $AF014B
=$af014c				BM_RESERVED_4           = $AF014C
=$af014d				BM_RESERVED_5           = $AF014D
=$af014e				BM_RESERVED_6           = $AF014E
=$af014f				BM_RESERVED_7           = $AF014F
=$01					SPRITE_Enable             = $01
=$02					SPRITE_LUT0               = $02 ; This is the LUT that the Sprite will use
=$04					SPRITE_LUT1               = $04
=$08					SPRITE_LUT2               = $08 ; Only 4 LUT for Now, So this bit is not used.
=$10					SPRITE_DEPTH0             = $10 ; This is the Layer the Sprite will be Displayed in
=$20					SPRITE_DEPTH1             = $20
=$40					SPRITE_DEPTH2             = $40
=$af0200				SP00_CONTROL_REG        = $AF0200
=$af0201				SP00_ADDY_PTR_L         = $AF0201
=$af0202				SP00_ADDY_PTR_M         = $AF0202
=$af0203				SP00_ADDY_PTR_H         = $AF0203
=$af0204				SP00_X_POS_L            = $AF0204
=$af0205				SP00_X_POS_H            = $AF0205
=$af0206				SP00_Y_POS_L            = $AF0206
=$af0207				SP00_Y_POS_H            = $AF0207
=$af0208				SP01_CONTROL_REG        = $AF0208
=$af0209				SP01_ADDY_PTR_L         = $AF0209
=$af020a				SP01_ADDY_PTR_M         = $AF020A
=$af020b				SP01_ADDY_PTR_H         = $AF020B
=$af020c				SP01_X_POS_L            = $AF020C
=$af020d				SP01_X_POS_H            = $AF020D
=$af020e				SP01_Y_POS_L            = $AF020E
=$af020f				SP01_Y_POS_H            = $AF020F
=$af0210				SP02_CONTROL_REG        = $AF0210
=$af0211				SP02_ADDY_PTR_L         = $AF0211
=$af0212				SP02_ADDY_PTR_M         = $AF0212
=$af0213				SP02_ADDY_PTR_H         = $AF0213
=$af0214				SP02_X_POS_L            = $AF0214
=$af0215				SP02_X_POS_H            = $AF0215
=$af0216				SP02_Y_POS_L            = $AF0216
=$af0217				SP02_Y_POS_H            = $AF0217
=$af0218				SP03_CONTROL_REG        = $AF0218
=$af0219				SP03_ADDY_PTR_L         = $AF0219
=$af021a				SP03_ADDY_PTR_M         = $AF021A
=$af021b				SP03_ADDY_PTR_H         = $AF021B
=$af021c				SP03_X_POS_L            = $AF021C
=$af021d				SP03_X_POS_H            = $AF021D
=$af021e				SP03_Y_POS_L            = $AF021E
=$af021f				SP03_Y_POS_H            = $AF021F
=$af0220				SP04_CONTROL_REG        = $AF0220
=$af0221				SP04_ADDY_PTR_L         = $AF0221
=$af0222				SP04_ADDY_PTR_M         = $AF0222
=$af0223				SP04_ADDY_PTR_H         = $AF0223
=$af0224				SP04_X_POS_L            = $AF0224
=$af0225				SP04_X_POS_H            = $AF0225
=$af0226				SP04_Y_POS_L            = $AF0226
=$af0227				SP04_Y_POS_H            = $AF0227
=$af0228				SP05_CONTROL_REG        = $AF0228
=$af0229				SP05_ADDY_PTR_L         = $AF0229
=$af022a				SP05_ADDY_PTR_M         = $AF022A
=$af022b				SP05_ADDY_PTR_H         = $AF022B
=$af022c				SP05_X_POS_L            = $AF022C
=$af022d				SP05_X_POS_H            = $AF022D
=$af022e				SP05_Y_POS_L            = $AF022E
=$af022f				SP05_Y_POS_H            = $AF022F
=$af0230				SP06_CONTROL_REG        = $AF0230
=$af0231				SP06_ADDY_PTR_L         = $AF0231
=$af0232				SP06_ADDY_PTR_M         = $AF0232
=$af0233				SP06_ADDY_PTR_H         = $AF0233
=$af0234				SP06_X_POS_L            = $AF0234
=$af0235				SP06_X_POS_H            = $AF0235
=$af0236				SP06_Y_POS_L            = $AF0236
=$af0237				SP06_Y_POS_H            = $AF0237
=$af0238				SP07_CONTROL_REG        = $AF0238
=$af0239				SP07_ADDY_PTR_L         = $AF0239
=$af023a				SP07_ADDY_PTR_M         = $AF023A
=$af023b				SP07_ADDY_PTR_H         = $AF023B
=$af023c				SP07_X_POS_L            = $AF023C
=$af023d				SP07_X_POS_H            = $AF023D
=$af023e				SP07_Y_POS_L            = $AF023E
=$af023f				SP07_Y_POS_H            = $AF023F
=$af0240				SP08_CONTROL_REG        = $AF0240
=$af0241				SP08_ADDY_PTR_L         = $AF0241
=$af0242				SP08_ADDY_PTR_M         = $AF0242
=$af0243				SP08_ADDY_PTR_H         = $AF0243
=$af0244				SP08_X_POS_L            = $AF0244
=$af0245				SP08_X_POS_H            = $AF0245
=$af0246				SP08_Y_POS_L            = $AF0246
=$af0247				SP08_Y_POS_H            = $AF0247
=$af0248				SP09_CONTROL_REG        = $AF0248
=$af0249				SP09_ADDY_PTR_L         = $AF0249
=$af024a				SP09_ADDY_PTR_M         = $AF024A
=$af024b				SP09_ADDY_PTR_H         = $AF024B
=$af024c				SP09_X_POS_L            = $AF024C
=$af024d				SP09_X_POS_H            = $AF024D
=$af024e				SP09_Y_POS_L            = $AF024E
=$af024f				SP09_Y_POS_H            = $AF024F
=$af0250				SP10_CONTROL_REG        = $AF0250
=$af0251				SP10_ADDY_PTR_L         = $AF0251
=$af0252				SP10_ADDY_PTR_M         = $AF0252
=$af0253				SP10_ADDY_PTR_H         = $AF0253
=$af0254				SP10_X_POS_L            = $AF0254
=$af0255				SP10_X_POS_H            = $AF0255
=$af0256				SP10_Y_POS_L            = $AF0256
=$af0257				SP10_Y_POS_H            = $AF0257
=$af0258				SP11_CONTROL_REG        = $AF0258
=$af0259				SP11_ADDY_PTR_L         = $AF0259
=$af025a				SP11_ADDY_PTR_M         = $AF025A
=$af025b				SP11_ADDY_PTR_H         = $AF025B
=$af025c				SP11_X_POS_L            = $AF025C
=$af025d				SP11_X_POS_H            = $AF025D
=$af025e				SP11_Y_POS_L            = $AF025E
=$af025f				SP11_Y_POS_H            = $AF025F
=$af0260				SP12_CONTROL_REG        = $AF0260
=$af0261				SP12_ADDY_PTR_L         = $AF0261
=$af0262				SP12_ADDY_PTR_M         = $AF0262
=$af0263				SP12_ADDY_PTR_H         = $AF0263
=$af0264				SP12_X_POS_L            = $AF0264
=$af0265				SP12_X_POS_H            = $AF0265
=$af0266				SP12_Y_POS_L            = $AF0266
=$af0267				SP12_Y_POS_H            = $AF0267
=$af0268				SP13_CONTROL_REG        = $AF0268
=$af0269				SP13_ADDY_PTR_L         = $AF0269
=$af026a				SP13_ADDY_PTR_M         = $AF026A
=$af026b				SP13_ADDY_PTR_H         = $AF026B
=$af026c				SP13_X_POS_L            = $AF026C
=$af026d				SP13_X_POS_H            = $AF026D
=$af026e				SP13_Y_POS_L            = $AF026E
=$af026f				SP13_Y_POS_H            = $AF026F
=$af0270				SP14_CONTROL_REG        = $AF0270
=$af0271				SP14_ADDY_PTR_L         = $AF0271
=$af0272				SP14_ADDY_PTR_M         = $AF0272
=$af0273				SP14_ADDY_PTR_H         = $AF0273
=$af0274				SP14_X_POS_L            = $AF0274
=$af0275				SP14_X_POS_H            = $AF0275
=$af0276				SP14_Y_POS_L            = $AF0276
=$af0277				SP14_Y_POS_H            = $AF0277
=$af0278				SP15_CONTROL_REG        = $AF0278
=$af0279				SP15_ADDY_PTR_L         = $AF0279
=$af027a				SP15_ADDY_PTR_M         = $AF027A
=$af027b				SP15_ADDY_PTR_H         = $AF027B
=$af027c				SP15_X_POS_L            = $AF027C
=$af027d				SP15_X_POS_H            = $AF027D
=$af027e				SP15_Y_POS_L            = $AF027E
=$af027f				SP15_Y_POS_H            = $AF027F
=$af0280				SP16_CONTROL_REG        = $AF0280
=$af0281				SP16_ADDY_PTR_L         = $AF0281
=$af0282				SP16_ADDY_PTR_M         = $AF0282
=$af0283				SP16_ADDY_PTR_H         = $AF0283
=$af0284				SP16_X_POS_L            = $AF0284
=$af0285				SP16_X_POS_H            = $AF0285
=$af0286				SP16_Y_POS_L            = $AF0286
=$af0287				SP16_Y_POS_H            = $AF0287
=$af0288				SP17_CONTROL_REG        = $AF0288
=$af0289				SP17_ADDY_PTR_L         = $AF0289
=$af028a				SP17_ADDY_PTR_M         = $AF028A
=$af028b				SP17_ADDY_PTR_H         = $AF028B
=$af028c				SP17_X_POS_L            = $AF028C
=$af028d				SP17_X_POS_H            = $AF028D
=$af028e				SP17_Y_POS_L            = $AF028E
=$af028f				SP17_Y_POS_H            = $AF028F
=$af0400				VDMA_CONTROL_REG        = $AF0400
=$af0401				VDMA_COUNT_REG_L        = $AF0401
=$af0402				VDMA_COUNT_REG_M        = $AF0402
=$af0403				VDMA_COUNT_REG_H        = $AF0403
=$af0404				VDMA_DATA_2_WRITE_L     = $AF0404
=$af0405				VDMA_DATA_2_WRITE_H     = $AF0405
=$af0406				VDMA_STRIDE_L           = $AF0406
=$af0407				VDMA_STRIDE_H           = $AF0407
=$af0408				VDMA_SRC_ADDY_L         = $AF0408
=$af0409				VDMA_SRC_ADDY_M         = $AF0409
=$af040a				VDMA_SRC_ADDY_H         = $AF040A
=$af040b				VDMA_RESERVED_0         = $AF040B
=$af040c				VDMA_DST_ADDY_L         = $AF040C
=$af040d				VDMA_DST_ADDY_M         = $AF040D
=$af040e				VDMA_DST_ADDY_H         = $AF040E
=$af040f				VDMA_RESERVED_1         = $AF040F
=$af0500				MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff				MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600				MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff				MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700				MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701				MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702				MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703				MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704				MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705				MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706				MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707				MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708				MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b				C256F_MODEL_MAJOR       = $AF070B ;
=$af070c				C256F_MODEL_MINOR       = $AF070C ;
=$af070d				FPGA_DOR                = $AF070D ;
=$af070e				FPGA_MOR                = $AF070E ;
=$af070f				FPGA_YOR                = $AF070F ;
=$af1f40				FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80				BG_CHAR_LUT_PTR		      = $AF1F80
=$af2000				GRPH_LUT0_PTR		        = $AF2000
=$af2400				GRPH_LUT1_PTR		        = $AF2400
=$af2800				GRPH_LUT2_PTR		        = $AF2800
=$af2c00				GRPH_LUT3_PTR		        = $AF2C00
=$af3000				GRPH_LUT4_PTR		        = $AF3000
=$af3400				GRPH_LUT5_PTR		        = $AF3400
=$af3800				GRPH_LUT6_PTR		        = $AF3800
=$af3c00				GRPH_LUT7_PTR		        = $AF3C00
=$af4000				GAMMA_B_LUT_PTR		      = $AF4000
=$af4100				GAMMA_G_LUT_PTR		      = $AF4100
=$af4200				GAMMA_R_LUT_PTR		      = $AF4200
=$af5000				TILE_MAP0       		    = $AF5000     ;$AF5000 - $AF57FF
=$af5800				TILE_MAP1               = $AF5800     ;$AF5800 - $AF5FFF
=$af6000				TILE_MAP2               = $AF6000     ;$AF6000 - $AF67FF
=$af6800				TILE_MAP3               = $AF6800     ;$AF6800 - $AF6FFF
=$af8000				FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$af8800				FONT_MEMORY_BANK1       = $AF8800     ;$AF8800 - $AF8FFF
=$afa000				CS_TEXT_MEM_PTR         = $AFA000
=$afc000				CS_COLOR_MEM_PTR        = $AFC000
=$afe000				BTX_START               = $AFE000     ; BEATRIX Registers
=$afffff				BTX_END                 = $AFFFFF

;******  Return to file: kernel.asm


;******  Processing file: super_io_def.asm

=$af1100				PME_STS_REG     = $AF1100
=$af1102				PME_EN_REG		  = $AF1102
=$af1104				PME_STS1_REG		= $AF1104
=$af1105				PME_STS2_REG		= $AF1105
=$af1106				PME_STS3_REG		= $AF1106
=$af1107				PME_STS4_REG		= $AF1107
=$af1108				PME_STS5_REG		= $AF1108
=$af110a				PME_EN1_REG     = $AF110A
=$af110b				PME_EN2_REG     = $AF110B
=$af110c				PME_EN3_REG     = $AF110C
=$af110d				PME_EN4_REG     = $AF110D
=$af110e				PME_EN5_REG     = $AF110E
=$af1110				SMI_STS1_REG		= $AF1110
=$af1111				SMI_STS2_REG		= $AF1111
=$af1112				SMI_STS3_REG		= $AF1112
=$af1113				SMI_STS4_REG		= $AF1113
=$af1114				SMI_STS5_REG		= $AF1114
=$af1116				SMI_EN1_REG     = $AF1116
=$af1117				SMI_EN2_REG     = $AF1117
=$af1118				SMI_EN3_REG     = $AF1118
=$af1119				SMI_EN4_REG     = $AF1119
=$af111a				SMI_EN5_REG     = $AF111A
=$af111c				MSC_ST_REG      = $AF111C
=$af111e				FORCE_DISK_CHANGE       = $AF111E
=$af111f				FLOPPY_DATA_RATE        = $AF111F
=$af1120				UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121				UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122				DEV_DISABLE_REG         = $AF1122
=$af1123				GP10_REG    		= $AF1123
=$af1124				GP11_REG    		= $AF1124
=$af1125				GP12_REG    		= $AF1125
=$af1126				GP13_REG    		= $AF1126
=$af1127				GP14_REG    		= $AF1127
=$af1128				GP15_REG    		= $AF1128
=$af1129				GP16_REG    		= $AF1129
=$af112a				GP17_REG    		= $AF112A
=$af112b				GP20_REG    		= $AF112B
=$af112c				GP21_REG    		= $AF112C
=$af112d				GP22_REG		= $AF112D
=$af112f				GP24_REG		= $AF112F
=$af1130				GP25_REG		= $AF1130
=$af1131				GP26_REG		= $AF1131
=$af1132				GP27_REG		= $AF1132
=$af1133				GP30_REG		= $AF1133
=$af1134				GP31_REG		= $AF1134
=$af1135				GP32_REG		= $AF1135
=$af1136				GP33_REG		= $AF1136
=$af1137				GP34_REG		= $AF1137
=$af1138				GP35_REG		= $AF1138
=$af1139				GP36_REG		= $AF1139
=$af113a				GP37_REG		= $AF113A
=$af113b				GP40_REG		= $AF113B
=$af113c				GP41_REG		= $AF113C
=$af113d				GP42_REG		= $AF113D
=$af113e				GP43_REG		= $AF113E
=$af113f				GP50_REG		= $AF113F
=$af1140				GP51_REG		= $AF1140
=$af1141				GP52_REG		= $AF1141
=$af1142				GP53_REG		= $AF1142
=$af1143				GP54_REG		= $AF1143
=$af1144				GP55_REG		= $AF1144
=$af1145				GP56_REG		= $AF1145
=$af1146				GP57_REG		= $AF1146
=$af1147				GP60_REG		= $AF1147
=$af1148				GP61_REG		= $AF1148
=$af114b				GP1_REG			= $AF114B
=$af114c				GP2_REG			= $AF114C
=$af114d				GP3_REG			= $AF114D
=$af114e				GP4_REG			= $AF114E
=$af114f				GP5_REG			= $AF114F
=$af1150				GP6_REG			= $AF1150
=$af1156				FAN1_REG		        = $AF1156
=$af1157				FAN2_REG            = $AF1157
=$af1158				FAN_CTRL_REG  	    = $AF1158
=$af1159				FAN1_TACH_REG       = $AF1159
=$af115a				FAN2_TACH_REG       = $AF115A
=$af115b				FAN1_PRELOAD_REG    = $AF115B
=$af115c				FAN2_PRELOAD_REG    = $AF115C
=$af115d				LED1_REG    		    = $AF115D
=$af115e				LED2_REG    		    = $AF115E
=$af115f				KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: kernel.asm


;******  Processing file: keyboard_def.asm

=$af1064				STATUS_PORT 	        =	$AF1064
=$af1060				KBD_OUT_BUF 	        =	$AF1060
=$af1060				KBD_INPT_BUF	        = $AF1060
=$af1064				KBD_CMD_BUF		        = $AF1064
=$af1060				KBD_DATA_BUF	        = $AF1060
=$af1060				PORT_A			          =	$AF1060
=$af1061				PORT_B			          =	$AF1061
=$01					OUT_BUF_FULL  =	$01
=$02					INPT_BUF_FULL	=	$02
=$04					SYS_FLAG		  =	$04
=$08					CMD_DATA		  =	$08
=$10					KEYBD_INH     =	$10
=$20					TRANS_TMOUT	  =	$20
=$40					RCV_TMOUT		  =	$40
=$80					PARITY_EVEN		=	$80
=$10					INH_KEYBOARD	=	$10
=$ae					KBD_ENA			  =	$AE
=$ad					KBD_DIS			  =	$AD
=$f1					KB_MENU			  =	$F1
=$f4					KB_ENABLE		  =	$F4
=$f7					KB_MAKEBREAK  =	$F7
=$fe					KB_ECHO			  =	$FE
=$ff					KB_RESET		  =	$FF
=$ed					KB_LED_CMD		=	$ED
=$aa					KB_OK			    =	$AA
=$fa					KB_ACK			  =	$FA
=$ff					KB_OVERRUN		=	$FF
=$fe					KB_RESEND		  =	$FE
=$f0					KB_BREAK		  =	$F0
=$10					KB_FA			    =	$10
=$20					KB_FE			    =	$20
=$40					KB_PR_LED		  =	$40

;******  Return to file: kernel.asm


;******  Processing file: SID_def.asm

=$afe400				SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401				SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402				SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403				SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404				SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405				SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406				SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407				SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408				SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409				SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a				SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b				SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c				SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d				SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e				SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f				SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410				SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411				SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412				SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413				SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414				SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415				SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416				SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417				SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418				SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419				SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a				SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b				SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c				SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d				SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e				SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f				SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: kernel.asm


;******  Processing file: RTC_def.asm

=$af0800				RTC_SEC       = $AF0800 ;Seconds Register
=$af0801				RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802				RTC_MIN       = $AF0802 ;Minutes Register
=$af0803				RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804				RTC_HRS       = $AF0804 ;Hours Register
=$af0805				RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806				RTC_DAY       = $AF0806 ;Day Register
=$af0807				RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808				RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809				RTC_MONTH     = $AF0809 ;Month Register
=$af080a				RTC_YEAR      = $AF080A ;Year Register
=$af080b				RTC_RATES     = $AF080B ;Rates Register
=$af080c				RTC_ENABLE    = $AF080C ;Enables Register
=$af080d				RTC_FLAGS     = $AF080D ;Flags Register
=$af080e				RTC_CTRL      = $AF080E ;Control Register
=$af080f				RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: kernel.asm


;******  Processing file: io_def.asm

=$afe800				JOYSTICK0     = $AFE800  ;(R) Joystick 0 - J7 (Next to Buzzer)
=$afe801				JOYSTICK1     = $AFE801  ;(R) Joystick 1 - J8
=$afe802				JOYSTICK2     = $AFE802  ;(R) Joystick 2 - J9
=$afe803				JOYSTICK3     = $AFE803  ;(R) Joystick 3 - J10 (next to SD Card)
=$afe804				DIPSWITCH     = $AFE804  ;(R) $AFE804...$AFE807
=$afe808				SDCARD_DATA   = $AFE808  ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe809				SDCARD_CMD    = $AFE809  ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe810				SDCARD_STAT   = $AFE810  ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$afe820				CODEC_DATA_LO = $AFE820  ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe821				CODEC_DATA_HI = $AFE821  ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe822				CODEC_WR_CTRL = $AFE822  ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: kernel.asm


;******  Processing file: CMD_Parser.asm

.193000					SAVECHAR2CMDLINE
.193000	0b		phd		                PHD
.193001	e2 20		sep #$20	                SEP #$20        ; set A short
.193003					NOT_CARRIAGE_RETURN
.193003	a6 52		ldx $52		                LDX KEY_BUFFER_WPOS   ; So the Receive Character is saved in the Buffer
.193005	c9 20		cmp #$20	                CMP #$20
.193007	90 22		bcc $19302b	                BCC CHECK_LOWERTHANSPACE
.193009	c9 80		cmp #$80	                CMP #$80
.19300b	b0 39		bcs $193046	                BCS EXIT_SAVE2_CMDLINE
.19300d	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE  ; Make sure we haven't been overboard.
.193010	b0 34		bcs $193046	                BCS EXIT_SAVE2_CMDLINE  ; Stop storing - An error should ensue here...
.193012	c9 61		cmp #$61	                CMP #$61              ; "a"
.193014	90 06		bcc $19301c	                BCC CAPS_NO_CHANGE ;
.193016	c9 7b		cmp #$7b	                CMP #$7B              ; '{'  Char after 'z'
.193018	b0 02		bcs $19301c	                BCS CAPS_NO_CHANGE ;
.19301a	29 df		and #$df	                AND #$DF    ; remove the $20 in $61
.19301c					CAPS_NO_CHANGE
.19301c	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193020	e8		inx		                INX
.193021	86 52		stx $52		                STX KEY_BUFFER_WPOS
.193023	a9 00		lda #$00	                LDA #$00
.193025	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X   ; Store a EOL in the following location for good measure
.193029	80 1b		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.19302b					CHECK_LOWERTHANSPACE
.19302b	c9 08		cmp #$08	                CMP #$08    ; BackSpace
.19302d	f0 19		beq $193048	                BEQ GO_BACKTHEPOINTER;
.19302f	c9 0d		cmp #$0d	                CMP #$0D    ; Check to see if the incomming Character is a Cariage Return
.193031	d0 d0		bne $193003	                BNE NOT_CARRIAGE_RETURN
.193033	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.193037	a2 00 00	ldx #$0000	                LDX #$0000
.19303a	86 50		stx $50		                STX KEY_BUFFER_RPOS
.19303c	af 83 0f 00	lda $000f83	                LDA @lKEY_BUFFER_CMD
.193040	09 01		ora #$01	                ORA #$01      ; Set Bit 0 - to indicate that there is a command to process
.193042	8f 83 0f 00	sta $000f83	                STA @lKEY_BUFFER_CMD
.193046					EXIT_SAVE2_CMDLINE
.193046	2b		pld		                PLD
.193047	6b		rtl		                RTL
.193048					GO_BACKTHEPOINTER
.193048	a9 00		lda #$00	                LDA #$00
.19304a	9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X
.19304e	e0 00 00	cpx #$0000	                CPX #$0000
.193051	f0 f3		beq $193046	                BEQ EXIT_SAVE2_CMDLINE
.193053	ca		dex		                DEX
.193054	80 f0		bra $193046	                BRA EXIT_SAVE2_CMDLINE
.193056					PROCESS_COMMAND_LINE
.193056	08		php		                PHP
.193057	c2 10		rep #$10	                REP #$10        ; set X long
.193059	e2 20		sep #$20	                SEP #$20        ; set A short
.19305b	a2 00 00	ldx #$0000	                LDX #$0000
.19305e	86 52		stx $52		                STX KEY_BUFFER_WPOS
.193060	a6 50		ldx $50		                LDX KEY_BUFFER_RPOS ; Load the Read Pointer
.193062					NOT_VALID_CHAR4CMD
.193062	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193066	c9 0d		cmp #$0d	                CMP #$0D              ; Check for Carriage Return
.193068	f0 24		beq $19308e	                BEQ NO_CMD_2_PROCESS  ; Exit, if the first char is a Carriage return
.19306a	c9 41		cmp #$41	                CMP #$41              ; Smaller than "A"
.19306c	90 04		bcc $193072	                BCC NOT_A_VALIDCHAR   ; check for space before the Command
.19306e	c9 5b		cmp #$5b	                CMP #$5B              ; Smaller than "Z" We are going to accept the character
.193070	90 08		bcc $19307a	                BCC VALIDCHAR_GO_FIND_CMD;
.193072					NOT_A_VALIDCHAR
.193072	e8		inx		                INX
.193073	e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE
.193076	d0 ea		bne $193062	                BNE NOT_VALID_CHAR4CMD
.193078	f0 0d		beq $193087	                BEQ ERROR_BUFFER_OVERRUN  ; This means that we have reached the end of Buffer
.19307a					VALIDCHAR_GO_FIND_CMD
.19307a	20 99 30	jsr $193099	                JSR HOWMANYCHARINCMD  ; Comming back from this Routine we know the size of the Command
.19307d	c0 10 00	cpy #$0010	                CPY #$0010            ; if the value of the size of the command is 16, then it is not a legit command
.193080	b0 0e		bcs $193090	                BCS NOTRECOGNIZEDCOMMAND  ; This will output a Command Not Recognized
.193082	20 b2 30	jsr $1930b2	                JSR FINDCMDINLIST     ; This is where, it gets really cool
.193085	80 07		bra $19308e	                BRA DONE_COMMANDPROCESS
.193087					ERROR_BUFFER_OVERRUN
.193087	a2 53 36	ldx #$3653	                LDX #<>CMD_Error_Overrun
.19308a	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.19308e					DONE_COMMANDPROCESS
.19308e					NO_CMD_2_PROCESS
.19308e	28		plp		                PLP
.19308f	6b		rtl		                RTL
.193090					NOTRECOGNIZEDCOMMAND
.193090	a2 6d 36	ldx #$366d	                LDX #<>CMD_Error_Notfound
.193093	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.193097	28		plp		                PLP
.193098	60		rts		                RTS
.193099					HOWMANYCHARINCMD
.193099	a0 00 00	ldy #$0000	                LDY #$0000
.19309c	da		phx		                PHX ; Push X to Stack for the time being
.19309d					ENDOFCOMMANDNOTFOUND
.19309d	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.1930a1	c9 20		cmp #$20	                CMP #$20              ; Check for a Space
.1930a3	f0 0b		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a5	c9 0d		cmp #$0d	                CMP #$0D              ; Check to see end of Command (if there is no arguments)
.1930a7	f0 07		beq $1930b0	                BEQ FOUNDTHEFOLLOWINGSPACE
.1930a9	e8		inx		                INX
.1930aa	c8		iny		                INY
.1930ab	c0 10 00	cpy #$0010	                CPY #$0010              ; Set the Maximum number of Character to 16 in the command
.1930ae	90 ed		bcc $19309d	                BCC ENDOFCOMMANDNOTFOUND
.1930b0					FOUNDTHEFOLLOWINGSPACE
.1930b0	fa		plx		                PLX ; Get the Pointer Location of the First Character of the Command
.1930b1	60		rts		                RTS
.1930b2					FINDCMDINLIST
.1930b2	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Save X for the Time Being
.1930b4	84 42		sty $42		                STY CMD_PARSER_TMPY   ; Save Y for the Time Being
.1930b6	c2 20		rep #$20	                REP #$20        ; set A long
.1930b8	a9 86 35	lda #$3586	                LDA #<>CMDListPtr
.1930bb	85 44		sta $44		                STA CMD_LIST_PTR
.1930bd	a9 00 00	lda #$0000	                LDA #$0000  ; Just to make sure B is zero
.1930c0	e2 20		sep #$20	                SEP #$20        ; set A short
.1930c2	a9 19		lda #$19	                LDA #`CMDListPtr
.1930c4	85 46		sta $46		                STA CMD_LIST_PTR+2
.1930c6	a0 00 00	ldy #$0000	                LDY #$0000
.1930c9	84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930cb					NOTTHERIGHTSIZEMOVEON
.1930cb	a4 54		ldy $54		                LDY CMD_VARIABLE_TMP
.1930cd	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930cf	85 48		sta $48		                STA CMD_PARSER_PTR
.1930d1	c8		iny		                INY
.1930d2	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d4	85 49		sta $49		                STA CMD_PARSER_PTR+1
.1930d6	c8		iny		                INY
.1930d7	b7 44		lda [$44],y	                LDA [CMD_LIST_PTR],Y
.1930d9	85 4a		sta $4a		                STA CMD_PARSER_PTR+2
.1930db	c8		iny		                INY
.1930dc	c0 3f 00	cpy #$003f	                CPY #size(CMDListPtr)
.1930df	b0 41		bcs $193122	                BCS COMMANDNOTFOUND   ; If we reach that limit then the Count didn't match any command in place
.1930e1	84 54		sty $54		                STY CMD_VARIABLE_TMP
.1930e3	a7 48		lda [$48]	                LDA [CMD_PARSER_PTR] ;
.1930e5	c5 42		cmp $42		                CMP CMD_PARSER_TMPY ;
.1930e7	d0 e2		bne $1930cb	                BNE NOTTHERIGHTSIZEMOVEON
.1930e9	20 2a 31	jsr $19312a	                JSR CHECKSYNTAX       ; Now we have found a Command in the list that matches the number of Char, let's see if this is one if we are looking for
.1930ec	b0 dd		bcs $1930cb	                BCS NOTTHERIGHTSIZEMOVEON ; Failed to Find
.1930ee	86 40		stx $40		                STX CMD_PARSER_TMPX   ; Just to make sure, this is where the Pointer in the line buffer is...
.1930f0	c8		iny		                INY   ; Point to after the $00, the next 2 bytes are the Attributes
.1930f1	a9 ff		lda #$ff	                LDA #$FF
.1930f3	85 5d		sta $5d		                STA CMD_VALID
.1930f5	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.1930f7	85 4b		sta $4b		                STA CMD_ATTRIBUTE
.1930f9	c8		iny		                INY
.1930fa	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.1930fc	85 4c		sta $4c		                STA CMD_ATTRIBUTE+1
.1930fe	c8		iny		                INY   ; This will point towards the Jumping Vector for the execution of the Command
.1930ff	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193101	85 4d		sta $4d		                STA CMD_EXEC_ADDY
.193103	c8		iny		                INY
.193104	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.193106	85 4e		sta $4e		                STA CMD_EXEC_ADDY+1
.193108	c8		iny		                INY
.193109	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y
.19310b	85 4f		sta $4f		                STA CMD_EXEC_ADDY+2
.19310d	a6 4b		ldx $4b		                LDX CMD_ATTRIBUTE
.19310f	e0 00 00	cpx #$0000	                CPX #$0000
.193112	f0 09		beq $19311d	                BEQ NO_ATTRIBUTE_GO_EXEC
.193114	20 43 31	jsr $193143	                JSR PROCESS_ARGUMENTS
.193117	a5 5d		lda $5d		                LDA CMD_VALID
.193119	c9 ff		cmp #$ff	                CMP #$FF
.19311b	f0 0c		beq $193129	                BEQ EXITWITHERROR       ; if Carry Set
.19311d					NO_ATTRIBUTE_GO_EXEC
.19311d	e2 20		sep #$20	                SEP #$20        ; set A short
.19311f	dc 4d 00	jmp [$004d]	                JML [CMD_EXEC_ADDY]
.193122					COMMANDNOTFOUND
.193122	a2 6d 36	ldx #$366d	                LDX #<>CMD_Error_Notfound
.193125	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.193129					EXITWITHERROR
.193129	60		rts		                RTS
.19312a					CHECKSYNTAX
.19312a	a0 01 00	ldy #$0001	                LDY #$0001      ; Point towards the Next Byte after the Size
.19312d	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer in the Line Buffer where the First Character ought to be...
.19312f					CHECKSYNTAXNEXTCHAR
.19312f	b7 48		lda [$48],y	                LDA [CMD_PARSER_PTR], Y ;
.193131	c9 00		cmp #$00	                CMP #$00  ; End of Character Check, if we reach that point, then we are on our way to have something happening! Call mom and dad and tell them how they failed to be good parents! Like all parents
.193133	f0 0c		beq $193141	                BEQ SUCCESSFOUNDCOMMAND
.193135	df 00 0f 00	cmp $000f00,x	                CMP @lKEY_BUFFER, X   ;
.193139	d0 04		bne $19313f	                BNE CHARDONTMATCH
.19313b	e8		inx		                INX
.19313c	c8		iny		                INY
.19313d	80 f0		bra $19312f	                BRA CHECKSYNTAXNEXTCHAR
.19313f	38		sec		CHARDONTMATCH   SEC
.193140	60		rts		                RTS
.193141					SUCCESSFOUNDCOMMAND
.193141	18		clc		                CLC
.193142	60		rts		                RTS
.193143					PROCESS_ARGUMENTS
.193143	c2 30		rep #$30	                REP #$30        ; set A&X long
.193145	a6 40		ldx $40		                LDX CMD_PARSER_TMPX ; This is the Pointer after the command
.193147	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; If there is supposed to be a parameter, this will go and fetch the next valid char
.19314a	90 03		bcc $19314f	                BCC ATTRIBUTE_2_PROCESS
.19314c	e2 20		sep #$20	                SEP #$20        ; set A short
.19314e	60		rts		                RTS
.19314f					ATTRIBUTE_2_PROCESS
.19314f	c2 20		rep #$20	                REP #$20        ; set A long
.193151	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193153	29 01 00	and #$0001	                AND #CMD_ARGTYPE_DEV    ; This is to know, if it is for a Flppy or for the SDCard
.193156	c9 01 00	cmp #$0001	                CMP #CMD_ARGTYPE_DEV
.193159	d0 08		bne $193163	                BNE NOT_CMD_ARGTYPE_DEV ; Device Type @S, @F, @C, @P
.19315b	20 37 32	jsr $193237	                JSR FIND_CMD_ARGTYPE_DEV
.19315e	90 03		bcc $193163	                BCC NOT_CMD_ARGTYPE_DEV
.193160	e2 20		sep #$20	                SEP #$20        ; set A short
.193162	60		rts		                RTS
.193163					NOT_CMD_ARGTYPE_DEV
.193163	c2 20		rep #$20	                REP #$20        ; set A long
.193165	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193167	29 02 00	and #$0002	                AND #CMD_ARGTYPE_FN
.19316a	c9 02 00	cmp #$0002	                CMP #CMD_ARGTYPE_FN
.19316d	d0 08		bne $193177	                BNE NOT_CMD_ARGTYPE_FN
.19316f	20 56 32	jsr $193256	                JSR FIND_CMD_ARGTYPE_FN ; File Name
.193172	90 03		bcc $193177	                BCC NOT_CMD_ARGTYPE_FN
.193174	e2 20		sep #$20	                SEP #$20        ; set A short
.193176	60		rts		                RTS
.193177					NOT_CMD_ARGTYPE_FN
.193177	c2 20		rep #$20	                REP #$20        ; set A long
.193179	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.19317b	29 04 00	and #$0004	                AND #CMD_ARGTYPE_SA
.19317e	c9 04 00	cmp #$0004	                CMP #CMD_ARGTYPE_SA
.193181	d0 03		bne $193186	                BNE NOT_CMD_ARGTYPE_SA; Starting Address (Source)
.193183	20 8b 32	jsr $19328b	                JSR FIND_CMD_ARGTYPE_SA
.193186					NOT_CMD_ARGTYPE_SA
.193186	c2 20		rep #$20	                REP #$20        ; set A long
.193188	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.19318a	29 08 00	and #$0008	                AND #CMD_ARGTYPE_EA
.19318d	c9 08 00	cmp #$0008	                CMP #CMD_ARGTYPE_EA
.193190	d0 03		bne $193195	                BNE NOT_CMD_ARGTYPE_EA ; Ending Address (Destination)
.193192	20 90 32	jsr $193290	                JSR FIND_CMD_ARGTYPE_EA
.193195					NOT_CMD_ARGTYPE_EA
.193195	c2 20		rep #$20	                REP #$20        ; set A long
.193197	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.193199	29 10 00	and #$0010	                AND #CMD_ARGTYPE_8D
.19319c	c9 10 00	cmp #$0010	                CMP #CMD_ARGTYPE_8D
.19319f	d0 03		bne $1931a4	                BNE NOT_CMD_ARGTYPE_8D
.1931a1	20 95 32	jsr $193295	                JSR FIND_CMD_ARGTYPE_8D ; 8bits Data
.1931a4					NOT_CMD_ARGTYPE_8D
.1931a4	c2 20		rep #$20	                REP #$20        ; set A long
.1931a6	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931a8	29 20 00	and #$0020	                AND #CMD_ARGTYPE_16D
.1931ab	c9 20 00	cmp #$0020	                CMP #CMD_ARGTYPE_16D
.1931ae	d0 03		bne $1931b3	                BNE NOT_CMD_ARGTYPE_16D
.1931b0	20 9a 32	jsr $19329a	                JSR FIND_CMD_ARGTYPE_16D; 16bit Data
.1931b3					NOT_CMD_ARGTYPE_16D
.1931b3	c2 20		rep #$20	                REP #$20        ; set A long
.1931b5	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931b7	29 40 00	and #$0040	                AND #CMD_ARGTYPE_TIM
.1931ba	c9 40 00	cmp #$0040	                CMP #CMD_ARGTYPE_TIM
.1931bd	d0 03		bne $1931c2	                BNE NOT_CMD_ARGTYPE_TIM
.1931bf	20 9f 32	jsr $19329f	                JSR FIND_CMD_ARGTYPE_TIM ; Time HH:MM:SS
.1931c2					NOT_CMD_ARGTYPE_TIM
.1931c2	c2 20		rep #$20	                REP #$20        ; set A long
.1931c4	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931c6	29 80 00	and #$0080	                AND #CMD_ARGTYPE_DAT
.1931c9	c9 80 00	cmp #$0080	                CMP #CMD_ARGTYPE_DAT
.1931cc	d0 03		bne $1931d1	                BNE NOT_CMD_ARGTYPE_DAT
.1931ce	20 a4 32	jsr $1932a4	                JSR FIND_CMD_ARGTYPE_DAT ; DD/MM/YY, SAT
.1931d1					NOT_CMD_ARGTYPE_DAT
.1931d1	c2 20		rep #$20	                REP #$20        ; set A long
.1931d3	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931d5	29 00 01	and #$0100	                AND #CMD_ARGTYPE_RGB
.1931d8	c9 00 01	cmp #$0100	                CMP #CMD_ARGTYPE_RGB
.1931db	d0 03		bne $1931e0	                BNE NOT_CMD_ARGTYPE_RGB ; 24bit Data
.1931dd	20 a9 32	jsr $1932a9	                JSR FIND_CMD_ARGTYPE_RGB;
.1931e0					NOT_CMD_ARGTYPE_RGB
.1931e0	c2 20		rep #$20	                REP #$20        ; set A long
.1931e2	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931e4	29 00 02	and #$0200	                AND #CMD_ARGTYPE_FN2
.1931e7	c9 00 02	cmp #$0200	                CMP #CMD_ARGTYPE_FN2
.1931ea	d0 03		bne $1931ef	                BNE NOT_CMD_ARGTYPE_FN2 ; Second File Name
.1931ec	20 ae 32	jsr $1932ae	                JSR FIND_CMD_ARGTYPE_FN2
.1931ef					NOT_CMD_ARGTYPE_FN2
.1931ef	c2 20		rep #$20	                REP #$20        ; set A long
.1931f1	a5 4b		lda $4b		                LDA CMD_ATTRIBUTE
.1931f3	29 00 04	and #$0400	                AND #CMD_ARGTYPE_DEC
.1931f6	c9 00 04	cmp #$0400	                CMP #CMD_ARGTYPE_DEC
.1931f9	d0 03		bne $1931fe	                BNE NO_ATTRIBUTE_2_PROCESS
.1931fb	20 b3 32	jsr $1932b3	                JSR FIND_CMD_ARGTYPE_DEC
.1931fe					NO_ATTRIBUTE_2_PROCESS
.1931fe	e2 20		sep #$20	                SEP #$20        ; set A short
.193200	a9 00		lda #$00	                LDA #$00
.193202	85 5d		sta $5d		                STA CMD_VALID
.193204	60		rts		                RTS
.193205					MOVE_POINTER_2_ARG
.193205	e2 20		sep #$20	                SEP #$20        ; set A short
.193207					MOVE_POINTER_2_NEXT_SPACE
.193207	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19320b	c9 0d		cmp #$0d	                CMP #$0D
.19320d	f0 12		beq $193221	                BEQ ERROR_PARAMETERMISSING
.19320f	c9 20		cmp #$20	                CMP #$20
.193211	d0 08		bne $19321b	                BNE POINTER_POINTING_NOT_A_SPACE_EXIT
.193213	e8		inx		                INX
.193214	e0 30 00	cpx #$0030	                CPX #$0030  ; If the Move Pointer gets
.193217	90 ee		bcc $193207	                BCC MOVE_POINTER_2_NEXT_SPACE
.193219	80 06		bra $193221	                BRA ERROR_PARAMETERMISSING
.19321b					POINTER_POINTING_NOT_A_SPACE_EXIT
.19321b	86 40		stx $40		                STX CMD_PARSER_TMPX
.19321d	c2 20		rep #$20	                REP #$20        ; set A long
.19321f	18		clc		                CLC
.193220	60		rts		                RTS
.193221					ERROR_PARAMETERMISSING
.193221	c2 20		rep #$20	                REP #$20        ; set A long
.193223	a2 06 36	ldx #$3606	                LDX #<>CMD_Error_Missing
.193226	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.19322a	38		sec		                SEC
.19322b	60		rts		                RTS
.19322c					ERROR_WRONGDEVICE
.19322c	c2 20		rep #$20	                REP #$20        ; set A long
.19322e	a2 22 36	ldx #$3622	                LDX #<>CMD_Wrong_Device
.193231	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.193235	38		sec		                SEC
.193236	60		rts		                RTS
.193237					FIND_CMD_ARGTYPE_DEV
.193237	e2 20		sep #$20	                SEP #$20        ; set A short
.193239	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19323d	c9 40		cmp #$40	                CMP #'@'
.19323f	d0 e0		bne $193221	                BNE ERROR_PARAMETERMISSING
.193241	e8		inx		                INX
.193242	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193246	c9 53		cmp #$53	                CMP #'S'                ; Is it
.193248	f0 04		beq $19324e	                BEQ SDCARD_CHOICE
.19324a	c9 46		cmp #$46	                CMP #'F'
.19324c	d0 de		bne $19322c	                BNE ERROR_WRONGDEVICE
.19324e					SDCARD_CHOICE
.19324e	85 56		sta $56		                STA CMD_ARG_DEV
.193250	86 40		stx $40		                STX CMD_PARSER_TMPX
.193252	18		clc		                CLC
.193253	c2 20		rep #$20	                REP #$20        ; set A long
.193255	60		rts		                RTS
.193256					FIND_CMD_ARGTYPE_FN
.193256	a6 40		ldx $40		                LDX CMD_PARSER_TMPX
.193258	e8		inx		                INX
.193259	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.19325c	e2 20		sep #$20	                SEP #$20        ; set A short
.19325e	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193262	c9 2c		cmp #$2c	                CMP #','
.193264	d0 bb		bne $193221	                BNE ERROR_PARAMETERMISSING
.193266	e8		inx		                INX
.193267	20 05 32	jsr $193205	                JSR MOVE_POINTER_2_ARG  ; Check if there is a space after the parameter
.19326a	e2 20		sep #$20	                SEP #$20        ; set A short
.19326c	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.193270	c9 22		cmp #$22	                CMP #'"'
.193272	d0 ad		bne $193221	                BNE ERROR_PARAMETERMISSING
.193274	a0 00 00	ldy #$0000	                LDY #$0000
.193277	e8		inx		                INX
.193278					KEEP_READING_FN
.193278	bf 00 0f 00	lda $000f00,x	                LDA @lKEY_BUFFER, X     ; Fetch the first char
.19327c	c9 22		cmp #$22	                CMP #'"'
.19327e	f0 0a		beq $19328a	                BEQ DONE_FILE_SAVE
.193280	99 80 03	sta $0380,y	                STA SDOS_FILE_NAME,Y
.193283	e8		inx		                INX
.193284	c8		iny		                INY
.193285	c0 10 00	cpy #$0010	                CPY #$0010
.193288	d0 ee		bne $193278	                BNE KEEP_READING_FN
.19328a					DONE_FILE_SAVE
.19328a	60		rts		                RTS
.19328b					FIND_CMD_ARGTYPE_SA
.19328b	48		pha		                PHA
.19328c	c2 20		rep #$20	                REP #$20        ; set A long
.19328e	68		pla		                PLA
.19328f	60		rts		                RTS
.193290					FIND_CMD_ARGTYPE_EA
.193290	48		pha		                PHA
.193291	c2 20		rep #$20	                REP #$20        ; set A long
.193293	68		pla		                PLA
.193294	60		rts		                RTS
.193295					FIND_CMD_ARGTYPE_8D
.193295	48		pha		                PHA
.193296	c2 20		rep #$20	                REP #$20        ; set A long
.193298	68		pla		                PLA
.193299	60		rts		                RTS
.19329a					FIND_CMD_ARGTYPE_16D
.19329a	48		pha		                PHA
.19329b	c2 20		rep #$20	                REP #$20        ; set A long
.19329d	68		pla		                PLA
.19329e	60		rts		                RTS
.19329f					FIND_CMD_ARGTYPE_TIM
.19329f	48		pha		                PHA
.1932a0	c2 20		rep #$20	                REP #$20        ; set A long
.1932a2	68		pla		                PLA
.1932a3	60		rts		                RTS
.1932a4					FIND_CMD_ARGTYPE_DAT
.1932a4	48		pha		                PHA
.1932a5	c2 20		rep #$20	                REP #$20        ; set A long
.1932a7	68		pla		                PLA
.1932a8	60		rts		                RTS
.1932a9					FIND_CMD_ARGTYPE_RGB
.1932a9	48		pha		                PHA
.1932aa	c2 20		rep #$20	                REP #$20        ; set A long
.1932ac	68		pla		                PLA
.1932ad	60		rts		                RTS
.1932ae					FIND_CMD_ARGTYPE_FN2
.1932ae	48		pha		                PHA
.1932af	c2 20		rep #$20	                REP #$20        ; set A long
.1932b1	68		pla		                PLA
.1932b2	60		rts		                RTS
.1932b3					FIND_CMD_ARGTYPE_DEC
.1932b3	48		pha		                PHA
.1932b4	c2 20		rep #$20	                REP #$20        ; set A long
.1932b6	68		pla		                PLA
.1932b7	60		rts		                RTS
.1932b8					ENTRY_CMD_CLS
.1932b8	e2 20		sep #$20	                SEP #$20        ; set A short
.1932ba	c2 10		rep #$10	                REP #$10        ; set X long
.1932bc	a2 00 00	ldx #$0000	              LDX #$0000		; Only Use One Pointer
.1932bf	a9 20		lda #$20	              LDA #$20		; Fill the Entire Screen with Space
.1932c1	9f 00 a0 af	sta $afa000,x	CLEARSCREENL0	STA CS_TEXT_MEM_PTR, x	;
.1932c5	e8		inx		              inx
.1932c6	e0 00 20	cpx #$2000	              cpx #$2000
.1932c9	d0 f6		bne $1932c1	              bne CLEARSCREENL0
.1932cb	a2 00 00	ldx #$0000	              LDX	#$0000		; Only Use One Pointer
.1932ce	a9 ed		lda #$ed	              LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.1932d0	9f 00 c0 af	sta $afc000,x	CLEARSCREENL1	STA CS_COLOR_MEM_PTR, x	;
.1932d4	e8		inx		              inx
.1932d5	e0 00 20	cpx #$2000	              cpx #$2000
.1932d8	d0 f6		bne $1932d0	              bne CLEARSCREENL1
.1932da	a2 00 00	ldx #$0000	              LDX #$0000
.1932dd	86 52		stx $52		              STX KEY_BUFFER_WPOS
.1932df	86 50		stx $50		              STX KEY_BUFFER_RPOS
.1932e1	a0 00 00	ldy #$0000	              LDY #$0000
.1932e4	22 5f 06 19	jsl $19065f	              JSL ILOCATE
.1932e8	60		rts		              RTS
.1932e9					ENTRY_CMD_DIR
.1932e9	a2 c5 35	ldx #$35c5	              LDX #<>DIR_COMMAND
.1932ec	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.1932f0	af 02 e8 af	lda $afe802	              LDA @lJOYSTICK2
.1932f4	29 80		and #$80	              AND #$80        ; Card Present when 1
.1932f6	d0 18		bne $193310	              BNE SDNOT_PRESENT;
.1932f8	af 03 e8 af	lda $afe803	              LDA @lJOYSTICK3
.1932fc	29 80		and #$80	              AND #$80        ; Card WProtect When 0
.1932fe	f0 07		beq $193307	              BEQ SDNOT_WP;
.193300	a2 8d 36	ldx #$368d	              LDX #<>CMD_Error_SD_WP
.193303	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.193307					SDNOT_WP
.193307	22 20 20 19	jsl $192020	              JSL ISDOS_INIT
.19330b	22 6d 20 19	jsl $19206d	              JSL ISDOS_DIR
.19330f	60		rts		              RTS
.193310					SDNOT_PRESENT
.193310	a2 7a 36	ldx #$367a	              LDX #<>CMD_Error_SD_NotPresent
.193313	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.193317	60		rts		              RTS
.193318	60		rts		RTS
.193319					ENTRY_CMD_EXEC
.193319	a2 d3 35	ldx #$35d3	  LDX #<>EXEC_COMMAND
.19331c	22 76 05 19	jsl $190576	  JSL IPRINT       ; print the first line
.193320	60		rts		RTS
.193321					ENTRY_CMD_LOAD
.193321	a2 ed 35	ldx #$35ed	LDX #<>LOAD_COMMAND
.193324	22 76 05 19	jsl $190576	JSL IPRINT       ; print the first line
.193328	60		rts		RTS
.193329	60		rts		ENTRY_CMD_SAVE RTS
.19332a	60		rts		ENTRY_CMD_PEEK8     RTS
.19332b	60		rts		ENTRY_CMD_POKE8     RTS
.19332c	60		rts		ENTRY_CMD_POKE16    RTS
.19332d	60		rts		ENTRY_CMD_PEEK16    RTS
.19332e	60		rts		ENTRY_CMD_RECWAV    RTS
.19332f	60		rts		ENTRY_CMD_EXECFNX   RTS
.193330					ENTRY_CMD_GETDATE
.193330	e2 20		sep #$20	                SEP #$20        ; set A short
.193332	af 06 08 af	lda $af0806	              LDA @lRTC_DAY   ; Go Read the Hour Registers
.193336	48		pha		              PHA
.193337	29 30		and #$30	              AND #$30
.193339	4a		lsr a		              LSR A
.19333a	4a		lsr a		              LSR A
.19333b	4a		lsr a		              LSR A
.19333c	4a		lsr a		              LSR A
.19333d	09 30		ora #$30	              ORA #$30
.19333f	22 96 05 19	jsl $190596	              JSL IPUTC
.193343	68		pla		              PLA
.193344	29 0f		and #$0f	              AND #$0F
.193346	09 30		ora #$30	              ORA #$30
.193348	22 96 05 19	jsl $190596	              JSL IPUTC
.19334c	a9 2f		lda #$2f	              LDA #'/'
.19334e	22 96 05 19	jsl $190596	              JSL IPUTC
.193352	af 09 08 af	lda $af0809	              LDA @lRTC_MONTH   ; Go Read the Min Registers
.193356	48		pha		              PHA
.193357	29 10		and #$10	              AND #$10
.193359	4a		lsr a		              LSR A
.19335a	4a		lsr a		              LSR A
.19335b	4a		lsr a		              LSR A
.19335c	4a		lsr a		              LSR A
.19335d	69 30		adc #$30	              ADC #$30
.19335f	22 96 05 19	jsl $190596	              JSL IPUTC
.193363	68		pla		              PLA
.193364	29 0f		and #$0f	              AND #$0F
.193366	09 30		ora #$30	              ORA #$30
.193368	22 96 05 19	jsl $190596	              JSL IPUTC
.19336c	a9 2f		lda #$2f	              LDA #'/'
.19336e	22 96 05 19	jsl $190596	              JSL IPUTC
.193372	af 0a 08 af	lda $af080a	              LDA @lRTC_YEAR   ; Go Read the Sec Registers
.193376	48		pha		              PHA
.193377	29 f0		and #$f0	              AND #$F0
.193379	4a		lsr a		              LSR A
.19337a	4a		lsr a		              LSR A
.19337b	4a		lsr a		              LSR A
.19337c	4a		lsr a		              LSR A
.19337d	09 30		ora #$30	              ORA #$30
.19337f	22 96 05 19	jsl $190596	              JSL IPUTC
.193383	68		pla		              PLA
.193384	29 0f		and #$0f	              AND #$0F
.193386	09 30		ora #$30	              ORA #$30
.193388	22 96 05 19	jsl $190596	              JSL IPUTC
.19338c	a9 2c		lda #$2c	              LDA #','
.19338e	22 96 05 19	jsl $190596	              JSL IPUTC
.193392	af 08 08 af	lda $af0808	              LDA @lRTC_DOW
.193396	3a		dec a		              DEC A
.193397	0a		asl a		              ASL A
.193398	0a		asl a		              ASL A
.193399	aa		tax		              TAX
.19339a					GO_PUTC_THE_DOW
.19339a	bf 97 36 19	lda $193697,x	              LDA @lDOW,X
.19339e	c9 00		cmp #$00	              CMP #$00
.1933a0	f0 09		beq $1933ab	              BEQ DOW_IPUTC_DONE
.1933a2	e8		inx		              INX
.1933a3	da		phx		              PHX
.1933a4	22 96 05 19	jsl $190596	              JSL IPUTC
.1933a8	fa		plx		              PLX
.1933a9	80 ef		bra $19339a	              BRA GO_PUTC_THE_DOW
.1933ab					DOW_IPUTC_DONE
.1933ab	a9 0d		lda #$0d	              LDA #$0D
.1933ad	22 96 05 19	jsl $190596	              JSL IPUTC
.1933b1	60		rts		              RTS
.1933b2					ENTRY_CMD_GETTIME
.1933b2	e2 20		sep #$20	                SEP #$20        ; set A short
.1933b4	af 04 08 af	lda $af0804	              LDA @lRTC_HRS   ; Go Read the Hour Registers
.1933b8	48		pha		              PHA
.1933b9	29 30		and #$30	              AND #$30
.1933bb	4a		lsr a		              LSR A
.1933bc	4a		lsr a		              LSR A
.1933bd	4a		lsr a		              LSR A
.1933be	4a		lsr a		              LSR A
.1933bf	09 30		ora #$30	              ORA #$30
.1933c1	22 96 05 19	jsl $190596	              JSL IPUTC
.1933c5	68		pla		              PLA
.1933c6	29 0f		and #$0f	              AND #$0F
.1933c8	09 30		ora #$30	              ORA #$30
.1933ca	22 96 05 19	jsl $190596	              JSL IPUTC
.1933ce	a9 3a		lda #$3a	              LDA #':'
.1933d0	22 96 05 19	jsl $190596	              JSL IPUTC
.1933d4	af 02 08 af	lda $af0802	              LDA @lRTC_MIN   ; Go Read the Min Registers
.1933d8	48		pha		              PHA
.1933d9	29 70		and #$70	              AND #$70
.1933db	4a		lsr a		              LSR A
.1933dc	4a		lsr a		              LSR A
.1933dd	4a		lsr a		              LSR A
.1933de	4a		lsr a		              LSR A
.1933df	69 30		adc #$30	              ADC #$30
.1933e1	22 96 05 19	jsl $190596	              JSL IPUTC
.1933e5	68		pla		              PLA
.1933e6	29 0f		and #$0f	              AND #$0F
.1933e8	09 30		ora #$30	              ORA #$30
.1933ea	22 96 05 19	jsl $190596	              JSL IPUTC
.1933ee	a9 3a		lda #$3a	              LDA #':'
.1933f0	22 96 05 19	jsl $190596	              JSL IPUTC
.1933f4	af 00 08 af	lda $af0800	              LDA @lRTC_SEC   ; Go Read the Sec Registers
.1933f8	48		pha		              PHA
.1933f9	29 f0		and #$f0	              AND #$F0
.1933fb	4a		lsr a		              LSR A
.1933fc	4a		lsr a		              LSR A
.1933fd	4a		lsr a		              LSR A
.1933fe	4a		lsr a		              LSR A
.1933ff	09 30		ora #$30	              ORA #$30
.193401	22 96 05 19	jsl $190596	              JSL IPUTC
.193405	68		pla		              PLA
.193406	29 0f		and #$0f	              AND #$0F
.193408	09 30		ora #$30	              ORA #$30
.19340a	22 96 05 19	jsl $190596	              JSL IPUTC
.19340e	af 04 08 af	lda $af0804	              LDA @lRTC_HRS
.193412	29 80		and #$80	              AND #$80
.193414	c9 80		cmp #$80	              CMP #$80
.193416	f0 08		beq $193420	              BEQ AMFMCHOICE
.193418	a9 41		lda #$41	              LDA #'A'
.19341a	22 96 05 19	jsl $190596	              JSL IPUTC
.19341e	80 06		bra $193426	              BRA GO_PUTC_THE_M
.193420					AMFMCHOICE
.193420	a9 50		lda #$50	              LDA #'P'
.193422	22 96 05 19	jsl $190596	              JSL IPUTC
.193426					GO_PUTC_THE_M
.193426	a9 4d		lda #$4d	              LDA #'M'
.193428	22 96 05 19	jsl $190596	              JSL IPUTC
.19342c	a9 0d		lda #$0d	              LDA #$0D
.19342e	22 96 05 19	jsl $190596	              JSL IPUTC
.193432	60		rts		RTS
.193433	60		rts		ENTRY_CMD_MONITOR   RTS
.193434	60		rts		ENTRY_CMD_PLAYRAD   RTS
.193435	60		rts		ENTRY_CMD_PLAYWAV   RTS
.193436	60		rts		ENTRY_CMD_SETDATE   RTS
.193437	60		rts		ENTRY_CMD_SETTIME   RTS
.193438	60		rts		ENTRY_CMD_SYSINFO   RTS
.193439	60		rts		ENTRY_CMD_DISKCOPY  RTS
.19343a	60		rts		ENTRY_CMD_SETTXTLUT RTS
.19343b					CMD
>19343b	03 43 4c 53 00 00 00 b8		CLS       .text $03, "CLS", $00, CMD_ARGTYPE_NO, ENTRY_CMD_CLS                                        ; Clear Screen
>193443	32 19
>193445	03 44 49 52 00 01 00 e9		DIR       .text $03, "DIR", $00, CMD_ARGTYPE_DEV, ENTRY_CMD_DIR                                       ; @F, @S
>19344d	32 19
>19344f	04 45 58 45 43 00 04 00		EXEC      .text $04, "EXEC", $00, CMD_ARGTYPE_SA, ENTRY_CMD_EXEC                                        ; EXEC S:$00000
>193457	19 33 19
>19345a	04 4c 4f 41 44 00 0b 00		LOAD      .text $04, "LOAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_EA), ENTRY_CMD_LOAD   ; "LOAD @F, "NAME.XXX", D:$000000
>193462	21 33 19
>193465	04 53 41 56 45 00 0f 00		SAVE      .text $04, "SAVE", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN | CMD_ARGTYPE_SA | CMD_ARGTYPE_EA), ENTRY_CMD_SAVE           ; SAVE @F, "NAME.XXX", S:$000000, D:$000000
>19346d	29 33 19
>193470	06 50 45 45 4b 38 48 00		PEEK8     .text $06, "PEEK8H", $00,  CMD_ARGTYPE_SA, ENTRY_CMD_PEEK8       ; PEEK8 $000000
>193478	04 00 2a 33 19
>19347d	06 50 4f 4b 45 38 48 00		POKE8     .text $06, "POKE8H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_8D), ENTRY_CMD_POKE8          ; POKE8 $000000, $00
>193485	14 00 2b 33 19
>19348a	06 52 45 43 57 41 56 00		RECWAV    .text $06, "RECWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN) , ENTRY_CMD_RECWAV          ; RECWAV @S, "NAME.XXX" (Samples)
>193492	03 00 2e 33 19
>193497	07 45 58 45 43 46 4e 58		EXECFNX   .text $07, "EXECFNX", $00, CMD_ARGTYPE_FN, ENTRY_CMD_EXECFNX        ; "EXECFNX "NAME.XXX"
>19349f	00 02 00 2f 33 19
>1934a5	07 47 45 54 44 41 54 45		GETDATE   .text $07, "GETDATE", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETDATE       ; GETDATE
>1934ad	00 00 00 30 33 19
>1934b3	07 47 45 54 54 49 4d 45		GETTIME   .text $07, "GETTIME", $00, CMD_ARGTYPE_NO, ENTRY_CMD_GETTIME        ; GETTIME
>1934bb	00 00 00 b2 33 19
>1934c1	07 4d 4f 4e 49 54 4f 52		MONITOR   .text $07, "MONITOR", $00, CMD_ARGTYPE_NO, ENTRY_CMD_MONITOR       ; MONITOR TBD
>1934c9	00 00 00 33 34 19
>1934cf	07 50 4c 41 59 52 41 44		PLAYRAD   .text $07, "PLAYRAD", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYRAD        ; PLAYRAD @S, "NAME.XXX" (music File)
>1934d7	00 03 00 34 34 19
>1934dd	07 50 4c 41 59 57 41 56		PLAYWAV   .text $07, "PLAYWAV", $00, (CMD_ARGTYPE_DEV | CMD_ARGTYPE_FN), ENTRY_CMD_PLAYWAV                ; PLAYWAV @S, "NAME.XXX" (samples)
>1934e5	00 03 00 35 34 19
>1934eb	07 50 45 45 4b 31 36 48		PEEK16    .text $07, "PEEK16H", $00, CMD_ARGTYPE_SA, ENTRY_CMD_POKE16, ENTRY_CMD_PEEK16        ; PEEK16 $000000
>1934f3	00 04 00 2c 33 19 2d 33 19
>1934fc	07 50 4f 4b 45 31 36 48		POKE16    .text $07, "POKE16H", $00, (CMD_ARGTYPE_SA | CMD_ARGTYPE_16D), ENTRY_CMD_POKE16           ; POKE16 $000000, $0000
>193504	00 24 00 2c 33 19
>19350a	07 53 45 54 44 41 54 45		SETDATE   .text $07, "SETDATE", $00, CMD_ARGTYPE_DAT, ENTRY_CMD_SETDATE      ; SETDATE YY:MM:DD
>193512	00 80 00 36 34 19
>193518	07 53 45 54 54 49 4d 45		SETTIME   .text $07, "SETTIME", $00, CMD_ARGTYPE_TIM, ENTRY_CMD_SETTIME       ; SETTIME HH:MM:SS
>193520	00 40 00 37 34 19
>193526	04 53 59 53 49 4e 46 4f		SYSINFO   .text $04, "SYSINFO", $00, CMD_ARGTYPE_NO, ENTRY_CMD_SYSINFO
>19352e	00 00 00 38 34 19
>193534	08 44 49 53 4b 43 4f 50		DISKCOPY  .text $08, "DISKCOPY", $00, CMD_ARGTYPE_DEV, CMD_ARGTYPE_DEV, ENTRY_CMD_DISKCOPY           ; DISKCOPY @F, @F
>19353c	59 00 01 00 01 00 39 34 19
>193545	08 46 49 4c 45 43 4f 50		FILECOPY  .text $08, "FILECOPY", $00, (CMD_ARGTYPE_FN | CMD_ARGTYPE_FN2)
>19354d	59 00 02 02
>193551	08 53 45 54 42 47 43 4c		SETBGCLR  .text $08, "SETBGCLR", $00, CMD_ARGTYPE_DEC
>193559	52 00 00 04
>19355d	08 53 45 54 46 47 43 4c		SETFGCLR  .text $08, "SETFGCLR", $00, CMD_ARGTYPE_DEC
>193565	52 00 00 04
>193569	09 53 45 54 54 58 54 4c		SETTXTLUT .text $09, "SETTXTLUT", $00, (CMD_ARGTYPE_DAT | CMD_ARGTYPE_RGB), ENTRY_CMD_SETTXTLUT        ; SETLUT $00, $000000
>193571	55 54 00 80 01 3a 34 19
>193579	09 53 45 54 42 52 44 43		SETBRDCLR .text $09, "SETBRDCLR", $00, CMD_ARGTYPE_RGB
>193581	4c 52 00 00 01
>193586	3b 34 19 45 34 19 4f 34		CMDListPtr .long CMD.CLS, CMD.DIR, CMD.EXEC, CMD.LOAD, CMD.SAVE, CMD.PEEK8, CMD.POKE8, CMD.PEEK16, CMD.POKE16, CMD.RECWAV, CMD.EXECFNX, CMD.GETDATE, CMD.GETTIME, CMD.MONITOR, CMD.PLAYRAD, CMD.PLAYWAV, CMD.SETDATE, CMD.SETTIME, CMD.SYSINFO, CMD.DISKCOPY, CMD.SETTXTLUT
>19358e	19 5a 34 19 65 34 19 70 34 19 7d 34 19 eb 34 19
>19359e	fc 34 19 8a 34 19 97 34 19 a5 34 19 b3 34 19 c1
>1935ae	34 19 cf 34 19 dd 34 19 0a 35 19 18 35 19 26 35
>1935be	19 34 35 19 69 35 19
=$0000					CMD_ARGTYPE_NO    = $0000 ; No Argument
=$0001					CMD_ARGTYPE_DEV   = $0001 ; Device Type @S, @F
=$0002					CMD_ARGTYPE_FN    = $0002 ; File Name
=$0004					CMD_ARGTYPE_SA    = $0004 ; Starting Address (Source)
=$0008					CMD_ARGTYPE_EA    = $0008 ; Ending Address (Destination)
=$0010					CMD_ARGTYPE_8D    = $0010 ; 8bits Data
=$0020					CMD_ARGTYPE_16D   = $0020 ; 16bits Data
=$0040					CMD_ARGTYPE_TIM   = $0040 ; Time
=$0080					CMD_ARGTYPE_DAT   = $0080 ; Date
=$0100					CMD_ARGTYPE_RGB   = $0100 ; RGB Data (24Bit Data) for LUT mainly
=$0200					CMD_ARGTYPE_FN2   = $0200 ; Second File name
=$0400					CMD_ARGTYPE_DEC   = $0400 ; Decimal value
>1935c5	0d 40 53 44 43 41 52 44		DIR_COMMAND .text $0D, "@SDCARD:", $00
>1935cd	3a 00
>1935cf	43 4c 53 00			CLS_COMMAND .text "CLS", $00
>1935d3	45 58 45 43 20 43 6f 6d		EXEC_COMMAND .text "EXEC Command Executing...", $00
>1935db	6d 61 6e 64 20 45 78 65 63 75 74 69 6e 67 2e 2e
>1935eb	2e 00
>1935ed	4c 4f 41 44 00			LOAD_COMMAND .text "LOAD", $00
>1935f2	45 30 30 30 20 2d 20 53		CMD_Error_Syntax  .text "E000 - SYNTAX ERROR", $00
>1935fa	59 4e 54 41 58 20 45 52 52 4f 52 00
>193606	45 30 30 31 20 2d 20 4d		CMD_Error_Missing .text "E001 - MISSING PARAMETER(S)", $00
>19360e	49 53 53 49 4e 47 20 50 41 52 41 4d 45 54 45 52
>19361e	28 53 29 00
>193622	45 30 30 32 20 2d 20 4e		CMD_Wrong_Device  .text "E002 - NO SUCH DEVICE EXISTS", $00
>19362a	4f 20 53 55 43 48 20 44 45 56 49 43 45 20 45 58
>19363a	49 53 54 53 00
>19363f	57 72 6f 6e 67 20 50 61		CMD_Error_Wrong   .text "Wrong Parameters...", $00
>193647	72 61 6d 65 74 65 72 73 2e 2e 2e 00
>193653	45 30 30 34 20 42 55 46		CMD_Error_Overrun .text "E004 BUFFER OVERRUN ERROR", $00
>19365b	46 45 52 20 4f 56 45 52 52 55 4e 20 45 52 52 4f
>19366b	52 00
>19366d	53 59 4e 54 41 58 20 45		CMD_Error_Notfound .text "SYNTAX ERROR", $00
>193675	52 52 4f 52 00
>19367a	53 44 43 41 52 44 20 4e		CMD_Error_SD_NotPresent .text "SDCARD NOT PRESENT", $00
>193682	4f 54 20 50 52 45 53 45 4e 54 00
>19368d	53 44 43 41 52 44 20 57		CMD_Error_SD_WP .text "SDCARD WP", $00
>193695	50 00
>193697	53 55 4e 00 4d 4f 4e 00		DOW      .text "SUN", $00, "MON", $00, "TUE", $00, "WED", $00, "THU", $00, "FRI", $00, "SAT", $00
>19369f	54 55 45 00 57 45 44 00 54 48 55 00 46 52 49 00
>1936af	53 41 54 00

;******  Return to file: kernel.asm


;******  Processing file: monitor.asm

.195000	5c 5c 50 19	jmp $19505c	MONITOR         JML IMONITOR
.195004	5c 8a 50 19	jmp $19508a	MSTATUS         JML IMSTATUS
.195008	5c 68 50 19	jmp $195068	MREADY          JML IMREADY
.19500c	5c 35 51 19	jmp $195135	MRETURN         JML IMRETURN
.195010	5c 36 51 19	jmp $195136	MPARSE          JML IMPARSE
.195014	5c 37 51 19	jmp $195137	MPARSE1         JML IMPARSE1
.195018	5c 38 51 19	jmp $195138	MEXECUTE        JML IMEXECUTE
.19501c	5c 39 51 19	jmp $195139	MASSEMBLE       JML IMASSEMBLE
.195020	5c 3a 51 19	jmp $19513a	MASSEMBLEA      JML IMASSEMBLEA
.195024	5c 3b 51 19	jmp $19513b	MCOMPARE        JML IMCOMPARE
.195028	5c 3c 51 19	jmp $19513c	MDISASSEMBLE    JML IMDISASSEMBLE
.19502c	5c 3d 51 19	jmp $19513d	MFILL           JML IMFILL
.195030	5c 3f 51 19	jmp $19513f	MJUMP           JML IMJUMP
.195034	5c 40 51 19	jmp $195140	MHUNT           JML IMHUNT
.195038	5c 41 51 19	jmp $195141	MLOAD           JML IMLOAD
.19503c	5c 42 51 19	jmp $195142	MMEMORY         JML IMMEMORY
.195040	5c 43 51 19	jmp $195143	MREGISTERS      JML IMREGISTERS
.195044	5c 44 51 19	jmp $195144	MSAVE           JML IMSAVE
.195048	5c 45 51 19	jmp $195145	MTRANSFER       JML IMTRANSFER
.19504c	5c 46 51 19	jmp $195146	MVERIFY         JML IMVERIFY
.195050	5c 47 51 19	jmp $195147	MEXIT           JML IMEXIT
.195054	5c 48 51 19	jmp $195148	MMODIFY         JML IMMODIFY
.195058	5c 49 51 19	jmp $195149	MDOS            JML IMDOS
.19505c	18		clc		IMONITOR        CLC           ; clear the carry flag
.19505d	fb		xce		                XCE           ; move carry to emulation flag.
.19505e	c2 20		rep #$20	                REP #$20        ; set A long
.195060	a9 ff fe	lda #$feff	                LDA #STACK_END ; Reset the stack
.195063	1b		tcs		                TAS
.195064	5c 68 50 19	jmp $195068	                JML IMREADY
.195068					IMREADY
.195068	c2 30		rep #$30	                REP #$30        ; set A&X long
.19506a	a9 68 50	lda #$5068	                LDA #<>IMREADY
.19506d	8d e1 ff	sta $ffe1	                STA JMP_READY+1
.195070	e2 20		sep #$20	                SEP #$20        ; set A short
.195072	a9 19		lda #$19	                LDA #`IMREADY
.195074	8d e3 ff	sta $ffe3	                STA JMP_READY+3
.195077	c2 20		rep #$20	                REP #$20        ; set A long
.195079	a9 35 51	lda #$5135	                LDA #<>IMRETURN
.19507c	8d f1 ff	sta $fff1	                STA RETURN+1
.19507f	e2 20		sep #$20	                SEP #$20        ; set A short
.195081	a9 19		lda #$19	                LDA #`IMRETURN
.195083	8d f3 ff	sta $fff3	                STA RETURN+3
.195086	5c 8a 50 19	jmp $19508a	                JML IMSTATUS
.19508a					IMSTATUS
.19508a	48		pha		                PHA             ; begin setdbr macro
.19508b	08		php		                PHP
.19508c	e2 20		sep #$20	                SEP #$20        ; set A short
.19508e	a9 19		lda #$19		LDA #`mregisters_msg
.195090	48		pha		                PHA
.195091	ab		plb		                PLB
.195092	28		plp		                PLP
.195093	68		pla		                PLA             ; end setdbr macro
.195094	a2 4a 51	ldx #$514a	                LDX #<>mregisters_msg
.195097	22 76 05 19	jsl $190576	                JSL IPRINT
.19509b	e2 20		sep #$20	                SEP #$20        ; set A short
.19509d	a9 3b		lda #$3b	                LDA #';'
.19509f	22 96 05 19	jsl $190596	                JSL IPUTC
.1950a3	c2 30		rep #$30	                REP #$30        ; set A&X long
.1950a5	48		pha		                PHA             ; begin setdbr macro
.1950a6	08		php		                PHP
.1950a7	e2 20		sep #$20	                SEP #$20        ; set A short
.1950a9	a9 00		lda #$00		LDA #$0
.1950ab	48		pha		                PHA
.1950ac	ab		plb		                PLB
.1950ad	28		plp		                PLP
.1950ae	68		pla		                PLA             ; end setdbr macro
.1950af	a0 03 00	ldy #$0003	                LDY #3
.1950b2	a2 42 02	ldx #$0242	                LDX #CPUPC+2
.1950b5	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.1950b9	a5 20		lda $20		                LDA ' '
.1950bb	22 96 05 19	jsl $190596	                JSL IPUTC
.1950bf	a0 02 00	ldy #$0002	                LDY #2
.1950c2	a2 45 02	ldx #$0245	                LDX #CPUA+1
.1950c5	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.1950c9	a5 20		lda $20		                LDA ' '
.1950cb	22 96 05 19	jsl $190596	                JSL IPUTC
.1950cf	a0 02 00	ldy #$0002	                LDY #2
.1950d2	a2 47 02	ldx #$0247	                LDX #CPUX+1
.1950d5	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.1950d9	a5 20		lda $20		                LDA ' '
.1950db	22 96 05 19	jsl $190596	                JSL IPUTC
.1950df	a0 02 00	ldy #$0002	                LDY #2
.1950e2	a2 49 02	ldx #$0249	                LDX #CPUY+1
.1950e5	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.1950e9	a5 20		lda $20		                LDA ' '
.1950eb	22 96 05 19	jsl $190596	                JSL IPUTC
.1950ef	a0 02 00	ldy #$0002	                LDY #2
.1950f2	a2 4b 02	ldx #$024b	                LDX #CPUSTACK+1
.1950f5	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.1950f9	a5 20		lda $20		                LDA ' '
.1950fb	22 96 05 19	jsl $190596	                JSL IPUTC
.1950ff	a0 01 00	ldy #$0001	                LDY #1
.195102	a2 4e 02	ldx #$024e	                LDX #CPUDBR
.195105	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.195109	a5 20		lda $20		                LDA ' '
.19510b	22 96 05 19	jsl $190596	                JSL IPUTC
.19510f	22 96 05 19	jsl $190596	                JSL IPUTC
.195113	a0 02 00	ldy #$0002	                LDY #2
.195116	a2 4d 02	ldx #$024d	                LDX #CPUDP+1
.195119	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.19511d	a5 20		lda $20		                LDA ' '
.19511f	22 96 05 19	jsl $190596	                JSL IPUTC
.195123	a0 01 00	ldy #$0001	                LDY #1
.195126	a2 4f 02	ldx #$024f	                LDX #CPUFLAGS
.195129	22 b1 06 19	jsl $1906b1	                JSL IPRINTH
.19512d	22 c4 05 19	jsl $1905c4	                JSL IPRINTCR
.195131	5c 64 05 19	jmp $190564	                JML IREADYWAIT
.195135	6b		rtl		IMRETURN        RTL ; Handle RETURN key (ie: execute command)
.195136	00		brk #		IMPARSE         BRK ; Parse the current command line
.195137	00		brk #		IMPARSE1        BRK ; Parse one word on the current command line
.195138	00		brk #		IMEXECUTE       BRK ; Execute the current command line (requires MCMD and MARG1-MARG8 to be populated)
.195139	00		brk #		IMASSEMBLE      BRK ; Assemble a line of text.
.19513a	00		brk #		IMASSEMBLEA     BRK ; Assemble a line of text.
.19513b	00		brk #		IMCOMPARE       BRK ; Compare memory. len=1
.19513c	00		brk #		IMDISASSEMBLE   BRK ; Disassemble memory. end=1 instruction
.19513d	00		brk #		IMFILL          BRK ; Fill memory with specified value. Start and end must be in the same bank.
.19513e	00		brk #		IMGO            BRK ; Execute from specified address
.19513f	00		brk #		IMJUMP          BRK ; Execute from spefified address
.195140	00		brk #		IMHUNT          BRK ; Hunt (find) value in memory
.195141	00		brk #		IMLOAD          BRK ; Load data from disk. Device=1 (internal floppy) Start=Address in file
.195142	00		brk #		IMMEMORY        BRK ; View memory
.195143	00		brk #		IMREGISTERS     BRK ; View/edit registers
.195144	00		brk #		IMSAVE          BRK ; Save memory to disk
.195145	00		brk #		IMTRANSFER      BRK ; Transfer (copy) data in memory
.195146	00		brk #		IMVERIFY        BRK ; Verify memory and file on disk
.195147	00		brk #		IMEXIT          BRK ; Exit monitor and return to BASIC command prompt
.195148	00		brk #		IMMODIFY        BRK ; Modify memory
.195149	00		brk #		IMDOS           BRK ; Execute DOS command
.19514a					MMESSAGES
>19514a					MMERROR         .text
>19514a	0d 20 50 43 20 20 20 20		mregisters_msg  .null $0D," PC     A    X    Y    SP   DBR DP   NVMXDIZC"
>195152	20 41 20 20 20 20 58 20 20 20 20 59 20 20 20 20
>195162	53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56
>195172	4d 58 44 49 5a 43 00

;******  Return to file: kernel.asm


;******  Processing file: Interrupt_Handler.asm

.195179					IRQ_HANDLER
.195179	e2 20		sep #$20	                SEP #$20        ; set A short
.19517b	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19517f	c9 00		cmp #$00	                CMP #$00
.195181	f0 37		beq $1951ba	                BEQ CHECK_PENDING_REG1
.195183	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.195187	29 01		and #$01	                AND #FNX0_INT00_SOF
.195189	c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.19518b	d0 09		bne $195196	                BNE SERVICE_NEXT_IRQ6
.19518d	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.195191	20 07 53	jsr $195307	                JSR SOF_INTERRUPT
.195194	e2 20		sep #$20	                SEP #$20        ; set A short
.195196					SERVICE_NEXT_IRQ6
.195196	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19519a	29 40		and #$40	                AND #FNX0_INT06_FDC
.19519c	c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.19519e	d0 09		bne $1951a9	                BNE SERVICE_NEXT_IRQ7
.1951a0	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1951a4	20 53 53	jsr $195353	                JSR FDC_INTERRUPT
.1951a7	e2 20		sep #$20	                SEP #$20        ; set A short
.1951a9					SERVICE_NEXT_IRQ7
.1951a9	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1951ad	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.1951af	c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.1951b1	d0 07		bne $1951ba	                BNE CHECK_PENDING_REG1
.1951b3	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1951b7	20 12 53	jsr $195312	                JSR MOUSE_INTERRUPT
.1951ba					CHECK_PENDING_REG1
.1951ba	e2 20		sep #$20	                SEP #$20        ; set A short
.1951bc	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951c0	c9 00		cmp #$00	                CMP #$00
.1951c2	f0 5d		beq $195221	                BEQ EXIT_IRQ_HANDLE
.1951c4					SERVICE_NEXT_IRQ8
.1951c4	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951c8	29 01		and #$01	                AND #FNX1_INT00_KBD
.1951ca	c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.1951cc	d0 09		bne $1951d7	                BNE SERVICE_NEXT_IRQ11
.1951ce	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1951d2	20 24 52	jsr $195224	                JSR KEYBOARD_INTERRUPT
.1951d5	e2 20		sep #$20	                SEP #$20        ; set A short
.1951d7					SERVICE_NEXT_IRQ11
.1951d7	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951db	29 08		and #$08	                AND #FNX1_INT03_COM2
.1951dd	c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.1951df	d0 09		bne $1951ea	                BNE SERVICE_NEXT_IRQ12
.1951e1	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1951e5	20 5e 53	jsr $19535e	                JSR COM2_INTERRUPT
.1951e8	e2 20		sep #$20	                SEP #$20        ; set A short
.1951ea					SERVICE_NEXT_IRQ12
.1951ea	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.1951ee	29 10		and #$10	                AND #FNX1_INT04_COM1
.1951f0	c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.1951f2	d0 09		bne $1951fd	                BNE SERVICE_NEXT_IRQ13
.1951f4	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.1951f8	20 69 53	jsr $195369	                JSR COM1_INTERRUPT
.1951fb	e2 20		sep #$20	                SEP #$20        ; set A short
.1951fd					SERVICE_NEXT_IRQ13
.1951fd	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195201	29 20		and #$20	                AND #FNX1_INT05_MPU401
.195203	c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.195205	d0 09		bne $195210	                BNE SERVICE_NEXT_IRQ14
.195207	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19520b	20 74 53	jsr $195374	                JSR MPU401_INTERRUPT
.19520e	e2 20		sep #$20	                SEP #$20        ; set A short
.195210					SERVICE_NEXT_IRQ14
.195210	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195214	29 40		and #$40	                AND #FNX1_INT06_LPT
.195216	c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.195218	d0 07		bne $195221	                BNE EXIT_IRQ_HANDLE
.19521a	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19521e	20 7f 53	jsr $19537f	                JSR LPT1_INTERRUPT
.195221					EXIT_IRQ_HANDLE
.195221	c2 30		rep #$30	                REP #$30        ; set A&X long
.195223	6b		rtl		                RTL
.195224					KEYBOARD_INTERRUPT
.195224	a2 00 00	ldx #$0000	                ldx #$0000
.195227	e2 10		sep #$10	                SEP #$10        ; set X short
.195229	e2 20		sep #$20	                SEP #$20        ; set A short
.19522b	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.19522f	29 01		and #$01	                AND #FNX1_INT00_KBD
.195231	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195235					IRQ_HANDLER_FETCH
.195235	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; Get Scan Code from KeyBoard
.195239	8d 88 0f	sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.19523c	c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.19523e	d0 03		bne $195243	                BNE NOT_KB_SET_SHIFT
.195240	82 75 00	brl $1952b8	                BRL KB_SET_SHIFT
.195243					NOT_KB_SET_SHIFT
.195243	c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.195245	d0 03		bne $19524a	                BNE NOT_KB_CLR_SHIFT
.195247	82 79 00	brl $1952c3	                BRL KB_CLR_SHIFT
.19524a					NOT_KB_CLR_SHIFT
.19524a	c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.19524c	d0 03		bne $195251	                BNE NOT_KB_SET_CTRL
.19524e	82 7d 00	brl $1952ce	                BRL KB_SET_CTRL
.195251					NOT_KB_SET_CTRL
.195251	c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.195253	d0 03		bne $195258	                BNE NOT_KB_CLR_CTRL
.195255	82 81 00	brl $1952d9	                BRL KB_CLR_CTRL
.195258					NOT_KB_CLR_CTRL
.195258	c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.19525a	d0 03		bne $19525f	                BNE NOT_KB_SET_ALT
.19525c	82 85 00	brl $1952e4	                BRL KB_SET_ALT
.19525f					NOT_KB_SET_ALT
.19525f	c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.195261	d0 03		bne $195266	                BNE KB_UNPRESSED
.195263	82 89 00	brl $1952ef	                BRL KB_CLR_ALT
.195266	29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.195268	c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.19526a	d0 03		bne $19526f	                BNE KB_NORM_SC
.19526c	82 88 00	brl $1952f7	                BRL KB_CHECK_B_DONE
.19526f	ad 88 0f	lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.195272	aa		tax		                TAX
.195273	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.195276	29 10		and #$10	                AND #$10
.195278	c9 10		cmp #$10	                CMP #$10
.19527a	f0 19		beq $195295	                BEQ SHIFT_KEY_ON
.19527c	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.19527f	29 20		and #$20	                AND #$20
.195281	c9 20		cmp #$20	                CMP #$20
.195283	f0 17		beq $19529c	                BEQ CTRL_KEY_ON
.195285	ad 87 0f	lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.195288	29 40		and #$40	                AND #$40
.19528a	c9 40		cmp #$40	                CMP #$40
.19528c	f0 15		beq $1952a3	                BEQ ALT_KEY_ON
.19528e	bf 00 16 19	lda $191600,x	                LDA @lScanCode_Press_Set1, x
.195292	82 12 00	brl $1952a7	                BRL KB_WR_2_SCREEN
.195295	bf 80 16 19	lda $191680,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.195299	82 0b 00	brl $1952a7	                BRL KB_WR_2_SCREEN
.19529c	bf 00 17 19	lda $191700,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.1952a0	82 04 00	brl $1952a7	                BRL KB_WR_2_SCREEN
.1952a3	bf 80 17 19	lda $191780,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.1952a7					KB_WR_2_SCREEN
.1952a7	48		pha		                PHA
.1952a8	c2 10		rep #$10	                REP #$10        ; set X long
.1952aa	22 00 30 19	jsl $193000	                JSL SAVECHAR2CMDLINE
.1952ae	e2 20		sep #$20	                SEP #$20        ; set A short
.1952b0	68		pla		                PLA
.1952b1	22 18 00 19	jsl $190018	                JSL PUTC
.1952b5	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952b8	ad 87 0f	lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.1952bb	09 10		ora #$10	                ORA #$10
.1952bd	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952c0	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952c3	ad 87 0f	lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.1952c6	29 ef		and #$ef	                AND #$EF
.1952c8	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952cb	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952ce	ad 87 0f	lda $0f87	KB_SET_CTRL    LDA KEYBOARD_SC_FLG
.1952d1	09 20		ora #$20	                ORA #$20
.1952d3	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952d6	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952d9	ad 87 0f	lda $0f87	KB_CLR_CTRL    LDA KEYBOARD_SC_FLG
.1952dc	29 df		and #$df	                AND #$DF
.1952de	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952e1	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952e4	ad 87 0f	lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.1952e7	09 40		ora #$40	                ORA #$40
.1952e9	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952ec	4c f7 52	jmp $1952f7	                JMP KB_CHECK_B_DONE
.1952ef	ad 87 0f	lda $0f87	KB_CLR_ALT     LDA KEYBOARD_SC_FLG
.1952f2	29 bf		and #$bf	                AND #$BF
.1952f4	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG
.1952f7					KB_CHECK_B_DONE
.1952f7	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.1952fb	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.1952fd	c9 01		cmp #$01	                CMP #OUT_BUF_FULL ; if Still Byte in the Buffer, fetch it out
.1952ff	d0 03		bne $195304	                BNE KB_DONE
.195301	4c 35 52	jmp $195235	                JMP IRQ_HANDLER_FETCH
.195304					KB_DONE
.195304	c2 30		rep #$30	                REP #$30        ; set A&X long
.195306	60		rts		                RTS
.195307					SOF_INTERRUPT
.195307	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.19530b	29 01		and #$01	                AND #FNX0_INT00_SOF
.19530d	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.195311	60		rts		                RTS
.195312					MOUSE_INTERRUPT
.195312	e2 20		sep #$20	                SEP #$20        ; set A short
.195314	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.195318	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.19531a	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.19531e	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.195322	a2 00 00	ldx #$0000	                LDX #$0000
.195325	e2 10		sep #$10	                SEP #$10        ; set X short
.195327	a6 e0		ldx $e0		                LDX MOUSE_PTR
.195329	9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.19532d	e8		inx		                INX
.19532e	e0 03		cpx #$03	                CPX #$03
.195330	d0 1c		bne $19534e	                BNE EXIT_FOR_NEXT_VALUE
.195332	af 02 07 af	lda $af0702	                LDA @lMOUSE_PTR_X_POS_L
.195336	85 e1		sta $e1		                STA MOUSE_POS_X_LO
.195338	af 03 07 af	lda $af0703	                LDA @lMOUSE_PTR_X_POS_H
.19533c	85 e2		sta $e2		                STA MOUSE_POS_X_HI
.19533e	af 04 07 af	lda $af0704	                LDA @lMOUSE_PTR_Y_POS_L
.195342	85 e3		sta $e3		                STA MOUSE_POS_Y_LO
.195344	af 05 07 af	lda $af0705	                LDA @lMOUSE_PTR_Y_POS_H
.195348	85 e4		sta $e4		                STA MOUSE_POS_Y_HI
.19534a	e2 20		sep #$20	                SEP #$20        ; set A short
.19534c	a2 00		ldx #$00	                LDX #$00
.19534e					EXIT_FOR_NEXT_VALUE
.19534e	86 e0		stx $e0		                STX MOUSE_PTR
.195350	c2 10		rep #$10	                REP #$10        ; set X long
.195352	60		rts		                RTS
.195353					FDC_INTERRUPT
.195353	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.195357	29 40		and #$40	                AND #FNX0_INT06_FDC
.195359	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.19535d	60		rts		                RTS
.19535e					COM2_INTERRUPT
.19535e	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195362	29 08		and #$08	                AND #FNX1_INT03_COM2
.195364	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195368	60		rts		                RTS
.195369					COM1_INTERRUPT
.195369	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.19536d	29 10		and #$10	                AND #FNX1_INT04_COM1
.19536f	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195373	60		rts		                RTS
.195374					MPU401_INTERRUPT
.195374	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195378	29 20		and #$20	                AND #FNX1_INT05_MPU401
.19537a	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.19537e	60		rts		                RTS
.19537f					LPT1_INTERRUPT
.19537f	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.195383	29 40		and #$40	                AND #FNX1_INT06_LPT
.195385	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.195389	60		rts		                RTS
.19538a					NMI_HANDLER
.19538a	6b		rtl		                RTL

;******  Return to file: kernel.asm


;******  Processing file: SDOS.asm


;******  Processing file: ch376s_inc.asm

=$00					DEF_NULL_CHAR       = $00
=$2a					DEF_WILDCARD_CHAR   = $2A
=$5c					DEF_SEPAR_CHAR1     = $5C
=$2f					DEF_SEPAR_CHAR2     = $2F
=$0a					CH_CMD_RD_VAR8        = $0A     ; Read 8Bit Value
=$0b					CH_CMD_WR_VAR8        = $0B     ; Write 8Bit Value to controller
=$0c					CH_CMD_RD_VAR32       = $0C     ; Read 32Bit Value
=$0d					CH_CMD_WR_VAR32       = $0D
=$15					CH_CMD_SET_MODE       = $15     ; Set the Controller's mode, in our Case in SDCARD
=$22					CH_CMD_GET_STATUS     = $22     ; Get Interrupt Status
=$27					CH_CMD_RD_DATA0       = $27     ;
=$2f					CH_CMD_SET_FILENAME   = $2F     ;SET_FILE_NAME
=$31					CH_CMD_DISK_MOUNT     = $31     ;DISK_MOUNT
=$32					CH_CMD_FILE_OPEN      = $32     ;FILE_OPEN
=$33					CH_CMD_FILE_ENUM_GO   = $33
=$36					CH_CMD_FILE_CLOSE     = $36     ; To be Implemented
=$39					CH_CMD_BYTE_LOCATE    = $39
=$3a					CH_CMD_BYTE_READ      = $3A
=$3b					CH_CMD_BYTE_RD_GO     = $3B
=$3c					CH_CMD_BYTE_WRITE     = $3C
=$3d					CH_CMD_BYTE_WR_GO     = $3D
=$44					CH_VAR_DISK_ROOT		  = $44
=$48					CH_VAR_DSK_TOTAL_CLUS	= $48
=$4c					CH_VAR_DSK_START_LBA	= $4C
=$50					CH_VAR_DSK_DAT_START	= $50
=$54					CH_VAR_LBA_BUFFER		  = $54
=$58					CH_VAR_LBA_CURRENT		= $58
=$5c					CH_VAR_FAT_DIR_LBA		= $5C
=$60					CH_VAR_START_CLUSTER	= $60
=$64					CH_VAR_CURRENT_CLUST	= $64
=$68					CH_VAR_FILE_SIZE		  = $68
=$6c					CH_VAR_CURRENT_OFFSET	= $6C
=$14					CH376S_STAT_SUCCESS  = $14
=$17					CH376S_STAT_BUF_OVF  = $17
=$1d					CH376S_STAT_DSK_RD   = $1D
=$1e					CH376S_STAT_DSK_WR   = $1E
=$41					CH376S_ERR_OPEN_DIR  = $41
=$42					CH376S_ERR_MISS_FIL  = $42
=$43					CH376S_ERR_FND_NAME  = $43
=$82					CH376S_ERR_DISK_DSC  = $82
=$84					CH376S_ERR_LRG_SEC   = $84
=$92					CH376S_ERR_PARTTION  = $92
=$a1					CH376S_ERR_NOT_FORM  = $A1
=$b1					CH376S_ERR_DSK_FULL  = $B1
=$b2					CH376S_FDT_OVER      = $B2
=$b4					CH376S_FILE_CLOSED   = $B4
=$00					SDCARD_PRSNT_NO_CARD = $00
=$01					SDCARD_PRSNT_CD      = $01
=$02					SDCARD_PRSNT_WP      = $02
=$04					SDCARD_PRSNT_MNTED   = $04  ; Card is present and Mounted1

;******  Return to file: SDOS.asm

.192000	5c d2 21 19	jmp $1921d2	SDOS_CHECK_CD JML ISDOS_CHK_CD ; Check if Card is Present
.192004	5c e1 21 19	jmp $1921e1	SDOS_CHECK_WP JML ISDOS_CHK_WP ; Check if Card is Write Protected
.192008	5c 20 20 19	jmp $192020	SDOS_INIT     JML ISDOS_INIT
.19200c	5c 6d 20 19	jmp $19206d	SDOS_DIR      JML ISDOS_DIR
.192010	5c 27 21 19	jmp $192127	SDOS_CHDIR    JML ISDOS_CHDIR
.192014	5c 28 21 19	jmp $192128	SDOS_LOAD     JML ISDOS_LOAD
.192018	5c 2c 21 19	jmp $19212c	SDOS_SAVE     JML ISDOS_SAVE
.19201c	5c 2d 21 19	jmp $19212d	SDOS_EXEC     JML ISDOS_EXEC
.192020					ISDOS_INIT
.192020	e2 20		sep #$20	                SEP #$20        ; set A short
.192022	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.192026	29 7f		and #$7f	              AND #~FNX1_INT07_SDCARD   ; Enable
.192028	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1
.19202c	a9 06		lda #$06	              LDA #$06
.19202e	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192032	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192035	a9 a8		lda #$a8	              LDA #$A8
.192037	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19203b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19203e	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192041	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192044	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192048	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19204b	a9 15		lda #$15	              LDA #CH_CMD_SET_MODE
.19204d	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192051	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192054	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192057	a9 03		lda #$03	              LDA #$03            ; Mode 3 - SDCARD
.192059	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA     ; Write the MODE and Wait for around ~10us
.19205d					ISDOS_WAIT_FOR_MODE_SW
.19205d	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.192060	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192064	c9 51		cmp #$51	              CMP #$51   ; CMD_RET_SUCCESS		EQU		051H, CMD_RET_ABORT		EQU		05FH
.192066	d0 f5		bne $19205d	              BNE ISDOS_WAIT_FOR_MODE_SW
.192068	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; See the Status Output
.19206c	6b		rtl		              RTL
.19206d					ISDOS_DIR
.19206d	e2 20		sep #$20	                SEP #$20        ; set A short
.19206f	c2 10		rep #$10	                REP #$10        ; set X long
.192071	20 2e 21	jsr $19212e	              JSR ISDOS_MOUNT_CARD;     First to See if the Card is Present
.192074	a2 00 00	ldx #$0000	              LDX #$0000
.192077					ISDOS_DIR_TRF
.192077	bf c4 23 19	lda $1923c4,x	              LDA sd_card_dir_string,X    ; /
.19207b	9f 80 03 00	sta $000380,x	              STA @lSDOS_FILE_NAME,X
.19207f	e8		inx		              INX
.192080	e0 03 00	cpx #$0003	              CPX #$0003
.192083	d0 f2		bne $192077	              BNE ISDOS_DIR_TRF
.192085	20 63 21	jsr $192163	              JSR SDOS_FILE_OPEN         ; Now that the file name is set, go open File
.192088	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.19208a	f0 03		beq $19208f	              BEQ ISDOS_DIR_CONT0
.19208c	82 80 00	brl $19210f	              BRL ISDOS_MISS_FILE
.19208f					ISDOS_DIR_CONT0
.19208f					ISDOS_NEXT_ENTRY
.19208f	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.192091	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192095	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;
.192098	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;  Load First Data
.19209c	a0 00 00	ldy #$0000	              LDY #$0000
.19209f	a2 00 00	ldx #$0000	              LDX #$0000
.1920a2	a8		tay		              TAY              ; GET Size (Save in Case we need it)
.1920a3					ISDOS_DIR_GET_CHAR
.1920a3	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920a6	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920aa	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920ae	e8		inx		              INX
.1920af	e0 08 00	cpx #$0008	              CPX #$0008
.1920b2	d0 03		bne $1920b7	              BNE ISDOS_DIR_CONT1
.1920b4	20 20 21	jsr $192120	              JSR ISDOS_DISPLAY_DOT
.1920b7					ISDOS_DIR_CONT1
.1920b7	e0 0b 00	cpx #$000b	              CPX #$000B          ; the First 11th Character is the file name
.1920ba	d0 e7		bne $1920a3	              BNE ISDOS_DIR_GET_CHAR
.1920bc	a9 20		lda #$20	              LDA #$20
.1920be	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920c2	a9 28		lda #$28	              LDA #'('
.1920c4	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920c8	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ;
.1920cc	29 10		and #$10	              AND #$10
.1920ce	c9 10		cmp #$10	              CMP #$10
.1920d0	f0 04		beq $1920d6	              BEQ ISDOS_DIR_ATTR0
.1920d2	a9 46		lda #$46	              LDA #'F'
.1920d4	80 02		bra $1920d8	              BRA ISDOS_DIR_ATTR1
.1920d6					ISDOS_DIR_ATTR0
.1920d6	a9 44		lda #$44	              LDA #'D'
.1920d8					ISDOS_DIR_ATTR1
.1920d8	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920dc	a9 29		lda #$29	              LDA #')'
.1920de	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920e2	a9 0d		lda #$0d	              LDA #$0D         ; Carriage Return
.1920e4	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.1920e8					ISDOS_DIR_GET_CHAR_FINISH
.1920e8	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA ; Wait 0.6us
.1920eb	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA  ; After the name Just empty the buffer
.1920ef	e8		inx		              INX
.1920f0	e0 20 00	cpx #$0020	              CPX #$0020
.1920f3	d0 f3		bne $1920e8	              BNE ISDOS_DIR_GET_CHAR_FINISH
.1920f5	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.1920f8	a9 33		lda #$33	              LDA #CH_CMD_FILE_ENUM_GO
.1920fa	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1920fe	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT       ; Go Wait for Interrupt
.192101	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD
.192103	f0 8a		beq $19208f	              BEQ ISDOS_NEXT_ENTRY
.192105	c9 42		cmp #$42	              CMP #CH376S_ERR_MISS_FIL
.192107	d0 06		bne $19210f	              BNE  ISDOS_MISS_FILE
.192109	a2 4f 24	ldx #$244f	              LDX #<>sd_card_msg5   ; End of File
.19210c	82 09 00	brl $192118	              BRL ISDOS_DIR_DONE
.19210f					ISDOS_MISS_FILE
.19210f	a2 da 23	ldx #$23da	              LDX #<>sd_card_err0
.192112	82 03 00	brl $192118	              BRL ISDOS_DIR_DONE
.192115					NO_SDCARD_PRESENT
.192115	a2 c7 23	ldx #$23c7	              LDX #<>sd_no_card_msg
.192118					ISDOS_DIR_DONE
.192118	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.19211c	20 73 21	jsr $192173	              JSR SDOS_FILE_CLOSE
.19211f	6b		rtl		              RTL;
.192120					ISDOS_DISPLAY_DOT
.192120	a9 2e		lda #$2e	              LDA #'.'
.192122	22 96 05 19	jsl $190596	              JSL IPUTC        ; Print the character
.192126	60		rts		              RTS;
.192127	00		brk #		ISDOS_CHDIR   BRK;
.192128					ISDOS_LOAD
.192128	20 4f 22	jsr $19224f	              JSR SDOS_READ_FILE;
.19212b	6b		rtl		              RTL;
.19212c	00		brk #		ISDOS_SAVE    BRK;
.19212d	00		brk #		ISDOS_EXEC    BRK;
.19212e					ISDOS_MOUNT_CARD
.19212e	e2 20		sep #$20	                SEP #$20        ; set A short
.192130	c2 10		rep #$10	                REP #$10        ; set X long
.192132	a0 00 00	ldy #$0000	              LDY #$0000
.192135	a9 01		lda #$01	              LDA #$01
.192137	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT        ; Bit[0] = Card Present
.192139					TRY_MOUNT_AGAIN
.192139	a9 31		lda #$31	              LDA #CH_CMD_DISK_MOUNT      ; If Present, go Mount it.
.19213b	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD              ;
.19213f	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT       ;
.192142	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS    ;
.192144	f0 09		beq $19214f	              BEQ ISDOS_MOUNTED
.192146	c8		iny		              INY
.192147	c0 05 00	cpy #$0005	              CPY #$0005
.19214a	d0 ed		bne $192139	              BNE TRY_MOUNT_AGAIN
.19214c	4c 56 21	jmp $192156	              JMP SDCARD_ERROR_MOUNT
.19214f					ISDOS_MOUNTED
.19214f	a5 3f		lda $3f		              LDA SDCARD_PRSNT_MNT
.192151	29 fb		and #$fb	              AND #~SDCARD_PRSNT_MNTED
.192153	09 04		ora #$04	              ORA #SDCARD_PRSNT_MNTED     ; Set Bit to Indicate that is mounted
.192155	60		rts		              RTS
.192156					SDCARD_ERROR_MOUNT
.192156	a2 2a 24	ldx #$242a	              LDX #<>sd_card_msg3         ; Print Screen the Message "Card Detected"
.192159	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.19215d	60		rts		              RTS
.19215e	a9 00		lda #$00	ISDOS_NO_CARD LDA #SDCARD_PRSNT_NO_CARD
.192160	85 3f		sta $3f		              STA SDCARD_PRSNT_MNT
.192162	60		rts		              RTS
.192163					SDOS_FILE_OPEN
.192163	20 86 21	jsr $192186	              JSR SDOS_SET_FILE_NAME ; Make Sure the Pointer to the File Name is properly
.192166	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192169	a9 32		lda #$32	              LDA #CH_CMD_FILE_OPEN ;
.19216b	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.19216f	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.192172	60		rts		              RTS
.192173					SDOS_FILE_CLOSE
.192173	a9 36		lda #$36	              LDA #CH_CMD_FILE_CLOSE ;
.192175	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD          ; Go Request to open the File
.192179	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19217c	a9 00		lda #$00	              LDA #$00                ; FALSE
.19217e	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.192182	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT   ; A Interrupt is Generated, so go polling it
.192185	60		rts		              RTS
.192186					SDOS_SET_FILE_NAME
.192186	a9 2f		lda #$2f	              LDA #CH_CMD_SET_FILENAME
.192188	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.19218c	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.19218f	a2 00 00	ldx #$0000	              LDX #$0000
.192192					SDOS_SET_FILE_LOOP
.192192	bf 80 03 00	lda $000380,x	              LDA @lSDOS_FILE_NAME, X   ; This is where the FileName ought to be.
.192196	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA         ; Store into the Data Register of the CH376s
.19219a	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19219d	e8		inx		              INX
.19219e	c9 00		cmp #$00	              CMP #$00              ; Check end of Line
.1921a0	d0 f0		bne $192192	              BNE SDOS_SET_FILE_LOOP
.1921a2	60		rts		              RTS
.1921a3					DLYCMD_2_DTA
.1921a3	ea		nop		              NOP
.1921a4	ea		nop		              NOP
.1921a5	ea		nop		              NOP
.1921a6	ea		nop		              NOP
.1921a7	ea		nop		              NOP
.1921a8					DLYDTA_2_DTA
.1921a8	ea		nop		              NOP
.1921a9	ea		nop		              NOP
.1921aa	ea		nop		              NOP
.1921ab	ea		nop		              NOP
.1921ac	ea		nop		              NOP
.1921ad	60		rts		              RTS;
.1921ae					SDCARD_WAIT_4_INT
.1921ae	e2 20		sep #$20	                SEP #$20        ; set A short
.1921b0					SDCARD_BUSY_INT
.1921b0	af 41 01 00	lda $000141	              LDA @lINT_PENDING_REG1  ; Check to See if the Pending Register for the SD_INT is Set
.1921b4	29 80		and #$80	              AND #FNX1_INT07_SDCARD  ;
.1921b6	c9 80		cmp #$80	              CMP #FNX1_INT07_SDCARD
.1921b8	d0 f6		bne $1921b0	              BNE SDCARD_BUSY_INT   ; Go Check again to see if it is checked
.1921ba	8f 41 01 00	sta $000141	              STA @lINT_PENDING_REG1    ;Interrupt as occured, clear the Pending Register for next time.
.1921be	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA ;
.1921c1	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA ;
.1921c4	a9 22		lda #$22	              LDA #CH_CMD_GET_STATUS
.1921c6	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921ca	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 1.5us Delay to get the Value Return
.1921cd	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA;
.1921d1	60		rts		              RTS           ;
.1921d2					ISDOS_CHK_CD
.1921d2	e2 20		sep #$20	                SEP #$20        ; set A short
.1921d4	18		clc		              CLC
.1921d5	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921d9	29 01		and #$01	              AND #$01
.1921db	c9 01		cmp #$01	              CMP #$01
.1921dd	f0 01		beq $1921e0	              BEQ SDCD_NOT_PRST;
.1921df	38		sec		              SEC
.1921e0	60		rts		SDCD_NOT_PRST RTS
.1921e1					ISDOS_CHK_WP
.1921e1	e2 20		sep #$20	                SEP #$20        ; set A short
.1921e3	18		clc		              CLC
.1921e4	af 10 e8 af	lda $afe810	              LDA SDCARD_STAT;  BIT[0] = Cd, BIT[1] = WP
.1921e8	29 02		and #$02	              AND #$02
.1921ea	d0 01		bne $1921ed	              BNE SDCD_NOT_WP;
.1921ec	38		sec		              SEC
.1921ed	60		rts		SDCD_NOT_WP   RTS
.1921ee					ISDOS_GET_FILE_SIZE
.1921ee	e2 20		sep #$20	                SEP #$20        ; set A short
.1921f0	a9 0c		lda #$0c	              LDA #CH_CMD_RD_VAR32
.1921f2	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1921f6	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1921f9	a9 68		lda #$68	              LDA #CH_VAR_FILE_SIZE
.1921fb	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA;
.1921ff	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192202	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA         ;LSB First
.192206	8f 28 03 00	sta $000328	              STA @lSDOS_FILE_SIZE+0
.19220a	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;     ; Store in ADDER32 REgister A
.19220e	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192211	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192215	8f 29 03 00	sta $000329	              STA @lSDOS_FILE_SIZE+1
.192219	8f 21 01 00	sta $000121	              STA @lADDER32_A_LH;     ; Store in ADDER32 REgister A
.19221d	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192220	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192224	8f 2a 03 00	sta $00032a	              STA @lSDOS_FILE_SIZE+2
.192228	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;     ; Store in ADDER32 REgister A
.19222c	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19222f	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.192233	8f 2b 03 00	sta $00032b	              STA @lSDOS_FILE_SIZE+3   ;MSB Last
.192237	8f 23 01 00	sta $000123	              STA @lADDER32_A_HH;     ; Store in ADDER32 REgister A
.19223b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19223e	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL;
.192242	af 29 01 00	lda $000129	              LDA @lADDER32_R_LH;
.192246	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL;
.19224a	af 2b 01 00	lda $00012b	              LDA @lADDER32_R_HH;
.19224e	60		rts		              RTS
.19224f					SDOS_READ_FILE
.19224f	c2 30		rep #$30	                REP #$30        ; set A&X long
.192251	20 5c 23	jsr $19235c	              JSR SDOS_SETUP_ADDER_B;
.192254	e2 20		sep #$20	                SEP #$20        ; set A short
.192256	20 63 21	jsr $192163	              JSR SDOS_FILE_OPEN
.192259	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ; if the file open successfully, let's go on.
.19225b	f0 03		beq $192260	              BEQ SDOS_READ_FILE_KEEP_GOING
.19225d	82 91 00	brl $1922f1	              BRL SDOS_READ_END
.192260					SDOS_READ_FILE_KEEP_GOING
.192260	a2 5e 24	ldx #$245e	              LDX #<>sd_card_msg6         ; Print Screen the Message "FILE FOUND, LOADING..."
.192263	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.192267	20 ee 21	jsr $1921ee	              JSR ISDOS_GET_FILE_SIZE   ; Get the File Size in 32Bits
.19226a	c2 20		rep #$20	                REP #$20        ; set A long
.19226c	20 80 23	jsr $192380	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE;
.19226f	a9 00 00	lda #$0000	              LDA #$0000
.192272	8f 3c 00 00	sta $00003c	              STA @lSDCARD_BYTE_NUM; Just make sure the High Part of the Size is Zero
.192276	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR   ; Clear the Byte Pointer 32 Bytes Register
.19227a	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2 ; This is to Relocated the Pointer after you passed the 64K Boundary
.19227e	e2 20		sep #$20	                SEP #$20        ; set A short
.192280					SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock
.192280	a9 3a		lda #$3a	              LDA #CH_CMD_BYTE_READ
.192282	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.192286	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.192289	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER
.19228d	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192291	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA;   ; 1.5us Delay to get the Value Return
.192294	af 2d 03 00	lda $00032d	              LDA @lSDOS_BYTE_NUMBER+1
.192298	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19229c	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.19229f	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922a1	f0 03		beq $1922a6	              BEQ SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922a3	82 4b 00	brl $1922f1	              BRL SDOS_READ_END
.1922a6					SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922a6	20 9f 23	jsr $19239f	              JSR SDOS_READ_BLOCK
.1922a9	a9 3b		lda #$3b	              LDA #CH_CMD_BYTE_RD_GO
.1922ab	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.1922af	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.1922b2	c9 1d		cmp #$1d	              CMP #CH376S_STAT_DSK_RD ;
.1922b4	d0 05		bne $1922bb	              BNE SDOS_READ_PROC_DONE
.1922b6	20 fb 22	jsr $1922fb	              JSR SDOS_ADJUST_POINTER  ; Go Adjust the Address
.1922b9	80 eb		bra $1922a6	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_BLOCK
.1922bb					SDOS_READ_PROC_DONE
.1922bb	c2 20		rep #$20	                REP #$20        ; set A long
.1922bd	af 2c 03 00	lda $00032c	              LDA @lSDOS_BYTE_NUMBER  ; Load the Previously number of Byte
.1922c1	c9 ff ff	cmp #$ffff	              CMP #$FFFF
.1922c4	d0 24		bne $1922ea	              BNE SDOS_READ_DONE1                  ; if it equal 64K, then the file is bugger than 64K
.1922c6	af 28 01 00	lda $000128	              LDA @lADDER32_R_LL
.1922ca	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL
.1922ce	af 2a 01 00	lda $00012a	              LDA @lADDER32_R_HL
.1922d2	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL
.1922d6	20 80 23	jsr $192380	              JSR SDOS_SETUP_CH376S_BUFFER_SIZE ;
.1922d9	20 42 23	jsr $192342	              JSR SDOS_COMPUTE_LOCATE_POINTER
.1922dc	e2 20		sep #$20	                SEP #$20        ; set A short
.1922de	20 0d 23	jsr $19230d	              JSR SDOS_BYTE_LOCATE    ; Apply the new location for the CH376S
.1922e1	20 ae 21	jsr $1921ae	              JSR SDCARD_WAIT_4_INT
.1922e4	c9 14		cmp #$14	              CMP #CH376S_STAT_SUCCESS ;
.1922e6	d0 09		bne $1922f1	              BNE SDOS_READ_END
.1922e8	80 96		bra $192280	              BRA SDOS_READ_FILE_GO_FETCH_A_NEW_64KBlock ; Let's go fetch a new block of 64K or less
.1922ea					SDOS_READ_DONE1
.1922ea	a9 00		lda #$00	              LDA #$00
.1922ec	a2 75 24	ldx #$2475	              LDX #<>sd_card_msg7         ; Print Screen the Message "FILE LOADED"
.1922ef	80 05		bra $1922f6	              BRA SDOS_READ_PROC_DONE1
.1922f1					SDOS_READ_END
.1922f1	a9 ff		lda #$ff	              LDA #$FF
.1922f3	a2 f0 23	ldx #$23f0	              LDX #<>sd_card_err1         ;"ERROR LOADING FILE"
.1922f6					SDOS_READ_PROC_DONE1
.1922f6	22 76 05 19	jsl $190576	              JSL IPRINT       ; print the first line
.1922fa	60		rts		              RTS;
.1922fb					SDOS_ADJUST_POINTER
.1922fb	c2 20		rep #$20	                REP #$20        ; set A long
.1922fd	18		clc		              CLC
.1922fe	a5 38		lda $38		              LDA SDCARD_FILE_PTR ;Load the Pointer
.192300	65 3c		adc $3c		              ADC SDCARD_BYTE_NUM
.192302	85 38		sta $38		              STA SDCARD_FILE_PTR;
.192304	e2 20		sep #$20	                SEP #$20        ; set A short
.192306	a5 3a		lda $3a		              LDA SDCARD_FILE_PTR+2;
.192308	69 00		adc #$00	              ADC #$00          ; This is just add up the Carry
.19230a	85 3a		sta $3a		              STA SDCARD_FILE_PTR+2;
.19230c					SDOS_ADJ_DONE
.19230c	60		rts		              RTS
.19230d					SDOS_BYTE_LOCATE
.19230d	e2 20		sep #$20	                SEP #$20        ; set A short
.19230f	a9 39		lda #$39	              LDA #CH_CMD_BYTE_LOCATE
.192311	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD
.192315	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA
.192318	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR
.19231c	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192320	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192323	af 35 03 00	lda $000335	              LDA @lSDOS_BYTE_PTR+1
.192327	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.19232b	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.19232e	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192332	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192336	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA
.192339	af 37 03 00	lda $000337	              LDA @lSDOS_BYTE_PTR+3
.19233d	8f 08 e8 af	sta $afe808	              STA SDCARD_DATA
.192341	60		rts		              RTS
.192342					SDOS_COMPUTE_LOCATE_POINTER
.192342	c2 20		rep #$20	                REP #$20        ; set A long
.192344	18		clc		              CLC
.192345	af 34 03 00	lda $000334	              LDA @lSDOS_BYTE_PTR ; $00330
.192349	69 ff ff	adc #$ffff	              ADC #$FFFF
.19234c	8f 34 03 00	sta $000334	              STA @lSDOS_BYTE_PTR
.192350	af 36 03 00	lda $000336	              LDA @lSDOS_BYTE_PTR+2
.192354	69 00 00	adc #$0000	              ADC #$0000          ; this is to Add the Carry
.192357	8f 36 03 00	sta $000336	              STA @lSDOS_BYTE_PTR+2
.19235b	60		rts		              RTS
.19235c					SDOS_SETUP_ADDER_B
.19235c	c2 20		rep #$20	                REP #$20        ; set A long
.19235e	a9 01 00	lda #$0001	              LDA #$0001
.192361	8f 24 01 00	sta $000124	              STA @lADDER32_B_LL
.192365	a9 ff ff	lda #$ffff	              LDA #$FFFF
.192368	8f 26 01 00	sta $000126	              STA @lADDER32_B_HL
.19236c	60		rts		              RTS
.19236d					SDOS_LOAD_ADDER_A_WITH_SIZE
.19236d	c2 20		rep #$20	                REP #$20        ; set A long
.19236f	af 28 03 00	lda $000328	              LDA @lSDOS_FILE_SIZE;
.192373	8f 20 01 00	sta $000120	              STA @lADDER32_A_LL;
.192377	af 2a 03 00	lda $00032a	              LDA @lSDOS_FILE_SIZE+2;
.19237b	8f 22 01 00	sta $000122	              STA @lADDER32_A_HL;
.19237f	60		rts		              RTS
.192380					SDOS_SETUP_CH376S_BUFFER_SIZE
.192380	c2 20		rep #$20	                REP #$20        ; set A long
.192382	af 2a 01 00	lda $00012a	              LDA  @lADDER32_R_HL
.192386	29 00 80	and #$8000	              AND #$8000          ; Check if it is negative
.192389	c9 00 80	cmp #$8000	              CMP #$8000          ; if it is then just put the Size of the file in ByteNumber
.19238c	f0 08		beq $192396	              BEQ SDOS_SETUP_SMALLR_THAN64K
.19238e	a9 ff ff	lda #$ffff	              LDA #$FFFF
.192391	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.192395	60		rts		              RTS
.192396					SDOS_SETUP_SMALLR_THAN64K
.192396	af 20 01 00	lda $000120	              LDA @lADDER32_A_LL
.19239a	8f 2c 03 00	sta $00032c	              STA @lSDOS_BYTE_NUMBER
.19239e	60		rts		              RTS
.19239f					SDOS_READ_BLOCK
.19239f	e2 20		sep #$20	                SEP #$20        ; set A short
.1923a1	a9 27		lda #$27	              LDA #CH_CMD_RD_DATA0
.1923a3	8f 09 e8 af	sta $afe809	              STA SDCARD_CMD;
.1923a7	20 a3 21	jsr $1921a3	              JSR DLYCMD_2_DTA;   ; 3us Delay to get the Value Return
.1923aa	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA     ; Read First Byte for Number of Byte to Read
.1923ae	85 3c		sta $3c		              STA SDCARD_BYTE_NUM  ; Store the Number of byte to be read
.1923b0	20 a8 21	jsr $1921a8	              JSR DLYDTA_2_DTA;   ; 3us Delay to get the Value Return
.1923b3	a0 00 00	ldy #$0000	              LDY #$0000
.1923b6					SDOS_READ_MORE
.1923b6	af 08 e8 af	lda $afe808	              LDA SDCARD_DATA
.1923ba	97 38		sta [$38],y	              STA [SDCARD_FILE_PTR], Y        ; Store Block Data Sector Begin
.1923bc	c8		iny		              INY
.1923bd	c4 3c		cpy $3c		              CPY SDCARD_BYTE_NUM
.1923bf	d0 f5		bne $1923b6	              BNE SDOS_READ_MORE
.1923c1	a5 3c		lda $3c		              LDA SDCARD_BYTE_NUM  ; Reload the Number of Byte Read
.1923c3	60		rts		              RTS
>1923c4	2f 2a 00			sd_card_dir_string  .text $2F, $2A ,$00
>1923c7	4e 4f 20 53 44 43 41 52		sd_no_card_msg      .text "NO SDCARD PRESENT", $0D, $00
>1923cf	44 20 50 52 45 53 45 4e 54 0d 00
>1923da	45 52 52 4f 52 20 49 4e		sd_card_err0        .text "ERROR IN READIND CARD", $00
>1923e2	20 52 45 41 44 49 4e 44 20 43 41 52 44 00
>1923f0	45 52 52 4f 52 20 4c 4f		sd_card_err1        .text "ERROR LOADING FILE", $00
>1923f8	41 44 49 4e 47 20 46 49 4c 45 00
>192403	4e 61 6d 65 3a 20 0d 00		sd_card_msg0        .text "Name: ", $0D,$00
>19240b	53 44 43 41 52 44 20 44		sd_card_msg1        .text "SDCARD DETECTED", $00
>192413	45 54 45 43 54 45 44 00
>19241b	53 44 43 41 52 44 20 4d		sd_card_msg2        .text "SDCARD MOUNTED", $00
>192423	4f 55 4e 54 45 44 00
>19242a	46 41 49 4c 45 44 20 54		sd_card_msg3        .text "FAILED TO MOUNT SDCARD", $0D, $00
>192432	4f 20 4d 4f 55 4e 54 20 53 44 43 41 52 44 0d 00
>192442	46 49 4c 45 20 4f 50 45		sd_card_msg4        .text "FILE OPENED", $0D, $00
>19244a	4e 45 44 0d 00
>19244f	45 4e 44 20 4f 46 20 4c		sd_card_msg5        .text "END OF LINE...", $00
>192457	49 4e 45 2e 2e 2e 00
>19245e	46 49 4c 45 20 46 4f 55		sd_card_msg6        .text "FILE FOUND, LOADING...", $00
>192466	4e 44 2c 20 4c 4f 41 44 49 4e 47 2e 2e 2e 00
>192475	46 49 4c 45 20 4c 4f 41		sd_card_msg7        .text "FILE LOADED", $00
>19247d	44 45 44 00

;******  Return to file: kernel.asm


;******  Processing file: OPL2_Library.asm


;******  Processing file: OPL2_def.asm

=$afe500				OPL2_L_BASE               = $AFE500
=$afe501				OPL2_L_TEST               = $AFE501 ; TEST
=$afe502				OPL2_L_TIMER1             = $AFE502 ; TIMER-1
=$afe503				OPL2_L_TIMER2             = $AFE503 ; TIMER-2
=$afe504				OPL2_L_IRQ                = $AFE504 ;
=$afe508				OPL2_L_CSM                = $AFE508 ;
=$afe520				OPL2_L_AM_VID_EG_KSR_MULT = $AFE520 ; $40..$35 (21 Registers)
=$afee40				OPL2_L_KSL_TL             = $AFEE40;  $40..$55 (21 Registers)
=$afe560				OPL2_L_AR_DR              = $AFE560;  $60..$75 (21 Registers)
=$afe580				OPL2_L_SL_RR              = $AFE580;  $80..$95 (21 Registers)
=$afe5a0				OPL2_L_FNumber            = $AFE5A0;  $A0..$A8
=$afe5b0				OPL2_L_KON_BLOCK_FNumber  = $AFE5B0;  $B0..$B9
=$afe5bd				OPL2_L_DPTH_RHYTM         = $AFE5BD;  $BD
=$afe5c0				OPL2_L_FEEDBACK           = $AFE5C0;  $C0..$C9
=$afe5e0				OPL2_L_WAVE_SELECT        = $AFE5E0;  $E0..$F5
=$afe600				OPL2_R_BASE               = $AFE600
=$afe601				OPL2_R_TEST               = $AFE601 ; TEST
=$afe602				OPL2_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603				OPL2_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604				OPL2_R_IRQ                = $AFE604 ;
=$afe608				OPL2_R_CSM                = $AFE608 ;
=$afe620				OPL2_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640				OPL2_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660				OPL2_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680				OPL2_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0				OPL2_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0				OPL2_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd				OPL2_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0				OPL2_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0				OPL2_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$e700					OPL2_S_BASE_LL            = $E700
=$00af					OPL2_S_BASE_HL            = $00AF
=$afe701				OPL2_S_TEST               = $AFE701 ; TEST
=$afe702				OPL2_S_TIMER1             = $AFE702 ; TIMER-1
=$afe703				OPL2_S_TIMER2             = $AFE703 ; TIMER-2
=$afe704				OPL2_S_IRQ                = $AFE704 ;
=$afe708				OPL2_S_CSM                = $AFE708 ;
=$afe720				OPL2_S_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740				OPL2_S_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760				OPL2_S_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780				OPL2_S_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0				OPL2_S_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0				OPL2_S_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd				OPL2_S_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0				OPL2_S_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0				OPL2_S_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=9					OPL2_NUM_CHANNELS = 9
=0					OPERATOR1 = 0
=1					OPERATOR2 = 1
=0					MODULATOR = 0
=1					CARRIER = 1
=0					FREQ_MODULATION = 0
=1					ADDITIVE_SYNTH  = 1
=$10					DRUM_BASS   = $10
=$08					DRUM_SNARE  = $08
=$04					DRUM_TOM    = $04
=$02					DRUM_CYMBAL = $02
=$01					DRUM_HI_HAT = $01
=0					NOTE_C =    0
=1					NOTE_CS =   1
=2					NOTE_D =    2
=3					NOTE_DS =   3
=4					NOTE_E =    4
=5					NOTE_F =    5
=6					NOTE_FS =   6
=7					NOTE_G =    7
=8					NOTE_GS =   8
=9					NOTE_A =    9
=10					NOTE_AS =  10
=11					NOTE_B =   11
>192481	6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>192489	ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>192499	00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1924a1	12
>1924a2	03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1924aa	15
>1924ab	10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1924b1	10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1924b6	20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: OPL2_Library.asm

.1924bc					IOPL2_TONE_TEST
.1924bc	e2 20		sep #$20	                SEP #$20        ; set A short
.1924be	a9 01		lda #$01	              LDA #$01
.1924c0	85 26		sta $26		              STA OPL2_OPERATOR
.1924c2	c2 30		rep #$30	                REP #$30        ; set A&X long
.1924c4	22 3c 25 19	jsl $19253c	              JSL OPL2_INIT
.1924c8	e2 20		sep #$20	                SEP #$20        ; set A short
.1924ca	a9 00		lda #$00	              LDA #$00
.1924cc	85 36		sta $36		              STA OPL2_LOOP
.1924ce					OPL2_TONE_TESTING_L0
.1924ce	e2 20		sep #$20	                SEP #$20        ; set A short
.1924d0	a5 36		lda $36		              LDA OPL2_LOOP
.1924d2	85 27		sta $27		              STA OPL2_CHANNEL
.1924d4	38		sec		              SEC
.1924d5	22 c0 28 19	jsl $1928c0	              JSL OPL2_SET_TREMOLO
.1924d9	38		sec		              SEC
.1924da	22 f1 28 19	jsl $1928f1	              JSL OPL2_SET_VIBRATO
.1924de	a9 04		lda #$04	              LDA #$04
.1924e0	85 32		sta $32		              STA OPL2_PARAMETER0
.1924e2	22 95 29 19	jsl $192995	              JSL OPL2_SET_MULTIPLIER
.1924e6	a9 0a		lda #$0a	              LDA #$0A
.1924e8	85 32		sta $32		              STA OPL2_PARAMETER0
.1924ea	22 fd 29 19	jsl $1929fd	              JSL OPL2_SET_ATTACK
.1924ee	a9 04		lda #$04	              LDA #$04
.1924f0	85 32		sta $32		              STA OPL2_PARAMETER0
.1924f2	22 31 2a 19	jsl $192a31	              JSL OPL2_SET_DECAY
.1924f6	a9 0f		lda #$0f	              LDA #$0F
.1924f8	85 32		sta $32		              STA OPL2_PARAMETER0
.1924fa	22 5d 2a 19	jsl $192a5d	              JSL OPL2_SET_SUSTAIN
.1924fe	a9 0f		lda #$0f	              LDA #$0F
.192500	85 32		sta $32		              STA OPL2_PARAMETER0
.192502	22 91 2a 19	jsl $192a91	              JSL OPL2_SET_RELEASE
.192506	e2 20		sep #$20	                SEP #$20        ; set A short
.192508	e6 36		inc $36		              INC OPL2_LOOP
.19250a	a5 36		lda $36		              LDA OPL2_LOOP
.19250c	c9 03		cmp #$03	              CMP #$03
.19250e	d0 be		bne $1924ce	              BNE OPL2_TONE_TESTING_L0
.192510	a9 00		lda #$00	              LDA #$00
.192512	85 36		sta $36		              STA OPL2_LOOP
.192514					OPL2_TONE_TESTING_L1
.192514	85 30		sta $30		              STA OPL2_NOTE
.192516	29 03		and #$03	              AND #$03        ; replace modulo 3
.192518	85 27		sta $27		              STA OPL2_CHANNEL
.19251a	a9 03		lda #$03	              LDA #$03
.19251c	85 31		sta $31		              STA OPL2_OCTAVE
.19251e	22 7e 26 19	jsl $19267e	              JSL OPL2_PLAYNOTE
.192522	e2 20		sep #$20	                SEP #$20        ; set A short
.192524	c2 10		rep #$10	                REP #$10        ; set X long
.192526	a2 00 00	ldx #$0000	              LDX #$0000
.192529					OPL2_TONE_TESTING_L2
.192529	ea		nop		              NOP
.19252a	ea		nop		              NOP
.19252b	ea		nop		              NOP
.19252c	ea		nop		              NOP
.19252d	e8		inx		              INX
.19252e	e0 ff ff	cpx #$ffff	              CPX #$FFFF
.192531	d0 f6		bne $192529	              BNE OPL2_TONE_TESTING_L2
.192533	e6 36		inc $36		              INC OPL2_LOOP
.192535	a5 36		lda $36		              LDA OPL2_LOOP
.192537	c9 0c		cmp #$0c	              CMP #12
.192539	d0 d9		bne $192514	              BNE OPL2_TONE_TESTING_L1
.19253b	6b		rtl		              RTL
.19253c					OPL2_INIT
.19253c	c2 20		rep #$20	                REP #$20        ; set A long
.19253e	a9 00 00	lda #$0000	              LDA #$0000
.192541	85 28		sta $28		              STA OPL2_REG_REGION
.192543	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192545	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192547	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192549	85 30		sta $30		              STA OPL2_NOTE
.19254b	85 32		sta $32		              STA OPL2_PARAMETER0
.19254d	85 34		sta $34		              STA OPL2_PARAMETER2
.19254f	6b		rtl		              RTL
.192550					OPL2_Reset
.192550	6b		rtl		              RTL
.192551					OPL2_Get_FrequencyBlock
.192551	6b		rtl		              RTL
.192552					OPL2_GET_REGISTER
.192552	c2 20		rep #$20	                REP #$20        ; set A long
.192554	18		clc		              CLC
.192555	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192558	65 32		adc $32		              ADC OPL2_PARAMETER0
.19255a	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19255c	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.19255f	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192561	e2 20		sep #$20	                SEP #$20        ; set A short
.192563	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192565	6b		rtl		              RTL
.192566					OPL2_GET_WAVEFORM_SELECT
.192566	c2 20		rep #$20	                REP #$20        ; set A long
.192568	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.19256b	69 01 00	adc #$0001	              ADC #$0001
.19256e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192570	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192573	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192575	e2 20		sep #$20	                SEP #$20        ; set A short
.192577	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192579	29 20		and #$20	              AND #$20
.19257b	6b		rtl		              RTL
.19257c					OPL2_GET_SCALINGLEVEL
.19257c	c2 20		rep #$20	                REP #$20        ; set A long
.19257e	a9 40 00	lda #$0040	              LDA #$0040  ;
.192581	85 28		sta $28		              STA OPL2_REG_REGION
.192583	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192586	e2 20		sep #$20	                SEP #$20        ; set A short
.192588	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19258a	29 c0		and #$c0	              AND #$C0
.19258c	4a		lsr a		              LSR A
.19258d	4a		lsr a		              LSR A
.19258e	4a		lsr a		              LSR A
.19258f	4a		lsr a		              LSR A
.192590	4a		lsr a		              LSR A
.192591	4a		lsr a		              LSR A
.192592	6b		rtl		              RTL
.192593					OPL2_GET_BLOCK
.192593	e2 20		sep #$20	                SEP #$20        ; set A short
.192595	18		clc		              CLC
.192596	a5 27		lda $27		              LDA OPL2_CHANNEL
.192598	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19259a	69 b0		adc #$b0	              ADC #$B0
.19259c	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19259e	a9 00		lda #$00	              LDA #$00
.1925a0	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1925a2	c2 30		rep #$30	                REP #$30        ; set A&X long
.1925a4	18		clc		              CLC
.1925a5	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.1925a8	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1925aa	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1925ac	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.1925af	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1925b1	e2 20		sep #$20	                SEP #$20        ; set A short
.1925b3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1925b5	29 1c		and #$1c	              AND #$1C
.1925b7	4a		lsr a		              LSR A
.1925b8	4a		lsr a		              LSR A
.1925b9	6b		rtl		              RTL
.1925ba					OPL2_GET_KEYON
.1925ba	e2 20		sep #$20	                SEP #$20        ; set A short
.1925bc	18		clc		              CLC
.1925bd	a5 27		lda $27		              LDA OPL2_CHANNEL
.1925bf	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1925c1	69 b0		adc #$b0	              ADC #$B0
.1925c3	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1925c5	a9 00		lda #$00	              LDA #$00
.1925c7	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1925c9	c2 30		rep #$30	                REP #$30        ; set A&X long
.1925cb	18		clc		              CLC
.1925cc	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.1925cf	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1925d1	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1925d3	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.1925d6	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1925d8	e2 20		sep #$20	                SEP #$20        ; set A short
.1925da	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1925dc	29 20		and #$20	              AND #$20
.1925de	6b		rtl		              RTL
.1925df					OPL2_GET_FEEDBACK
.1925df	e2 20		sep #$20	                SEP #$20        ; set A short
.1925e1	18		clc		              CLC
.1925e2	a5 27		lda $27		              LDA OPL2_CHANNEL
.1925e4	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1925e6	69 c0		adc #$c0	              ADC #$C0
.1925e8	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1925ea	a9 00		lda #$00	              LDA #$00
.1925ec	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1925ee	c2 30		rep #$30	                REP #$30        ; set A&X long
.1925f0	18		clc		              CLC
.1925f1	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.1925f4	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1925f6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1925f8	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.1925fb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1925fd	e2 20		sep #$20	                SEP #$20        ; set A short
.1925ff	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192601	29 e0		and #$e0	              AND #$E0
.192603	4a		lsr a		              LSR
.192604	6b		rtl		              RTL
.192605					OPL2_GET_SYNTHMODE
.192605	e2 20		sep #$20	                SEP #$20        ; set A short
.192607	18		clc		              CLC
.192608	a5 27		lda $27		              LDA OPL2_CHANNEL
.19260a	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19260c	69 c0		adc #$c0	              ADC #$C0
.19260e	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192610	a9 00		lda #$00	              LDA #$00
.192612	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192614	c2 30		rep #$30	                REP #$30        ; set A&X long
.192616	18		clc		              CLC
.192617	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.19261a	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19261c	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19261e	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192621	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192623	e2 20		sep #$20	                SEP #$20        ; set A short
.192625	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192627	29 01		and #$01	              AND #$01
.192629	6b		rtl		              RTL
.19262a					OPL2_GET_DEEPTREMOLO
.19262a	c2 20		rep #$20	                REP #$20        ; set A long
.19262c	a9 bd 00	lda #$00bd	              LDA #$00BD;
.19262f	85 28		sta $28		              STA OPL2_REG_REGION
.192631	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192634	e2 20		sep #$20	                SEP #$20        ; set A short
.192636	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192638	29 80		and #$80	              AND #$80
.19263a	6b		rtl		              RTL
.19263b					OPL2_GET_DEEPVIBRATO
.19263b	c2 20		rep #$20	                REP #$20        ; set A long
.19263d	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192640	69 bd 00	adc #$00bd	              ADC #$00BD
.192643	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192645	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192648	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19264a	e2 20		sep #$20	                SEP #$20        ; set A short
.19264c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19264e	29 40		and #$40	              AND #$40
.192650	6b		rtl		              RTL
.192651					OPL2_GET_PERCUSSION
.192651	c2 20		rep #$20	                REP #$20        ; set A long
.192653	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192656	69 bd 00	adc #$00bd	              ADC #$00BD
.192659	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19265b	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.19265e	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192660	e2 20		sep #$20	                SEP #$20        ; set A short
.192662	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192664	29 20		and #$20	              AND #$20
.192666	6b		rtl		              RTL
.192667					OPL2_GET_DRUMS
.192667	c2 20		rep #$20	                REP #$20        ; set A long
.192669	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.19266c	69 bd 00	adc #$00bd	              ADC #$00BD
.19266f	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192671	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192674	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192676	e2 20		sep #$20	                SEP #$20        ; set A short
.192678	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19267a	29 1f		and #$1f	              AND #$1F
.19267c	6b		rtl		              RTL
.19267d					OPL2_Get_WaveForm
.19267d	6b		rtl		              RTL
.19267e					OPL2_PLAYNOTE
.19267e	e2 20		sep #$20	                SEP #$20        ; set A short
.192680	a9 00		lda #$00	              LDA #$00
.192682	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.192684	20 5a 2b	jsr $192b5a	              JSR OPL2_SET_KEYON
.192687	a5 30		lda $30		              LDA OPL2_NOTE    ;Divide Note/12
.192689	8d 08 01	sta $0108	              STA D0_OPERAND_A
.19268c	a9 00		lda #$00	              LDA #$00
.19268e	8d 09 01	sta $0109	              STA D0_OPERAND_A+1
.192691	8d 0b 01	sta $010b	              STA D0_OPERAND_B+1
.192694	a9 0c		lda #$0c	              LDA #$0C
.192696	8d 0a 01	sta $010a	              STA D0_OPERAND_B
.192699	18		clc		              CLC
.19269a	a5 31		lda $31		              LDA OPL2_OCTAVE
.19269c	6d 0c 01	adc $010c	              ADC D0_RESULT
.19269f	85 31		sta $31		              STA OPL2_OCTAVE
.1926a1	20 29 2b	jsr $192b29	              JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.1926a4	c2 20		rep #$20	                REP #$20        ; set A long
.1926a6	18		clc		              CLC
.1926a7	a5 30		lda $30		              LDA OPL2_NOTE
.1926a9	29 ff 00	and #$00ff	              AND #$00FF
.1926ac	6d 0e 01	adc $010e	              ADC D0_REMAINDER    ; Remainder of the Division Modulo
.1926af	0a		asl a		              ASL A ;<<<<<<<<<<<<<<<<<<<<<<<<<
.1926b0	aa		tax		              TAX
.1926b1	bf 81 24 19	lda $192481,x	              LDA @lnoteFNumbers,X
.1926b5	85 32		sta $32		              STA OPL2_PARAMETER0 ; Store the 16bit in Param OPL2_PARAMETER0 & OPL2_PARAMETER1
.1926b7	22 bd 2a 19	jsl $192abd	              JSL OPL2_SET_FNUMBER
.1926bb	e2 20		sep #$20	                SEP #$20        ; set A short
.1926bd	a9 01		lda #$01	              LDA #$01
.1926bf	85 32		sta $32		              STA OPL2_PARAMETER0 ; Set Keyon False
.1926c1	20 5a 2b	jsr $192b5a	              JSR OPL2_SET_KEYON
.1926c4	c2 10		rep #$10	                REP #$10        ; set X long
.1926c6	6b		rtl		              RTL
.1926c7					OPL2_PLAYDRUM
.1926c7	6b		rtl		              RTL
.1926c8					OPL2_SET_INSTRUMENT
.1926c8	38		sec		              SEC ; Set the WaveFormSelect to True
.1926c9	22 a2 28 19	jsl $1928a2	              JSL OPL2_SET_WAVEFORMSELECT;
.1926cd	e2 20		sep #$20	                SEP #$20        ; set A short
.1926cf	c2 10		rep #$10	                REP #$10        ; set X long
.1926d1	a0 00 00	ldy #$0000	              LDY #$0000
.1926d4	a2 00 00	ldx #$0000	              LDX #$0000
.1926d7	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.1926d9	85 35		sta $35		              STA OPL2_PARAMETER3
.1926db	c8		iny		              INY
.1926dc	c9 06		cmp #$06	              CMP #$06
.1926de	d0 03		bne $1926e3	              BNE PERCUSSION_NEXT07
.1926e0	82 70 01	brl $192853	              BRL Percussion_6
.1926e3					PERCUSSION_NEXT07
.1926e3	c9 07		cmp #$07	              CMP #$07
.1926e5	d0 03		bne $1926ea	              BNE PERCUSSION_NEXT08
.1926e7	82 44 01	brl $19282e	              BRL Percussion_7
.1926ea					PERCUSSION_NEXT08
.1926ea	c9 08		cmp #$08	              CMP #$08
.1926ec	d0 03		bne $1926f1	              BNE PERCUSSION_NEXT09
.1926ee	82 18 01	brl $192809	              BRL Percussion_8
.1926f1					PERCUSSION_NEXT09
.1926f1	c9 09		cmp #$09	              CMP #$09
.1926f3	d0 03		bne $1926f8	              BNE PERCUSSION_NEXT0A
.1926f5	82 ec 00	brl $1927e4	              BRL Percussion_9
.1926f8					PERCUSSION_NEXT0A
.1926f8	c9 0a		cmp #$0a	              CMP #$0A
.1926fa	d0 03		bne $1926ff	              BNE Percussion_Default
.1926fc	82 c0 00	brl $1927bf	              BRL Percussion_A
.1926ff					Percussion_Default
.1926ff	a9 00		lda #$00	              LDA #$00
.192701	85 26		sta $26		              STA OPL2_OPERATOR
.192703	c2 20		rep #$20	                REP #$20        ; set A long
.192705	a9 20 00	lda #$0020	              LDA #$0020;
.192708	85 28		sta $28		              STA OPL2_REG_REGION
.19270a	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19270d	e2 20		sep #$20	                SEP #$20        ; set A short
.19270f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.192711	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192713	c8		iny		              INY
.192714	c2 20		rep #$20	                REP #$20        ; set A long
.192716	a9 40 00	lda #$0040	              LDA #$0040;
.192719	85 28		sta $28		              STA OPL2_REG_REGION
.19271b	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19271e	e2 20		sep #$20	                SEP #$20        ; set A short
.192720	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.192722	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192724	c8		iny		              INY
.192725	c2 20		rep #$20	                REP #$20        ; set A long
.192727	a9 60 00	lda #$0060	              LDA #$0060;
.19272a	85 28		sta $28		              STA OPL2_REG_REGION
.19272c	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19272f	e2 20		sep #$20	                SEP #$20        ; set A short
.192731	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.192733	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192735	c8		iny		              INY
.192736	c2 20		rep #$20	                REP #$20        ; set A long
.192738	a9 80 00	lda #$0080	              LDA #$0080;
.19273b	85 28		sta $28		              STA OPL2_REG_REGION
.19273d	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192740	e2 20		sep #$20	                SEP #$20        ; set A short
.192742	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.192744	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192746	c8		iny		              INY
.192747	c2 20		rep #$20	                REP #$20        ; set A long
.192749	a9 e0 00	lda #$00e0	              LDA #$00E0;
.19274c	85 28		sta $28		              STA OPL2_REG_REGION
.19274e	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192751	e2 20		sep #$20	                SEP #$20        ; set A short
.192753	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.192755	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192757	c8		iny		              INY
.192758	e2 10		sep #$10	                SEP #$10        ; set X short
.19275a	a5 27		lda $27		              LDA OPL2_CHANNEL
.19275c	29 0f		and #$0f	              AND #$0F
.19275e	aa		tax		              TAX
.19275f	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.192761	9f c0 e6 af	sta $afe6c0,x	              STA @lOPL2_R_FEEDBACK,X
.192765	c8		iny		              INY
.192766	a9 01		lda #$01	              LDA #$01
.192768	85 26		sta $26		              STA OPL2_OPERATOR
.19276a	c2 20		rep #$20	                REP #$20        ; set A long
.19276c	a9 20 00	lda #$0020	              LDA #$0020;
.19276f	85 28		sta $28		              STA OPL2_REG_REGION
.192771	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192774	e2 20		sep #$20	                SEP #$20        ; set A short
.192776	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.192778	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19277a	c8		iny		              INY
.19277b	c2 20		rep #$20	                REP #$20        ; set A long
.19277d	a9 40 00	lda #$0040	              LDA #$0040;
.192780	85 28		sta $28		              STA OPL2_REG_REGION
.192782	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192785	e2 20		sep #$20	                SEP #$20        ; set A short
.192787	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.192789	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19278b	c8		iny		              INY
.19278c	c2 20		rep #$20	                REP #$20        ; set A long
.19278e	a9 60 00	lda #$0060	              LDA #$0060;
.192791	85 28		sta $28		              STA OPL2_REG_REGION
.192793	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192796	e2 20		sep #$20	                SEP #$20        ; set A short
.192798	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19279a	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19279c	c8		iny		              INY
.19279d	c2 20		rep #$20	                REP #$20        ; set A long
.19279f	a9 80 00	lda #$0080	              LDA #$0080;
.1927a2	85 28		sta $28		              STA OPL2_REG_REGION
.1927a4	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1927a7	e2 20		sep #$20	                SEP #$20        ; set A short
.1927a9	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.1927ab	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1927ad	c8		iny		              INY
.1927ae	c2 20		rep #$20	                REP #$20        ; set A long
.1927b0	a9 e0 00	lda #$00e0	              LDA #$00E0;
.1927b3	85 28		sta $28		              STA OPL2_REG_REGION
.1927b5	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1927b8	e2 20		sep #$20	                SEP #$20        ; set A short
.1927ba	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.1927bc	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1927be	6b		rtl		              RTL
.1927bf					Percussion_A
.1927bf	e2 20		sep #$20	                SEP #$20        ; set A short
.1927c1	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1927c3	8f 31 e7 af	sta $afe731	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $11
.1927c7	c8		iny		              INY
.1927c8	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1927ca	8f 51 e7 af	sta $afe751	              STA @lOPL2_S_KSL_TL + $11
.1927ce	c8		iny		              INY
.1927cf	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1927d1	8f 71 e7 af	sta $afe771	              STA @lOPL2_S_AR_DR + $11
.1927d5	c8		iny		              INY
.1927d6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1927d8	8f 91 e7 af	sta $afe791	              STA @lOPL2_S_SL_RR + $11
.1927dc	c8		iny		              INY
.1927dd	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1927df	8f f1 e7 af	sta $afe7f1	              STA @lOPL2_S_WAVE_SELECT + $11
.1927e3	6b		rtl		              RTL
.1927e4					Percussion_9
.1927e4	e2 20		sep #$20	                SEP #$20        ; set A short
.1927e6	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1927e8	8f 35 e7 af	sta $afe735	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $15
.1927ec	c8		iny		              INY
.1927ed	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1927ef	8f 55 e7 af	sta $afe755	              STA @lOPL2_S_KSL_TL + $15
.1927f3	c8		iny		              INY
.1927f4	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1927f6	8f 75 e7 af	sta $afe775	              STA @lOPL2_S_AR_DR + $15
.1927fa	c8		iny		              INY
.1927fb	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1927fd	8f 95 e7 af	sta $afe795	              STA @lOPL2_S_SL_RR + $15
.192801	c8		iny		              INY
.192802	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.192804	8f f5 e7 af	sta $afe7f5	              STA @lOPL2_S_WAVE_SELECT + $15
.192808	6b		rtl		              RTL
.192809					Percussion_8
.192809	e2 20		sep #$20	                SEP #$20        ; set A short
.19280b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19280d	8f 32 e7 af	sta $afe732	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $12
.192811	c8		iny		              INY
.192812	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.192814	8f 52 e7 af	sta $afe752	              STA @lOPL2_S_KSL_TL + $12
.192818	c8		iny		              INY
.192819	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19281b	8f 72 e7 af	sta $afe772	              STA @lOPL2_S_AR_DR + $12
.19281f	c8		iny		              INY
.192820	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.192822	8f 92 e7 af	sta $afe792	              STA @lOPL2_S_SL_RR + $12
.192826	c8		iny		              INY
.192827	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.192829	8f f2 e7 af	sta $afe7f2	              STA @lOPL2_S_WAVE_SELECT + $12
.19282d	6b		rtl		              RTL
.19282e					Percussion_7
.19282e	e2 20		sep #$20	                SEP #$20        ; set A short
.192830	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.192832	8f 34 e7 af	sta $afe734	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $14
.192836	c8		iny		              INY
.192837	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.192839	8f 54 e7 af	sta $afe754	              STA @lOPL2_S_KSL_TL + $14
.19283d	c8		iny		              INY
.19283e	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.192840	8f 74 e7 af	sta $afe774	              STA @lOPL2_S_AR_DR + $14
.192844	c8		iny		              INY
.192845	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.192847	8f 94 e7 af	sta $afe794	              STA @lOPL2_S_SL_RR + $14
.19284b	c8		iny		              INY
.19284c	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19284e	8f f4 e7 af	sta $afe7f4	              STA @lOPL2_S_WAVE_SELECT + $14
.192852	6b		rtl		              RTL
.192853					Percussion_6
.192853	e2 20		sep #$20	                SEP #$20        ; set A short
.192855	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.192857	8f 30 e7 af	sta $afe730	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $10
.19285b	8f 33 e7 af	sta $afe733	              STA @lOPL2_S_AM_VID_EG_KSR_MULT + $13
.19285f	c8		iny		              INY
.192860	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.192862	8f 50 e7 af	sta $afe750	              STA @lOPL2_S_KSL_TL + $10
.192866	8f 53 e7 af	sta $afe753	              STA @lOPL2_S_KSL_TL + $13
.19286a	c8		iny		              INY
.19286b	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19286d	8f 70 e7 af	sta $afe770	              STA @lOPL2_S_AR_DR + $10
.192871	8f 73 e7 af	sta $afe773	              STA @lOPL2_S_AR_DR + $13
.192875	c8		iny		              INY
.192876	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.192878	8f 90 e7 af	sta $afe790	              STA @lOPL2_S_SL_RR + $10
.19287c	8f 93 e7 af	sta $afe793	              STA @lOPL2_S_SL_RR + $13
.192880	c8		iny		              INY
.192881	b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.192883	8f f0 e7 af	sta $afe7f0	              STA @lOPL2_S_WAVE_SELECT + $10
.192887	8f f3 e7 af	sta $afe7f3	              STA @lOPL2_S_WAVE_SELECT + $13
.19288b	6b		rtl		              RTL
.19288c					OPL2_SET_REGISTER
.19288c	c2 20		rep #$20	                REP #$20        ; set A long
.19288e	18		clc		              CLC
.19288f	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192892	65 32		adc $32		              ADC OPL2_PARAMETER0
.192894	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192896	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192899	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19289b	e2 20		sep #$20	                SEP #$20        ; set A short
.19289d	a5 33		lda $33		              LDA OPL2_PARAMETER1
.19289f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1928a1	6b		rtl		              RTL
.1928a2					OPL2_SET_WAVEFORMSELECT
.1928a2	c2 20		rep #$20	                REP #$20        ; set A long
.1928a4	a9 01 e7	lda #$e701	              LDA #OPL2_S_BASE_LL + $0001
.1928a7	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1928a9	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.1928ac	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1928ae	e2 20		sep #$20	                SEP #$20        ; set A short
.1928b0	b0 07		bcs $1928b9	              BCS OPL2_Set_WaveFormSelect_set
.1928b2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1928b4	29 df		and #$df	              AND #$DF
.1928b6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1928b8	6b		rtl		              RTL
.1928b9					OPL2_Set_WaveFormSelect_set
.1928b9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1928bb	09 20		ora #$20	              ORA #$20
.1928bd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1928bf	6b		rtl		              RTL
.1928c0					OPL2_SET_TREMOLO
.1928c0	08		php		              PHP ; Push the Carry
.1928c1	c2 20		rep #$20	                REP #$20        ; set A long
.1928c3	18		clc		              CLC
.1928c4	a9 20 00	lda #$0020	              LDA #$0020;
.1928c7	85 28		sta $28		              STA OPL2_REG_REGION
.1928c9	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1928cc	28		plp		              PLP ; Pull the Carry out
.1928cd	e2 20		sep #$20	                SEP #$20        ; set A short
.1928cf	b0 08		bcs $1928d9	              BCS OPL2_Set_Tremolo_Set;
.1928d1	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1928d3	29 7f		and #$7f	              AND #$7F
.1928d5	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1928d7	80 06		bra $1928df	              BRA OPL2_Set_Tremolo_Exit
.1928d9					OPL2_Set_Tremolo_Set
.1928d9	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1928db	09 80		ora #$80	              ORA #$80
.1928dd	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1928df					OPL2_Set_Tremolo_Exit
.1928df	6b		rtl		              RTL
.1928e0					OPL2_GET_TREMOLO
.1928e0	c2 20		rep #$20	                REP #$20        ; set A long
.1928e2	a9 20 00	lda #$0020	              LDA #$0020;
.1928e5	85 28		sta $28		              STA OPL2_REG_REGION
.1928e7	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1928ea	e2 20		sep #$20	                SEP #$20        ; set A short
.1928ec	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1928ee	29 80		and #$80	              AND #$80
.1928f0	6b		rtl		              RTL
.1928f1					OPL2_SET_VIBRATO
.1928f1	08		php		              PHP ; Push the Carry
.1928f2	c2 20		rep #$20	                REP #$20        ; set A long
.1928f4	18		clc		              CLC
.1928f5	a9 20 00	lda #$0020	              LDA #$0020;
.1928f8	85 28		sta $28		              STA OPL2_REG_REGION
.1928fa	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1928fd	28		plp		              PLP ; Pull the Carry out
.1928fe	e2 20		sep #$20	                SEP #$20        ; set A short
.192900	b0 08		bcs $19290a	              BCS OPL2_Set_Vibrato_Set;
.192902	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192904	29 bf		and #$bf	              AND #$BF
.192906	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192908	80 06		bra $192910	              BRA OPL2_Set_Vibrato_Exit
.19290a					OPL2_Set_Vibrato_Set
.19290a	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19290c	09 40		ora #$40	              ORA #$40
.19290e	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192910					OPL2_Set_Vibrato_Exit
.192910	6b		rtl		              RTL
.192911					OPL2_GET_VIBRATO
.192911	c2 20		rep #$20	                REP #$20        ; set A long
.192913	a9 20 00	lda #$0020	              LDA #$0020;
.192916	85 28		sta $28		              STA OPL2_REG_REGION
.192918	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19291b	e2 20		sep #$20	                SEP #$20        ; set A short
.19291d	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19291f	29 40		and #$40	              AND #$40
.192921	6b		rtl		              RTL
.192922					OPL2_SET_MAINTAINSUSTAIN
.192922	08		php		              PHP ; Push the Carry
.192923	c2 20		rep #$20	                REP #$20        ; set A long
.192925	18		clc		              CLC
.192926	a9 20 00	lda #$0020	              LDA #$0020;
.192929	85 28		sta $28		              STA OPL2_REG_REGION
.19292b	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19292e	28		plp		              PLP ; Pull the Carry out
.19292f	e2 20		sep #$20	                SEP #$20        ; set A short
.192931	b0 08		bcs $19293b	              BCS OPL2_Set_MaintainSustain_Set;
.192933	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192935	29 df		and #$df	              AND #$DF
.192937	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192939	80 06		bra $192941	              BRA OPL2_Set_MaintainSustain_Exit
.19293b					OPL2_Set_MaintainSustain_Set
.19293b	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19293d	09 20		ora #$20	              ORA #$20
.19293f	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192941					OPL2_Set_MaintainSustain_Exit
.192941	6b		rtl		              RTL
.192942					OPL2_GET_MAINTAINSUSTAIN
.192942	c2 20		rep #$20	                REP #$20        ; set A long
.192944	a9 20 00	lda #$0020	              LDA #$0020;
.192947	85 28		sta $28		              STA OPL2_REG_REGION
.192949	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19294c	e2 20		sep #$20	                SEP #$20        ; set A short
.19294e	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192950	29 20		and #$20	              AND #$20
.192952	6b		rtl		              RTL
.192953					OPL2_SET_ENVELOPESCALING
.192953	08		php		              PHP ; Push the Carry
.192954	c2 20		rep #$20	                REP #$20        ; set A long
.192956	18		clc		              CLC
.192957	a9 20 00	lda #$0020	              LDA #$0020;
.19295a	85 28		sta $28		              STA OPL2_REG_REGION
.19295c	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19295f	28		plp		              PLP ; Pull the Carry out
.192960	e2 20		sep #$20	                SEP #$20        ; set A short
.192962	b0 08		bcs $19296c	              BCS OPL2_Set_EnvelopeScaling_Set;
.192964	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192966	29 ef		and #$ef	              AND #$EF
.192968	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19296a	80 06		bra $192972	              BRA OPL2_Set_EnvelopeScaling_Exit
.19296c					OPL2_Set_EnvelopeScaling_Set
.19296c	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19296e	09 10		ora #$10	              ORA #$10
.192970	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192972					OPL2_Set_EnvelopeScaling_Exit
.192972	6b		rtl		              RTL
.192973					OPL2_GET_ENVELOPESCALING
.192973	c2 20		rep #$20	                REP #$20        ; set A long
.192975	a9 20 00	lda #$0020	              LDA #$0020;
.192978	85 28		sta $28		              STA OPL2_REG_REGION
.19297a	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19297d	e2 20		sep #$20	                SEP #$20        ; set A short
.19297f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192981	29 10		and #$10	              AND #$10
.192983	6b		rtl		              RTL
.192984					OPL2_GET_MULTIPLIER
.192984	c2 20		rep #$20	                REP #$20        ; set A long
.192986	a9 20 00	lda #$0020	              LDA #$0020;
.192989	85 28		sta $28		              STA OPL2_REG_REGION
.19298b	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19298e	e2 20		sep #$20	                SEP #$20        ; set A short
.192990	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192992	29 0f		and #$0f	              AND #$0F
.192994	6b		rtl		              RTL
.192995					OPL2_SET_MULTIPLIER
.192995	c2 20		rep #$20	                REP #$20        ; set A long
.192997	a9 20 00	lda #$0020	              LDA #$0020;
.19299a	85 28		sta $28		              STA OPL2_REG_REGION
.19299c	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.19299f	e2 20		sep #$20	                SEP #$20        ; set A short
.1929a1	a5 32		lda $32		              LDA OPL2_PARAMETER0
.1929a3	29 0f		and #$0f	              AND #$0F
.1929a5	85 32		sta $32		              STA OPL2_PARAMETER0
.1929a7	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1929a9	29 f0		and #$f0	              AND #$F0
.1929ab	05 32		ora $32		              ORA OPL2_PARAMETER0
.1929ad	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1929af	6b		rtl		              RTL
.1929b0					OPL2_SET_SCALINGLEVEL
.1929b0	c2 20		rep #$20	                REP #$20        ; set A long
.1929b2	a9 40 00	lda #$0040	              LDA #$0040;
.1929b5	85 28		sta $28		              STA OPL2_REG_REGION
.1929b7	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1929ba	e2 20		sep #$20	                SEP #$20        ; set A short
.1929bc	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.1929be	29 03		and #$03	              AND #$03
.1929c0	0a		asl a		              ASL
.1929c1	0a		asl a		              ASL
.1929c2	0a		asl a		              ASL
.1929c3	0a		asl a		              ASL
.1929c4	0a		asl a		              ASL
.1929c5	0a		asl a		              ASL
.1929c6	85 32		sta $32		              STA OPL2_PARAMETER0
.1929c8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1929ca	29 3f		and #$3f	              AND #$3F
.1929cc	05 32		ora $32		              ORA OPL2_PARAMETER0
.1929ce	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1929d0	6b		rtl		              RTL
.1929d1					OPL2_SET_VOLUME
.1929d1	c2 20		rep #$20	                REP #$20        ; set A long
.1929d3	a9 40 00	lda #$0040	              LDA #$0040  ;
.1929d6	85 28		sta $28		              STA OPL2_REG_REGION
.1929d8	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1929db	e2 20		sep #$20	                SEP #$20        ; set A short
.1929dd	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Volume
.1929df	29 3f		and #$3f	              AND #$3F
.1929e1	85 32		sta $32		              STA OPL2_PARAMETER0
.1929e3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1929e5	29 c0		and #$c0	              AND #$C0
.1929e7	05 32		ora $32		              ORA OPL2_PARAMETER0
.1929e9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1929eb	6b		rtl		              RTL
.1929ec					OPL2_GET_VOLUME
.1929ec	c2 20		rep #$20	                REP #$20        ; set A long
.1929ee	a9 40 00	lda #$0040	              LDA #$0040  ;
.1929f1	85 28		sta $28		              STA OPL2_REG_REGION
.1929f3	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.1929f6	e2 20		sep #$20	                SEP #$20        ; set A short
.1929f8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1929fa	29 3f		and #$3f	              AND #$3F
.1929fc	6b		rtl		              RTL
.1929fd					OPL2_SET_ATTACK
.1929fd	c2 20		rep #$20	                REP #$20        ; set A long
.1929ff	a9 60 00	lda #$0060	              LDA #$0060  ;
.192a02	85 28		sta $28		              STA OPL2_REG_REGION
.192a04	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a07	e2 20		sep #$20	                SEP #$20        ; set A short
.192a09	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.192a0b	29 0f		and #$0f	              AND #$0F
.192a0d	0a		asl a		              ASL
.192a0e	0a		asl a		              ASL
.192a0f	0a		asl a		              ASL
.192a10	0a		asl a		              ASL
.192a11	85 32		sta $32		              STA OPL2_PARAMETER0
.192a13	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a15	29 0f		and #$0f	              AND #$0F
.192a17	05 32		ora $32		              ORA OPL2_PARAMETER0
.192a19	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192a1b	6b		rtl		              RTL
.192a1c					OPL2_GET_ATTACK
.192a1c	c2 20		rep #$20	                REP #$20        ; set A long
.192a1e	a9 60 00	lda #$0060	              LDA #$0060
.192a21	85 28		sta $28		              STA OPL2_REG_REGION
.192a23	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a26	e2 20		sep #$20	                SEP #$20        ; set A short
.192a28	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a2a	29 f0		and #$f0	              AND #$F0
.192a2c	4a		lsr a		              LSR
.192a2d	4a		lsr a		              LSR
.192a2e	4a		lsr a		              LSR
.192a2f	4a		lsr a		              LSR
.192a30	6b		rtl		              RTL
.192a31					OPL2_SET_DECAY
.192a31	c2 20		rep #$20	                REP #$20        ; set A long
.192a33	a9 60 00	lda #$0060	              LDA #$0060;
.192a36	85 28		sta $28		              STA OPL2_REG_REGION
.192a38	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a3b	e2 20		sep #$20	                SEP #$20        ; set A short
.192a3d	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.192a3f	29 0f		and #$0f	              AND #$0F
.192a41	85 32		sta $32		              STA OPL2_PARAMETER0
.192a43	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a45	29 f0		and #$f0	              AND #$F0
.192a47	05 32		ora $32		              ORA OPL2_PARAMETER0
.192a49	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192a4b	6b		rtl		              RTL
.192a4c					OPL2_GET_DECAY
.192a4c	c2 20		rep #$20	                REP #$20        ; set A long
.192a4e	a9 60 00	lda #$0060	              LDA #$0060
.192a51	85 28		sta $28		              STA OPL2_REG_REGION
.192a53	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a56	e2 20		sep #$20	                SEP #$20        ; set A short
.192a58	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a5a	29 0f		and #$0f	              AND #$0F
.192a5c	6b		rtl		              RTL
.192a5d					OPL2_SET_SUSTAIN
.192a5d	c2 20		rep #$20	                REP #$20        ; set A long
.192a5f	a9 80 00	lda #$0080	              LDA #$0080;
.192a62	85 28		sta $28		              STA OPL2_REG_REGION
.192a64	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a67	e2 20		sep #$20	                SEP #$20        ; set A short
.192a69	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.192a6b	29 0f		and #$0f	              AND #$0F
.192a6d	0a		asl a		              ASL
.192a6e	0a		asl a		              ASL
.192a6f	0a		asl a		              ASL
.192a70	0a		asl a		              ASL
.192a71	85 32		sta $32		              STA OPL2_PARAMETER0
.192a73	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a75	29 0f		and #$0f	              AND #$0F
.192a77	05 32		ora $32		              ORA OPL2_PARAMETER0
.192a79	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192a7b	6b		rtl		              RTL
.192a7c					OPL2_GET_SUSTAIN
.192a7c	c2 20		rep #$20	                REP #$20        ; set A long
.192a7e	a9 80 00	lda #$0080	              LDA #$0080
.192a81	85 28		sta $28		              STA OPL2_REG_REGION
.192a83	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a86	e2 20		sep #$20	                SEP #$20        ; set A short
.192a88	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192a8a	29 f0		and #$f0	              AND #$F0
.192a8c	4a		lsr a		              LSR
.192a8d	4a		lsr a		              LSR
.192a8e	4a		lsr a		              LSR
.192a8f	4a		lsr a		              LSR
.192a90	6b		rtl		              RTL
.192a91					OPL2_SET_RELEASE
.192a91	c2 20		rep #$20	                REP #$20        ; set A long
.192a93	a9 80 00	lda #$0080	              LDA #$0080;
.192a96	85 28		sta $28		              STA OPL2_REG_REGION
.192a98	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192a9b	e2 20		sep #$20	                SEP #$20        ; set A short
.192a9d	a5 32		lda $32		              LDA OPL2_PARAMETER0 ; Attack
.192a9f	29 0f		and #$0f	              AND #$0F
.192aa1	85 32		sta $32		              STA OPL2_PARAMETER0
.192aa3	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192aa5	29 f0		and #$f0	              AND #$F0
.192aa7	05 32		ora $32		              ORA OPL2_PARAMETER0
.192aa9	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192aab	6b		rtl		              RTL
.192aac					OPL2_GET_RELEASE
.192aac	c2 20		rep #$20	                REP #$20        ; set A long
.192aae	a9 80 00	lda #$0080	              LDA #$0080
.192ab1	85 28		sta $28		              STA OPL2_REG_REGION
.192ab3	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192ab6	e2 20		sep #$20	                SEP #$20        ; set A short
.192ab8	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192aba	29 0f		and #$0f	              AND #$0F
.192abc	6b		rtl		              RTL
.192abd					OPL2_SET_FNUMBER
.192abd	e2 20		sep #$20	                SEP #$20        ; set A short
.192abf	18		clc		              CLC
.192ac0	a5 27		lda $27		              LDA OPL2_CHANNEL
.192ac2	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192ac4	69 a0		adc #$a0	              ADC #$A0
.192ac6	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192ac8	a9 00		lda #$00	              LDA #$00
.192aca	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192acc	c2 30		rep #$30	                REP #$30        ; set A&X long
.192ace	18		clc		              CLC
.192acf	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192ad2	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192ad4	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192ad6	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192ad9	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192adb	e2 20		sep #$20	                SEP #$20        ; set A short
.192add	a5 32		lda $32		              LDA OPL2_PARAMETER0     ; Load the 16Bits Value of FNumber
.192adf	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]  ; Load
.192ae1	18		clc		              CLC
.192ae2	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.192ae4	69 10		adc #$10	              ADC #$10
.192ae6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192ae8	a5 33		lda $33		              LDA OPL2_PARAMETER1
.192aea	29 03		and #$03	              AND #$03
.192aec	85 33		sta $33		              STA OPL2_PARAMETER1
.192aee	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192af0	29 fc		and #$fc	              AND #$FC
.192af2	05 33		ora $33		              ORA OPL2_PARAMETER1
.192af4	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192af6	6b		rtl		              RTL
.192af7					OPL2_GET_FNUMBER
.192af7	e2 20		sep #$20	                SEP #$20        ; set A short
.192af9	18		clc		              CLC
.192afa	a5 27		lda $27		              LDA OPL2_CHANNEL
.192afc	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192afe	69 a0		adc #$a0	              ADC #$A0
.192b00	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192b02	a9 00		lda #$00	              LDA #$00
.192b04	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192b06	c2 30		rep #$30	                REP #$30        ; set A&X long
.192b08	18		clc		              CLC
.192b09	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192b0c	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192b0e	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192b10	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192b13	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192b15	e2 20		sep #$20	                SEP #$20        ; set A short
.192b17	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192b19	85 32		sta $32		              STA OPL2_PARAMETER0
.192b1b	18		clc		              CLC
.192b1c	a5 2c		lda $2c		              LDA OPL2_IND_ADDY_LL
.192b1e	69 10		adc #$10	              ADC #$10
.192b20	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192b22	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192b24	29 03		and #$03	              AND #$03
.192b26	85 33		sta $33		              STA OPL2_PARAMETER1
.192b28	6b		rtl		              RTL
.192b29					OPL2_SET_BLOCK
.192b29	e2 20		sep #$20	                SEP #$20        ; set A short
.192b2b	18		clc		              CLC
.192b2c	a5 27		lda $27		              LDA OPL2_CHANNEL
.192b2e	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192b30	69 b0		adc #$b0	              ADC #$B0
.192b32	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192b34	a9 00		lda #$00	              LDA #$00
.192b36	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192b38	c2 30		rep #$30	                REP #$30        ; set A&X long
.192b3a	18		clc		              CLC
.192b3b	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192b3e	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192b40	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192b42	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192b45	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192b47	e2 20		sep #$20	                SEP #$20        ; set A short
.192b49	a5 31		lda $31		              LDA OPL2_OCTAVE
.192b4b	29 07		and #$07	              AND #$07
.192b4d	0a		asl a		              ASL
.192b4e	0a		asl a		              ASL
.192b4f	85 31		sta $31		              STA OPL2_OCTAVE
.192b51	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192b53	29 e3		and #$e3	              AND #$E3
.192b55	05 31		ora $31		              ORA OPL2_OCTAVE
.192b57	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192b59	60		rts		              RTS
.192b5a					OPL2_SET_KEYON
.192b5a	e2 20		sep #$20	                SEP #$20        ; set A short
.192b5c	18		clc		              CLC
.192b5d	a5 27		lda $27		              LDA OPL2_CHANNEL
.192b5f	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192b61	69 b0		adc #$b0	              ADC #$B0
.192b63	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192b65	a9 00		lda #$00	              LDA #$00
.192b67	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192b69	c2 30		rep #$30	                REP #$30        ; set A&X long
.192b6b	18		clc		              CLC
.192b6c	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192b6f	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192b71	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192b73	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192b76	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192b78	e2 20		sep #$20	                SEP #$20        ; set A short
.192b7a	a5 32		lda $32		              LDA OPL2_PARAMETER0
.192b7c	29 01		and #$01	              AND #$01
.192b7e	0a		asl a		              ASL
.192b7f	0a		asl a		              ASL
.192b80	0a		asl a		              ASL
.192b81	0a		asl a		              ASL
.192b82	0a		asl a		              ASL
.192b83	85 32		sta $32		              STA OPL2_PARAMETER0
.192b85	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192b87	29 df		and #$df	              AND #$DF
.192b89	05 32		ora $32		              ORA OPL2_PARAMETER0
.192b8b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192b8d	60		rts		              RTS
.192b8e					OPL2_SET_FEEDBACK
.192b8e	e2 20		sep #$20	                SEP #$20        ; set A short
.192b90	18		clc		              CLC
.192b91	a5 27		lda $27		              LDA OPL2_CHANNEL
.192b93	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192b95	69 c0		adc #$c0	              ADC #$C0
.192b97	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192b99	a9 00		lda #$00	              LDA #$00
.192b9b	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192b9d	c2 30		rep #$30	                REP #$30        ; set A&X long
.192b9f	18		clc		              CLC
.192ba0	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192ba3	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192ba5	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192ba7	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192baa	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192bac	e2 20		sep #$20	                SEP #$20        ; set A short
.192bae	a5 32		lda $32		              LDA OPL2_PARAMETER0
.192bb0	29 07		and #$07	              AND #$07
.192bb2	0a		asl a		              ASL
.192bb3	85 32		sta $32		              STA OPL2_PARAMETER0
.192bb5	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192bb7	29 01		and #$01	              AND #$01
.192bb9	05 32		ora $32		              ORA OPL2_PARAMETER0
.192bbb	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192bbd	6b		rtl		              RTL
.192bbe					OPL2_SET_SYNTHMODE
.192bbe	08		php		              PHP ; Push the Carry
.192bbf	e2 20		sep #$20	                SEP #$20        ; set A short
.192bc1	18		clc		              CLC
.192bc2	a5 27		lda $27		              LDA OPL2_CHANNEL
.192bc4	29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.192bc6	69 c0		adc #$c0	              ADC #$C0
.192bc8	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192bca	a9 00		lda #$00	              LDA #$00
.192bcc	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192bce	c2 30		rep #$30	                REP #$30        ; set A&X long
.192bd0	18		clc		              CLC
.192bd1	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192bd4	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192bd6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192bd8	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192bdb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192bdd	28		plp		              PLP ; Pull the Carry out
.192bde	e2 20		sep #$20	                SEP #$20        ; set A short
.192be0	b0 08		bcs $192bea	              BCS OPL2_Set_Synthmode_Set;
.192be2	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192be4	29 fe		and #$fe	              AND #$FE
.192be6	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192be8	80 06		bra $192bf0	              BRA OPL2_Set_Synthmode_Exit
.192bea					OPL2_Set_Synthmode_Set
.192bea	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192bec	09 01		ora #$01	              ORA #$01
.192bee	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192bf0					OPL2_Set_Synthmode_Exit
.192bf0	6b		rtl		              RTL
.192bf1					OPL2_SET_DEEPTREMOLO
.192bf1	c2 20		rep #$20	                REP #$20        ; set A long
.192bf3	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.192bf6	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192bf8	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192bfb	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192bfd	e2 20		sep #$20	                SEP #$20        ; set A short
.192bff	b0 08		bcs $192c09	              BCS OPL2_Set_DeepTremolo_Set;
.192c01	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c03	29 7f		and #$7f	              AND #$7F
.192c05	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c07	80 06		bra $192c0f	              BRA OPL2_Set_DeepTremolo_Exit
.192c09					OPL2_Set_DeepTremolo_Set
.192c09	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c0b	09 80		ora #$80	              ORA #$80
.192c0d	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c0f					OPL2_Set_DeepTremolo_Exit
.192c0f	6b		rtl		              RTL
.192c10					OPL2_SET_DEEPVIBRATO
.192c10	c2 20		rep #$20	                REP #$20        ; set A long
.192c12	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.192c15	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192c17	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192c1a	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192c1c	e2 20		sep #$20	                SEP #$20        ; set A short
.192c1e	b0 08		bcs $192c28	              BCS OPL2_Set_DeepVibrato_Set;
.192c20	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c22	29 bf		and #$bf	              AND #$BF
.192c24	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c26	80 06		bra $192c2e	              BRA OPL2_Set_DeepVibrato_Exit
.192c28					OPL2_Set_DeepVibrato_Set
.192c28	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c2a	09 40		ora #$40	              ORA #$40
.192c2c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c2e					OPL2_Set_DeepVibrato_Exit
.192c2e	6b		rtl		              RTL
.192c2f					OPL2_SET_PERCUSSION
.192c2f	c2 20		rep #$20	                REP #$20        ; set A long
.192c31	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.192c34	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192c36	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192c39	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192c3b	e2 20		sep #$20	                SEP #$20        ; set A short
.192c3d	b0 08		bcs $192c47	              BCS OPL2_Set_Percussion_Set;
.192c3f	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c41	29 df		and #$df	              AND #$DF
.192c43	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c45	80 06		bra $192c4d	              BRA OPL2_Set_Percussion_Exit
.192c47					OPL2_Set_Percussion_Set
.192c47	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c49	09 20		ora #$20	              ORA #$20
.192c4b	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c4d					OPL2_Set_Percussion_Exit
.192c4d	6b		rtl		              RTL
.192c4e					OPL2_SET_DRUMS
.192c4e	c2 20		rep #$20	                REP #$20        ; set A long
.192c50	a9 bd e7	lda #$e7bd	              LDA #OPL2_S_BASE_LL + $00BD
.192c53	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192c55	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192c58	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192c5a	e2 20		sep #$20	                SEP #$20        ; set A short
.192c5c	a5 32		lda $32		              LDA OPL2_PARAMETER0
.192c5e	29 1f		and #$1f	              AND #$1F
.192c60	85 32		sta $32		              STA OPL2_PARAMETER0
.192c62	49 ff		eor #$ff	              EOR #$FF
.192c64	85 33		sta $33		              STA OPL2_PARAMETER1
.192c66	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c68	25 33		and $33		              AND OPL2_PARAMETER1
.192c6a	05 32		ora $32		              ORA OPL2_PARAMETER0
.192c6c	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c6e	6b		rtl		              RTL
.192c6f					OPL2_SET_WAVEFORM
.192c6f	c2 20		rep #$20	                REP #$20        ; set A long
.192c71	a9 e0 00	lda #$00e0	              LDA #$00E0;
.192c74	85 28		sta $28		              STA OPL2_REG_REGION
.192c76	20 8a 2c	jsr $192c8a	              JSR OPL2_GET_REG_OFFSET
.192c79	e2 20		sep #$20	                SEP #$20        ; set A short
.192c7b	a5 32		lda $32		              LDA OPL2_PARAMETER0
.192c7d	29 03		and #$03	              AND #$03
.192c7f	85 32		sta $32		              STA OPL2_PARAMETER0
.192c81	a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.192c83	29 fc		and #$fc	              AND #$FC
.192c85	05 32		ora $32		              ORA OPL2_PARAMETER0
.192c87	87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.192c89	6b		rtl		              RTL
.192c8a					OPL2_GET_REG_OFFSET
.192c8a	e2 30		sep #$30	                SEP #$30        ; set A&X short
.192c8c	a5 27		lda $27		              LDA OPL2_CHANNEL
.192c8e	29 0f		and #$0f	              AND #$0F
.192c90	aa		tax		              TAX
.192c91	a5 26		lda $26		              LDA OPL2_OPERATOR   ; Check which Operator In used
.192c93	29 01		and #$01	              AND #$01            ; if ZERO = The operator 1, One = Operator 2
.192c95	c9 01		cmp #$01	              CMP #$01
.192c97	f0 06		beq $192c9f	              BEQ OPL2_Get_Register_Offset_l0
.192c99	bf 99 24 19	lda $192499,x	              LDA @lregisterOffsets_operator0, X
.192c9d	80 04		bra $192ca3	              BRA OPL2_Get_Register_Offset_exit
.192c9f					OPL2_Get_Register_Offset_l0
.192c9f	bf a2 24 19	lda $1924a2,x	              LDA @lregisterOffsets_operator1, X
.192ca3					OPL2_Get_Register_Offset_exit
.192ca3	85 2a		sta $2a		              STA OPL2_REG_OFFSET
.192ca5	a9 00		lda #$00	              LDA #$00
.192ca7	85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.192ca9	c2 30		rep #$30	                REP #$30        ; set A&X long
.192cab	18		clc		              CLC
.192cac	a9 00 e7	lda #$e700	              LDA #OPL2_S_BASE_LL
.192caf	65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.192cb1	65 28		adc $28		              ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.192cb3	85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.192cb5	a9 af 00	lda #$00af	              LDA #OPL2_S_BASE_HL
.192cb8	85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.192cba	60		rts		              RTS

;******  Return to file: kernel.asm


;******  Processing file: kernel_jumptable.asm

.190000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.190004	5c 7d 0f 19	jmp $190f7d	RESTORE         JML IRESTORE
.190008	5c 0a 05 19	jmp $19050a	BREAK           JML IBREAK
.19000c	5c 51 05 19	jmp $190551	READY           JML IREADY
.190010	5c 7e 0f 19	jmp $190f7e	SCINIT          JML ISCINIT
.190014	5c 7f 0f 19	jmp $190f7f	IOINIT          JML IIOINIT
.190018	5c 96 05 19	jmp $190596	PUTC            JML IPUTC
.19001c	5c 7f 05 19	jmp $19057f	PUTS            JML IPUTS
.190020	5c c3 05 19	jmp $1905c3	PUTB            JML IPUTB
.190024	5c 80 0f 19	jmp $190f80	PUTBLOCK        JML IPUTBLOCK
.190028	5c 81 0f 19	jmp $190f81	SETLFS          JML ISETLFS
.19002c	5c 82 0f 19	jmp $190f82	SETNAM          JML ISETNAM
.190030	5c 83 0f 19	jmp $190f83	OPEN            JML IOPEN
.190034	5c 84 0f 19	jmp $190f84	CLOSE           JML ICLOSE
.190038	5c 85 0f 19	jmp $190f85	SETIN           JML ISETIN
.19003c	5c 86 0f 19	jmp $190f86	SETOUT          JML ISETOUT
.190040	5c 87 0f 19	jmp $190f87	GETB            JML IGETB
.190044	5c 88 0f 19	jmp $190f88	GETBLOCK        JML IGETBLOCK
.190048	5c 89 0f 19	jmp $190f89	GETCH           JML IGETCH
.19004c	5c 75 05 19	jmp $190575	GETCHW          JML IGETCHW
.190050	5c 6c 05 19	jmp $19056c	GETCHE          JML IGETCHE
.190054	5c 8a 0f 19	jmp $190f8a	GETS            JML IGETS
.190058	5c 8b 0f 19	jmp $190f8b	GETLINE         JML IGETLINE
.19005c	5c 8c 0f 19	jmp $190f8c	GETFIELD        JML IGETFIELD
.190060	5c 8d 0f 19	jmp $190f8d	TRIM            JML ITRIM
.190064	5c 8e 0f 19	jmp $190f8e	PRINTC          JML IPRINTC
.190068	5c 8f 0f 19	jmp $190f8f	PRINTS          JML IPRINTS
.19006c	5c c4 05 19	jmp $1905c4	PRINTCR         JML IPRINTCR
.190070	5c 90 0f 19	jmp $190f90	PRINTF          JML IPRINTF
.190074	5c 91 0f 19	jmp $190f91	PRINTI          JML IPRINTI
.190078	5c b1 06 19	jmp $1906b1	PRINTH          JML IPRINTH
.19007c	5c 92 0f 19	jmp $190f92	PRINTAI         JML IPRINTAI
.190080	5c 93 0f 19	jmp $190f93	PRINTAH         JML IPRINTAH
.190084	5c 5f 06 19	jmp $19065f	LOCATE          JML ILOCATE
.190088	5c 94 0f 19	jmp $190f94	PUSHKEY         JML IPUSHKEY
.19008c	5c 95 0f 19	jmp $190f95	PUSHKEYS        JML IPUSHKEYS
.190090	5c e5 05 19	jmp $1905e5	CSRRIGHT        JML ICSRRIGHT
.190094	5c 96 0f 19	jmp $190f96	CSRLEFT         JML ICSRLEFT
.190098	5c 3a 06 19	jmp $19063a	CSRUP           JML ICSRUP
.19009c	5c 5e 06 19	jmp $19065e	CSRDOWN         JML ICSRDOWN
.1900a0	5c 97 0f 19	jmp $190f97	CSRHOME         JML ICSRHOME
.1900a4	5c 95 06 19	jmp $190695	SCROLLUP        JML ISCROLLUP
.1900a8	5c df 06 19	jmp $1906df	CLRSCREEN       JML ICLRSCREEN
.1900ac	5c 46 07 19	jmp $190746	INITCHLUT	      JML IINITCHLUT
.1900b0	5c 60 0a 19	jmp $190a60	INITSUPERIO	    JML IINITSUPERIO
.1900b4	5c 5f 0b 19	jmp $190b5f	INITKEYBOARD    JML IINITKEYBOARD
.1900b8	5c d7 0c 19	jmp $190cd7	TESTSID         JML ITESTSID
.1900bc	5c 3f 0a 19	jmp $190a3f	INITCURSOR      JML IINITCURSOR
.1900c0	5c f5 09 19	jmp $1909f5	INITFONTSET     JML IINITFONTSET
.1900c4	5c 75 07 19	jmp $190775	INITGAMMATABLE  JML IINITGAMMATABLE
.1900c8	5c 95 07 19	jmp $190795	INITALLLUT      JML IINITALLLUT
.1900cc	5c 57 08 19	jmp $190857	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1900d0	5c 80 08 19	jmp $190880	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1900d4	5c b7 08 19	jmp $1908b7	INITTILEMODE    JML IINITTILEMODE
.1900d8	5c b8 08 19	jmp $1908b8	INITSPRITE      JML IINITSPRITE
.1900dc	5c 02 0d 19	jmp $190d02	INITCODEC       JML IINITCODEC
.1900e0	5c 4b 0d 19	jmp $190d4b	RESETCODEC      JML IRESETCODEC
.1900e4	5c b9 0d 19	jmp $190db9	BMP_PARSER      JML IBMP_PARSER
.1900e8	5c 6e 0d 19	jmp $190d6e	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1900ec	5c bc 24 19	jmp $1924bc	OPL2_TONE_TEST  JML IOPL2_TONE_TEST

;******  Return to file: kernel.asm

.190400					IBOOT
.190400	18		clc		                CLC           ; clear the carry flag
.190401	fb		xce		                XCE           ; move carry to emulation flag.
.190402	78		sei		                SEI
.190403	c2 30		rep #$30	                REP #$30        ; set A&X long
.190405	a9 ff fe	lda #$feff	                LDA #STACK_END   ; initialize stack pointer
.190408	1b		tcs		                TAS
.190409	48		pha		                PHA             ; begin setdp macro
.19040a	08		php			PHP
.19040b	c2 20		rep #$20	                REP #$20        ; set A long
.19040d	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190410	5b		tcd		                TCD
.190411	28		plp			PLP
.190412	68		pla		                PLA             ; end setdp macro
.190413	e2 20		sep #$20	                SEP #$20        ; set A short
.190415	a2 00 00	ldx #$0000	                LDX #$0000
.190418	a9 00		lda #$00	                LDA #$00
.19041a					CLEAR_MEM_LOOP
.19041a	95 00		sta $00,x	                STA $0000, X
.19041c	e8		inx		                INX
.19041d	e0 00 04	cpx #$0400	                CPX #$0400
.190420	d0 f8		bne $19041a	                BNE CLEAR_MEM_LOOP
.190422	ea		nop		                NOP
.190423	a9 ff		lda #$ff	                LDA #$FF
.190425	8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190429	8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.19042d	8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190431	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190435	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190439	8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19043d	c2 30		rep #$30	                REP #$30        ; set A&X long
.19043f	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.190442	85 0c		sta $0c		                STA SCREENBEGIN
.190444	e2 20		sep #$20	                SEP #$20        ; set A short
.190446	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190448	85 0e		sta $0e		                STA SCREENBEGIN+2
.19044a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19044c	a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.19044f	85 17		sta $17		                STA CURSORPOS
.190451	e2 20		sep #$20	                SEP #$20        ; set A short
.190453	a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.190455	85 19		sta $19		                STA CURSORPOS+2
.190457	a9 00		lda #$00	                LDA #$00
.190459	8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.19045c	a9 04		lda #$04	                LDA #$04                ; This is to make sure the RTC will keep working after unit is turn-off
.19045e	8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190462	c2 30		rep #$30	                REP #$30        ; set A&X long
.190464	a2 4c 00	ldx #$004c	                LDX #76
.190467	86 0f		stx $0f		                STX COLS_VISIBLE
.190469	a0 38 00	ldy #$0038	                LDY #56
.19046c	84 13		sty $13		                STY LINES_VISIBLE
.19046e	a2 80 00	ldx #$0080	                LDX #128
.190471	86 11		stx $11		                STX COLS_PER_LINE
.190473	a0 40 00	ldy #$0040	                LDY #64
.190476	84 15		sty $15		                STY LINES_MAX
.190478	a9 10 10	lda #$1010	                LDA #$1010
.19047b	8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE  ; A is 16 bits, so it will write 0 to BORDER_Y_SIZE
.19047f	22 dc 00 19	jsl $1900dc	                JSL INITCODEC
.190483	22 b0 00 19	jsl $1900b0	                JSL INITSUPERIO
.190487	22 c4 00 19	jsl $1900c4	                JSL INITGAMMATABLE
.19048b	22 c8 00 19	jsl $1900c8	                JSL INITALLLUT
.19048f	22 ac 00 19	jsl $1900ac	                JSL INITCHLUT
.190493	22 20 0a 19	jsl $190a20	                JSL INITMOUSEPOINTER
.190497	22 bc 00 19	jsl $1900bc	                JSL INITCURSOR
.19049b	22 cc 00 19	jsl $1900cc	                JSL INITVKYTXTMODE
.19049f	22 f5 09 19	jsl $1909f5	                JSL IINITFONTSET
.1904a3	22 df 06 19	jsl $1906df	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.1904a7	22 0e 07 19	jsl $19070e	                JSL ICOLORFLAG  ; This is to set the Color Memory for the Logo
.1904ab	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904ad					greet
.1904ad	48		pha		                PHA             ; begin setdbr macro
.1904ae	08		php		                PHP
.1904af	e2 20		sep #$20	                SEP #$20        ; set A short
.1904b1	a9 19		lda #$19		LDA #`greet_msg
.1904b3	48		pha		                PHA
.1904b4	ab		plb		                PLB
.1904b5	28		plp		                PLP
.1904b6	68		pla		                PLA             ; end setdbr macro
.1904b7	a2 9a 0f	ldx #$0f9a	                LDX #<>greet_msg
.1904ba	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.1904be	a2 83 10	ldx #$1083	                LDX #<>old_pc_style_stat
.1904c1	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.1904c5	48		pha		                PHA             ; begin setdp macro
.1904c6	08		php			PHP
.1904c7	c2 20		rep #$20	                REP #$20        ; set A long
.1904c9	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904cc	5b		tcd		                TCD
.1904cd	28		plp			PLP
.1904ce	68		pla		                PLA             ; end setdp macro
.1904cf	22 b4 00 19	jsl $1900b4	                JSL INITKEYBOARD ;
.1904d3	c2 30		rep #$30	                REP #$30        ; set A&X long
.1904d5	a2 bc 14	ldx #$14bc	                LDX #<>ready_msg
.1904d8	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.1904dc	58		cli		                CLI ; Make sure no Interrupt will come and fuck up Init before this point.
.1904dd	e2 20		sep #$20	                SEP #$20        ; set A short
.1904df	48		pha		                PHA             ; begin setdbr macro
.1904e0	08		php		                PHP
.1904e1	e2 20		sep #$20	                SEP #$20        ; set A short
.1904e3	a9 19		lda #$19		LDA #`greet_msg
.1904e5	48		pha		                PHA
.1904e6	ab		plb		                PLB
.1904e7	28		plp		                PLP
.1904e8	68		pla		                PLA             ; end setdbr macro
.1904e9	ea		nop		endlessloop     NOP
.1904ea	af 83 0f 00	lda $000f83	                LDA KEY_BUFFER_CMD
.1904ee	c9 01		cmp #$01	                CMP #$01
.1904f0	f0 04		beq $1904f6	                BEQ GoProcessCommandLine
.1904f2	5c e9 04 19	jmp $1904e9	                JML endlessloop
.1904f6					GoProcessCommandLine
.1904f6	a9 00		lda #$00	                LDA #$00  ; Clear the Flag
.1904f8	8f 83 0f 00	sta $000f83	                STA KEY_BUFFER_CMD
.1904fc	22 56 30 19	jsl $193056	                JSL PROCESS_COMMAND_LINE
.190500	a2 bc 14	ldx #$14bc	                LDX #<>ready_msg
.190503	22 76 05 19	jsl $190576	                JSL IPRINT
.190507	80 e0		bra $1904e9	                BRA  endlessloop
.190509	00		brk #		greet_done      BRK             ;Terminate boot routine and go to Ready handler.
.19050a					IBREAK
.19050a	48		pha		                PHA             ; begin setdp macro
.19050b	08		php			PHP
.19050c	c2 20		rep #$20	                REP #$20        ; set A long
.19050e	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190511	5b		tcd		                TCD
.190512	28		plp			PLP
.190513	68		pla		                PLA             ; end setdp macro
.190514	68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190515	8f 48 02 00	sta $000248	                STA CPUY
.190519	68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.19051a	8f 46 02 00	sta $000246	                STA CPUX
.19051e	68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19051f	8f 44 02 00	sta $000244	                STA CPUA
.190523	68		pla		                PLA
.190524	8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190528	e2 20		sep #$20	                SEP #$20        ; set A short
.19052a	68		pla		                PLA             ; Pull Data Bank (8 bits)
.19052b	8f 4e 02 00	sta $00024e	                STA CPUDBR
.19052f	68		pla		                PLA             ; Pull Flags (8 bits)
.190530	8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190534	c2 20		rep #$20	                REP #$20        ; set A long
.190536	68		pla		                PLA             ; Pull Program Counter (16 bits)
.190537	8f 40 02 00	sta $000240	                STA CPUPC
.19053b	e2 20		sep #$20	                SEP #$20        ; set A short
.19053d	68		pla		                PLA             ; Pull Program Bank (8 bits)
.19053e	8f 42 02 00	sta $000242	                STA CPUPBR
.190542	c2 20		rep #$20	                REP #$20        ; set A long
.190544	3b		tsc		                TSA             ; Get the stack
.190545	8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190549	a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.19054c	1b		tcs		                TAS
.19054d	5c e0 ff 00	jmp $00ffe0	                JML JMP_READY   ; Run READY routine (usually BASIC or MONITOR)
.190551					IREADY
.190551	48		pha		                PHA             ; begin setdbr macro
.190552	08		php		                PHP
.190553	e2 20		sep #$20	                SEP #$20        ; set A short
.190555	a9 19		lda #$19		LDA #`ready_msg
.190557	48		pha		                PHA
.190558	ab		plb		                PLB
.190559	28		plp		                PLP
.19055a	68		pla		                PLA             ; end setdbr macro
.19055b	e2 20		sep #$20	                SEP #$20        ; set A short
.19055d	a2 bc 14	ldx #$14bc	                LDX #<>ready_msg
.190560	22 76 05 19	jsl $190576	                JSL IPRINT
.190564					IREADYWAIT
.190564	22 6c 05 19	jsl $19056c	                JSL IGETCHE
.190568	80 fa		bra $190564	                BRA IREADYWAIT
.19056a	db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.19056b	db		stp		IRETURN         STP
.19056c	22 75 05 19	jsl $190575	IGETCHE         JSL IGETCHW
.190570	22 96 05 19	jsl $190596	                JSL IPUTC
.190574	6b		rtl		                RTL
.190575					IGETCHW
.190575	6b		rtl		                RTL
.190576	22 7f 05 19	jsl $19057f	IPRINT          JSL IPUTS
.19057a	22 c4 05 19	jsl $1905c4	                JSL IPRINTCR
.19057e	6b		rtl		                RTL
.19057f	48		pha		IPUTS           PHA
.190580	08		php		                PHP
.190581	e2 20		sep #$20	                SEP #$20        ; set A short
.190583	c2 10		rep #$10	                REP #$10        ; set X long
.190585	bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.190588	f0 08		beq $190592	                BEQ iputs_done
.19058a	22 96 05 19	jsl $190596	iputs2          JSL IPUTC
.19058e	e8		inx		iputs3          INX
.19058f	4c 85 05	jmp $190585	                JMP iputs1
.190592	e8		inx		iputs_done      INX
.190593	28		plp		                PLP
.190594	68		pla		                PLA
.190595	6b		rtl		                RTL
.190596	0b		phd		IPUTC           PHD
.190597	08		php		                PHP             ; stash the flags (we'll be changing M)
.190598	48		pha		                PHA             ; begin setdp macro
.190599	08		php			PHP
.19059a	c2 20		rep #$20	                REP #$20        ; set A long
.19059c	a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19059f	5b		tcd		                TCD
.1905a0	28		plp			PLP
.1905a1	68		pla		                PLA             ; end setdp macro
.1905a2	e2 20		sep #$20	                SEP #$20        ; set A short
.1905a4	c9 0d		cmp #$0d	                CMP #$0D        ; handle CR
.1905a6	d0 06		bne $1905ae	                BNE iputc_bs
.1905a8	22 c4 05 19	jsl $1905c4	                JSL IPRINTCR
.1905ac	80 10		bra $1905be	                bra iputc_done
.1905ae	c9 08		cmp #$08	iputc_bs        CMP #$08        ; backspace
.1905b0	d0 06		bne $1905b8	                BNE iputc_print
.1905b2	22 d5 05 19	jsl $1905d5	                JSL IPRINTBS
.1905b6	80 06		bra $1905be	                BRA iputc_done
.1905b8	87 17		sta [$17]	iputc_print     STA [CURSORPOS] ; Save the character on the screen
.1905ba	22 e5 05 19	jsl $1905e5	                JSL ICSRRIGHT
.1905be					iputc_done
>1905be	42 01				                .byte $42, $01
.1905c0	28		plp		                PLP
.1905c1	2b		pld		                PLD
.1905c2	6b		rtl		                RTL
.1905c3					IPUTB
.1905c3	6b		rtl		                RTL
.1905c4	da		phx		IPRINTCR	      PHX
.1905c5	5a		phy		                PHY
.1905c6	08		php		                PHP
.1905c7	a2 00 00	ldx #$0000	                LDX #0
.1905ca	a4 1c		ldy $1c		                LDY CURSORY
.1905cc	c8		iny		                INY
.1905cd	22 5f 06 19	jsl $19065f	                JSL ILOCATE
.1905d1	28		plp		                PLP
.1905d2	7a		ply		                PLY
.1905d3	fa		plx		                PLX
.1905d4	6b		rtl		                RTL
.1905d5	da		phx		IPRINTBS	PHX
.1905d6	5a		phy		                PHY
.1905d7	08		php		                PHP
.1905d8	a6 1a		ldx $1a		                LDX CURSORX
.1905da	a4 1c		ldy $1c		                LDY CURSORY
.1905dc	ca		dex		                DEX
.1905dd	22 5f 06 19	jsl $19065f	                JSL ILOCATE
.1905e1	28		plp		                PLP
.1905e2	7a		ply		                PLY
.1905e3	fa		plx		                PLX
.1905e4	6b		rtl		                RTL
.1905e5					ICSRRIGHT
.1905e5	da		phx		                PHX
.1905e6	8b		phb		                PHB
.1905e7	c2 20		rep #$20	                REP #$20        ; set A long
.1905e9	c2 10		rep #$10	                REP #$10        ; set X long
.1905eb	48		pha		                PHA             ; begin setdp macro
.1905ec	08		php			PHP
.1905ed	c2 20		rep #$20	                REP #$20        ; set A long
.1905ef	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.1905f2	5b		tcd		                TCD
.1905f3	28		plp			PLP
.1905f4	68		pla		                PLA             ; end setdp macro
.1905f5	e6 17		inc $17		                INC CURSORPOS
.1905f7	a6 1a		ldx $1a		                LDX CURSORX
.1905f9	e8		inx		                INX
.1905fa	e4 0f		cpx $0f		                CPX COLS_VISIBLE
.1905fc	90 0c		bcc $19060a	                BCC icsr_nowrap  ; wrap if the cursor is at or past column 80
.1905fe	a2 00 00	ldx #$0000	                LDX #0
.190601	5a		phy		                PHY
.190602	a4 1c		ldy $1c		                LDY CURSORY
.190604	c8		iny		                INY
.190605	22 5f 06 19	jsl $19065f	                JSL ILOCATE
.190609	7a		ply		                PLY
.19060a	86 1a		stx $1a		icsr_nowrap     STX CURSORX
.19060c	48		pha		                PHA
.19060d	8a		txa		                TXA
.19060e	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190612	68		pla		                PLA
.190613	ab		plb		                PLB
.190614	fa		plx		                PLX
.190615	6b		rtl		                RTL
.190616					ISRLEFT
.190616	da		phx		                PHX
.190617	5a		phy		                PHY
.190618	8b		phb		                PHB
.190619	48		pha		                PHA
.19061a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19061c	48		pha		                PHA             ; begin setdp macro
.19061d	08		php			PHP
.19061e	c2 20		rep #$20	                REP #$20        ; set A long
.190620	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190623	5b		tcd		                TCD
.190624	28		plp			PLP
.190625	68		pla		                PLA             ; end setdp macro
.190626	a5 1a		lda $1a		                LDA CURSORX
.190628	f0 0b		beq $190635	                BEQ isrleft_done_already_zero ; Check that we are not already @ Zero
.19062a	a6 1a		ldx $1a		                LDX CURSORX
.19062c	ca		dex		                DEX
.19062d	86 1a		stx $1a		                STX CURSORX
.19062f	a4 1c		ldy $1c		                LDY CURSORY
.190631	22 5f 06 19	jsl $19065f	                JSL ILOCATE
.190635					isrleft_done_already_zero
.190635	68		pla		                PLA
.190636	ab		plb		                PLB
.190637	7a		ply		                PLY
.190638	fa		plx		                PLX
.190639	6b		rtl		                RTL
.19063a					ICSRUP
.19063a	da		phx		                PHX
.19063b	5a		phy		                PHY
.19063c	8b		phb		                PHB
.19063d	48		pha		                PHA
.19063e	c2 30		rep #$30	                REP #$30        ; set A&X long
.190640	48		pha		                PHA             ; begin setdp macro
.190641	08		php			PHP
.190642	c2 20		rep #$20	                REP #$20        ; set A long
.190644	a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.190647	5b		tcd		                TCD
.190648	28		plp			PLP
.190649	68		pla		                PLA             ; end setdp macro
.19064a	a5 1c		lda $1c		                LDA CURSORY
.19064c	f0 0b		beq $190659	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.19064e	a4 1c		ldy $1c		                LDY CURSORY
.190650	88		dey		                DEY
.190651	84 1c		sty $1c		                STY CURSORY
.190653	a6 1a		ldx $1a		                LDX CURSORX
.190655	22 5f 06 19	jsl $19065f	                JSL ILOCATE
.190659					isrup_done_already_zero
.190659	68		pla		                PLA
.19065a	ab		plb		                PLB
.19065b	7a		ply		                PLY
.19065c	fa		plx		                PLX
.19065d	6b		rtl		                RTL
.19065e					ICSRDOWN
.19065e	6b		rtl		                RTL
.19065f	48		pha		ILOCATE         PHA
.190660	08		php		                PHP
.190661	c2 30		rep #$30	                REP #$30        ; set A&X long
.190663					ilocate_scroll
.190663	c4 13		cpy $13		                CPY LINES_VISIBLE
.190665	90 07		bcc $19066e	                BCC ilocate_scrolldone
.190667	22 95 06 19	jsl $190695	                JSL ISCROLLUP
.19066b	88		dey		                DEY
.19066c	80 f5		bra $190663	                BRA ilocate_scroll
.19066e					ilocate_scrolldone
.19066e	86 1a		stx $1a		                STX CURSORX
.190670	84 1c		sty $1c		                STY CURSORY
.190672	a5 0c		lda $0c		                LDA SCREENBEGIN
.190674					ilocate_row
.190674	c0 00 00	cpy #$0000	                CPY #$0
.190677	f0 08		beq $190681	                BEQ ilocate_right
.190679	18		clc		ilocate_down    CLC
.19067a	65 11		adc $11		                ADC COLS_PER_LINE
.19067c	88		dey		                DEY
.19067d	f0 02		beq $190681	                BEQ ilocate_right
.19067f	80 f8		bra $190679	                BRA ilocate_down
.190681	18		clc		ilocate_right   CLC
.190682	65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.190684	85 17		sta $17		                STA CURSORPOS
.190686	a4 1c		ldy $1c		                LDY CURSORY
.190688	98		tya		                TYA
.190689	8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.19068d	8a		txa		                TXA
.19068e	8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.190692	28		plp		ilocate_done    PLP
.190693	68		pla		                PLA
.190694	6b		rtl		                RTL
.190695					ISCROLLUP
.190695	48		pha		                PHA
.190696	da		phx		                PHX
.190697	5a		phy		                PHY
.190698	8b		phb		                PHB
.190699	08		php		                PHP
.19069a	c2 30		rep #$30	                REP #$30        ; set A&X long
.19069c	18		clc		                CLC
.19069d	a9 00 a0	lda #$a000	                LDA #$A000
.1906a0	a8		tay		                TAY             ; Destination is first row
.1906a1	69 80 00	adc #$0080	                ADC #128
.1906a4	aa		tax		                TAX             ; Source is second row
.1906a5	a9 7f 1f	lda #$1f7f	                LDA #128 * 63 - 1
.1906a8	54 af af	mvn $af,$af	                MVN $AF,$AF
.1906ab	28		plp		                PLP
.1906ac	ab		plb		                PLB
.1906ad	7a		ply		                PLY
.1906ae	fa		plx		                PLX
.1906af	68		pla		                PLA
.1906b0	6b		rtl		                RTL
.1906b1	08		php		IPRINTH         PHP
.1906b2	48		pha		                PHA
.1906b3					iprinth1
.1906b3	e2 20		sep #$20	                SEP #$20        ; set A short
.1906b5	bd 00 00	lda $190000,x	                LDA #0,b,x      ; Read the value to be printed
.1906b8	4a		lsr a		                LSR
.1906b9	4a		lsr a		                LSR
.1906ba	4a		lsr a		                LSR
.1906bb	4a		lsr a		                LSR
.1906bc	22 ce 06 19	jsl $1906ce	                JSL iprint_digit
.1906c0	bd 00 00	lda $190000,x	                LDA #0,b,x
.1906c3	22 ce 06 19	jsl $1906ce	                JSL iprint_digit
.1906c7	ca		dex		                DEX
.1906c8	88		dey		                DEY
.1906c9	d0 e8		bne $1906b3	                BNE iprinth1
.1906cb	68		pla		                PLA
.1906cc	28		plp		                PLP
.1906cd	6b		rtl		                RTL
.1906ce	da		phx		iprint_digit    PHX
.1906cf	c2 20		rep #$20	                REP #$20        ; set A long
.1906d1	29 0f 00	and #$000f	                AND #$0F
.1906d4	aa		tax		                TAX
.1906d5	bf 46 15 19	lda $191546,x	                LDA hex_digits,X
.1906d9	22 96 05 19	jsl $190596	                JSL IPUTC       ; Print the digit
.1906dd	fa		plx		                PLX
.1906de	6b		rtl		                RTL
.1906df	0b		phd		ICLRSCREEN	    PHD
.1906e0	08		php		                PHP
.1906e1	48		pha		                PHA
.1906e2	da		phx		                PHX
.1906e3	e2 20		sep #$20	                SEP #$20        ; set A short
.1906e5	c2 10		rep #$10	                REP #$10        ; set X long
.1906e7	a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.1906ea	a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.1906ec	9f 00 a0 af	sta $afa000,x	iclearloop0	    STA CS_TEXT_MEM_PTR, x	;
.1906f0	e8		inx		                inx
.1906f1	e0 00 20	cpx #$2000	                cpx #$2000
.1906f4	d0 f6		bne $1906ec	                bne iclearloop0
.1906f6	a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.1906f9	a9 ed		lda #$ed	                LDA #$ED		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.1906fb	9f 00 c0 af	sta $afc000,x	iclearloop1	    STA CS_COLOR_MEM_PTR, x	;
.1906ff	e8		inx		                inx
.190700	e0 00 20	cpx #$2000	                cpx #$2000
.190703	d0 f6		bne $1906fb	                bne iclearloop1
.190705	c2 10		rep #$10	                REP #$10        ; set X long
.190707	c2 20		rep #$20	                REP #$20        ; set A long
.190709	fa		plx		                PLX
.19070a	68		pla		                PLA
.19070b	28		plp		                PLP
.19070c	2b		pld		                PLD
.19070d	6b		rtl		                RTL
.19070e	48		pha		ICOLORFLAG      PHA
.19070f	da		phx		                PHX
.190710	08		php		                PHP
.190711	e2 30		sep #$30	                SEP #$30        ; set A&X short
.190713	a2 00		ldx #$00	                LDX #$00
.190715	bf 0b 13 19	lda $19130b,x	iclearloop2	    LDA @lgreet_clr_line1,x
.190719	9f 00 c0 af	sta $afc000,x	                STA CS_COLOR_MEM_PTR,x
.19071d	bf 19 13 19	lda $191319,x	                LDA @lgreet_clr_line2,x
.190721	9f 80 c0 af	sta $afc080,x	                STA CS_COLOR_MEM_PTR + $80,x
.190725	bf 27 13 19	lda $191327,x	                LDA @lgreet_clr_line3,x
.190729	9f 00 c1 af	sta $afc100,x	                STA CS_COLOR_MEM_PTR + $100,x
.19072d	bf 35 13 19	lda $191335,x	                LDA @lgreet_clr_line4,x
.190731	9f 80 c1 af	sta $afc180,x	                STA CS_COLOR_MEM_PTR + $180,x
.190735	bf 43 13 19	lda $191343,x	                LDA @lgreet_clr_line5,x
.190739	9f 00 c2 af	sta $afc200,x	                STA CS_COLOR_MEM_PTR + $200,x
.19073d	e8		inx		                inx
.19073e	e0 0e		cpx #$0e	                cpx #$0E
.190740	d0 d3		bne $190715	                bne iclearloop2
.190742	28		plp		                PLP
.190743	fa		plx		                PLX
.190744	68		pla		                PLA
.190745	6b		rtl		                RTL
.190746	0b		phd		IINITCHLUT		  PHD
.190747	08		php		                PHP
.190748	48		pha		                PHA
.190749	da		phx		                PHX
.19074a	e2 20		sep #$20	                SEP #$20        ; set A short
.19074c	e2 10		sep #$10	                SEP #$10        ; set X short
.19074e	a2 00		ldx #$00					        LDX	#$00
.190750	bf 51 13 19	lda $191351,x	lutinitloop0	  LDA @lfg_color_lut,x		; get Local Data
.190754	9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190758	e8		inx		                inx
.190759	e0 40		cpx #$40	                cpx #$40
.19075b	d0 f3		bne $190750	                bne lutinitloop0
.19075d	a2 00		ldx #$00	                LDX	#$00
.19075f	bf 91 13 19	lda $191391,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.190763	9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.190767	e8		inx		                INX
.190768	e0 40		cpx #$40	                CPX #$40
.19076a	d0 f3		bne $19075f	                bne lutinitloop1
.19076c	c2 20		rep #$20	                REP #$20        ; set A long
.19076e	c2 10		rep #$10	                REP #$10        ; set X long
.190770	fa		plx		                PLX
.190771	68		pla		                PLA
.190772	28		plp		                PLP
.190773	2b		pld		                PLD
.190774	6b		rtl		                RTL
.190775					IINITGAMMATABLE
.190775	e2 20		sep #$20	                SEP #$20        ; set A short
.190777	c2 10		rep #$10	                REP #$10        ; set X long
.190779	a2 00 00	ldx #$0000	                ldx #$0000
.19077c	bf 00 1a 19	lda $191a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190780	9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.190784	9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.190788	9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.19078c	e8		inx		                inx
.19078d	e0 00 01	cpx #$0100	                cpx #$0100
.190790	d0 ea		bne $19077c	                bne initgammaloop
.190792	c2 30		rep #$30	                REP #$30        ; set A&X long
.190794	6b		rtl		                RTL
.190795	48		pha		IINITALLLUT     PHA
.190796	da		phx		                PHX
.190797	a2 00 00	ldx #$0000	                LDX #$0000
.19079a	e2 20		sep #$20	                SEP #$20        ; set A short
.19079c	a9 00		lda #$00	                LDA #$00
.19079e	85 0a		sta $0a		                STA $0A     ; Temp Location
.1907a0					iinit_lut_loop
.1907a0	86 02		stx $02		                STX $02
.1907a2	a6 0a		ldx $0a		                LDX $0A
.1907a4	bf 00 19 19	lda $191900,x	                LDA GAMMA_2_2_Tbl, x
.1907a8	49 55		eor #$55	                EOR  #$55
.1907aa	a6 02		ldx $02		                LDX $02
.1907ac	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907b0	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907b4	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907b8	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907bc	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907c0	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907c4	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907c8	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907cc	e8		inx		                inx
.1907cd	86 02		stx $02		                STX $02
.1907cf	a6 0a		ldx $0a		                LDX $0A
.1907d1	bf 00 1b 19	lda $191b00,x	                LDA RANDOM_LUT_Tbl, x
.1907d5	a6 02		ldx $02		                LDX $02
.1907d7	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1907db	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1907df	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1907e3	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1907e7	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1907eb	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1907ef	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1907f3	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1907f7	e8		inx		                inx
.1907f8	86 02		stx $02		                STX $02
.1907fa	a6 0a		ldx $0a		                LDX $0A
.1907fc	bf 00 1a 19	lda $191a00,x	                LDA GAMMA_1_8_Tbl, x
.190800	49 aa		eor #$aa	                EOR  #$AA
.190802	a6 02		ldx $02		                LDX $02
.190804	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190808	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.19080c	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190810	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190814	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190818	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.19081c	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190820	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190824	e8		inx		                inx
.190825	a9 ff		lda #$ff	                LDA #$FF
.190827	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.19082b	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.19082f	9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190833	9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190837	9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.19083b	9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.19083f	9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190843	9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190847	e6 0a		inc $0a		                inc $0A
.190849	e8		inx		                inx
.19084a	e0 00 04	cpx #$0400	                cpx #$0400
.19084d	f0 03		beq $190852	                beq iinit_lut_exit
.19084f	82 4e ff	brl $1907a0	                brl iinit_lut_loop
.190852					iinit_lut_exit
.190852	c2 30		rep #$30	                REP #$30        ; set A&X long
.190854	fa		plx		                PLX
.190855	68		pla		                PLA
.190856	6b		rtl		                RTL
.190857	48		pha		IINITVKYTXTMODE PHA
.190858	e2 20		sep #$20	                SEP #$20        ; set A short
.19085a	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En      ;Okay, this Enables the Text Mode (Video Display)
.19085c	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.190860	a9 20		lda #$20	                LDA #$20
.190862	8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190866	8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.19086a	a9 00		lda #$00	                LDA #$00
.19086c	8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190870	a9 01		lda #$01	                LDA #Border_Ctrl_Enable   ; Enable the Border
.190872	8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190876	a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190878	8f 00 00 af	sta $af0000	                STA MASTER_CTRL_REG_L
.19087c	c2 30		rep #$30	                REP #$30        ; set A&X long
.19087e	68		pla		                PLA
.19087f	6b		rtl		                RTL
.190880					IINITVKYGRPMODE
.190880	48		pha		                PHA
.190881	e2 20		sep #$20	                SEP #$20        ; set A short
.190883	a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190885	8f 40 01 af	sta $af0140	                STA @lBM_CONTROL_REG
.190889	a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.19088b	8f 41 01 af	sta $af0141	                STA @lBM_START_ADDY_L
.19088f	a9 c0		lda #$c0	                LDA #$C0
.190891	8f 42 01 af	sta $af0142	                STA @lBM_START_ADDY_M
.190895	a9 00		lda #$00	                LDA #$00
.190897	8f 43 01 af	sta $af0143	                STA @lBM_START_ADDY_H ; This address is always base from
.19089b	a9 80		lda #$80	                LDA #$80
.19089d	8f 44 01 af	sta $af0144	                STA BM_X_SIZE_L
.1908a1	a9 02		lda #$02	                LDA #$02
.1908a3	8f 45 01 af	sta $af0145	                STA BM_X_SIZE_H         ; $0280 = 640
.1908a7	a9 e0		lda #$e0	                LDA #$E0
.1908a9	8f 46 01 af	sta $af0146	                STA BM_Y_SIZE_L
.1908ad	a9 01		lda #$01	                LDA #$01
.1908af	8f 47 01 af	sta $af0147	                STA BM_Y_SIZE_H         ; $01E0 = 480
.1908b3	c2 30		rep #$30	                REP #$30        ; set A&X long
.1908b5	68		pla		                PLA
.1908b6	6b		rtl		                RTL
.1908b7					IINITTILEMODE
.1908b7	6b		rtl		                RTL
.1908b8	48		pha		IINITSPRITE     PHA
.1908b9	e2 20		sep #$20	                SEP #$20        ; set A short
.1908bb	a9 03		lda #$03	                LDA #$03    ; Enable 17 Sprites
.1908bd	8f 00 02 af	sta $af0200	                STA SP00_CONTROL_REG
.1908c1	8f 08 02 af	sta $af0208	                STA SP01_CONTROL_REG
.1908c5	8f 10 02 af	sta $af0210	                STA SP02_CONTROL_REG
.1908c9	8f 18 02 af	sta $af0218	                STA SP03_CONTROL_REG
.1908cd	8f 20 02 af	sta $af0220	                STA SP04_CONTROL_REG
.1908d1	8f 28 02 af	sta $af0228	                STA SP05_CONTROL_REG
.1908d5	8f 30 02 af	sta $af0230	                STA SP06_CONTROL_REG
.1908d9	8f 38 02 af	sta $af0238	                STA SP07_CONTROL_REG
.1908dd	8f 40 02 af	sta $af0240	                STA SP08_CONTROL_REG
.1908e1	8f 48 02 af	sta $af0248	                STA SP09_CONTROL_REG
.1908e5	8f 50 02 af	sta $af0250	                STA SP10_CONTROL_REG
.1908e9	8f 58 02 af	sta $af0258	                STA SP11_CONTROL_REG
.1908ed	8f 60 02 af	sta $af0260	                STA SP12_CONTROL_REG
.1908f1	8f 68 02 af	sta $af0268	                STA SP13_CONTROL_REG
.1908f5	8f 70 02 af	sta $af0270	                STA SP14_CONTROL_REG
.1908f9	8f 78 02 af	sta $af0278	                STA SP15_CONTROL_REG
.1908fd	8f 80 02 af	sta $af0280	                STA SP16_CONTROL_REG
.190901	a9 09		lda #$09	                LDA #$09
.190903	8f 03 02 af	sta $af0203	                STA SP00_ADDY_PTR_H
.190907	8f 0b 02 af	sta $af020b	                STA SP01_ADDY_PTR_H
.19090b	8f 13 02 af	sta $af0213	                STA SP02_ADDY_PTR_H
.19090f	8f 1b 02 af	sta $af021b	                STA SP03_ADDY_PTR_H
.190913	8f 23 02 af	sta $af0223	                STA SP04_ADDY_PTR_H
.190917	8f 2b 02 af	sta $af022b	                STA SP05_ADDY_PTR_H
.19091b	8f 33 02 af	sta $af0233	                STA SP06_ADDY_PTR_H
.19091f	8f 3b 02 af	sta $af023b	                STA SP07_ADDY_PTR_H
.190923	8f 43 02 af	sta $af0243	                STA SP08_ADDY_PTR_H
.190927	8f 4b 02 af	sta $af024b	                STA SP09_ADDY_PTR_H
.19092b	8f 53 02 af	sta $af0253	                STA SP10_ADDY_PTR_H
.19092f	8f 5b 02 af	sta $af025b	                STA SP11_ADDY_PTR_H
.190933	8f 63 02 af	sta $af0263	                STA SP12_ADDY_PTR_H
.190937	8f 6b 02 af	sta $af026b	                STA SP13_ADDY_PTR_H
.19093b	8f 73 02 af	sta $af0273	                STA SP14_ADDY_PTR_H
.19093f	8f 7b 02 af	sta $af027b	                STA SP15_ADDY_PTR_H
.190943	8f 83 02 af	sta $af0283	                STA SP16_ADDY_PTR_H
.190947	a9 00		lda #$00	                LDA #$00
.190949	8f 02 02 af	sta $af0202	                STA SP00_ADDY_PTR_M
.19094d	a9 04		lda #$04	                LDA #$04
.19094f	8f 0a 02 af	sta $af020a	                STA SP01_ADDY_PTR_M
.190953	a9 08		lda #$08	                LDA #$08
.190955	8f 12 02 af	sta $af0212	                STA SP02_ADDY_PTR_M
.190959	a9 0c		lda #$0c	                LDA #$0C
.19095b	8f 1a 02 af	sta $af021a	                STA SP03_ADDY_PTR_M
.19095f	a9 10		lda #$10	                LDA #$10
.190961	8f 22 02 af	sta $af0222	                STA SP04_ADDY_PTR_M
.190965	a9 14		lda #$14	                LDA #$14
.190967	8f 2a 02 af	sta $af022a	                STA SP05_ADDY_PTR_M
.19096b	a9 18		lda #$18	                LDA #$18
.19096d	8f 32 02 af	sta $af0232	                STA SP06_ADDY_PTR_M
.190971	a9 1c		lda #$1c	                LDA #$1C
.190973	8f 3a 02 af	sta $af023a	                STA SP07_ADDY_PTR_M
.190977	a9 20		lda #$20	                LDA #$20
.190979	8f 42 02 af	sta $af0242	                STA SP08_ADDY_PTR_M
.19097d	a9 24		lda #$24	                LDA #$24
.19097f	8f 4a 02 af	sta $af024a	                STA SP09_ADDY_PTR_M
.190983	a9 28		lda #$28	                LDA #$28
.190985	8f 52 02 af	sta $af0252	                STA SP10_ADDY_PTR_M
.190989	a9 2c		lda #$2c	                LDA #$2C
.19098b	8f 5a 02 af	sta $af025a	                STA SP11_ADDY_PTR_M
.19098f	a9 30		lda #$30	                LDA #$30
.190991	8f 62 02 af	sta $af0262	                STA SP12_ADDY_PTR_M
.190995	a9 34		lda #$34	                LDA #$34
.190997	8f 6a 02 af	sta $af026a	                STA SP13_ADDY_PTR_M
.19099b	a9 38		lda #$38	                LDA #$38
.19099d	8f 72 02 af	sta $af0272	                STA SP14_ADDY_PTR_M
.1909a1	a9 3c		lda #$3c	                LDA #$3C
.1909a3	8f 7a 02 af	sta $af027a	                STA SP15_ADDY_PTR_M
.1909a7	a9 40		lda #$40	                LDA #$40
.1909a9	8f 82 02 af	sta $af0282	                STA SP16_ADDY_PTR_M
.1909ad	a9 00		lda #$00	                LDA #$00
.1909af	8f 01 02 af	sta $af0201	                STA SP00_ADDY_PTR_L
.1909b3	8f 09 02 af	sta $af0209	                STA SP01_ADDY_PTR_L
.1909b7	8f 11 02 af	sta $af0211	                STA SP02_ADDY_PTR_L
.1909bb	8f 19 02 af	sta $af0219	                STA SP03_ADDY_PTR_L
.1909bf	8f 21 02 af	sta $af0221	                STA SP04_ADDY_PTR_L
.1909c3	8f 29 02 af	sta $af0229	                STA SP05_ADDY_PTR_L
.1909c7	8f 31 02 af	sta $af0231	                STA SP06_ADDY_PTR_L
.1909cb	8f 39 02 af	sta $af0239	                STA SP07_ADDY_PTR_L
.1909cf	8f 41 02 af	sta $af0241	                STA SP08_ADDY_PTR_L
.1909d3	8f 49 02 af	sta $af0249	                STA SP09_ADDY_PTR_L
.1909d7	8f 51 02 af	sta $af0251	                STA SP10_ADDY_PTR_L
.1909db	8f 59 02 af	sta $af0259	                STA SP11_ADDY_PTR_L
.1909df	8f 61 02 af	sta $af0261	                STA SP12_ADDY_PTR_L
.1909e3	8f 69 02 af	sta $af0269	                STA SP13_ADDY_PTR_L
.1909e7	8f 71 02 af	sta $af0271	                STA SP14_ADDY_PTR_L
.1909eb	8f 79 02 af	sta $af0279	                STA SP15_ADDY_PTR_L
.1909ef	8f 81 02 af	sta $af0281	                STA SP16_ADDY_PTR_L
.1909f3	68		pla		                PLA
.1909f4	6b		rtl		                RTL
.1909f5					IINITFONTSET
.1909f5	e2 20		sep #$20	                SEP #$20        ; set A short
.1909f7	c2 10		rep #$10	                REP #$10        ; set X long
.1909f9	a2 00 00	ldx #$0000	                LDX #$0000
.1909fc					initFontsetbranch0
.1909fc	bf 00 f0 1f	lda $1ff000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.190a00	9f 00 80 af	sta $af8000,x	                STA @lFONT_MEMORY_BANK0,X ; Vicky FONT RAM Bank
.190a04	e8		inx		                INX
.190a05	e0 00 08	cpx #$0800	                CPX #$0800
.190a08	d0 f2		bne $1909fc	                BNE initFontsetbranch0
.190a0a	ea		nop		                NOP
.190a0b	a2 00 00	ldx #$0000	                LDX #$0000
.190a0e					initFontsetbranch1
.190a0e	bf 00 f8 1f	lda $1ff800,x	                LDA @lFONT_4_BANK1,X
.190a12	9f 00 88 af	sta $af8800,x	                STA @lFONT_MEMORY_BANK1,X ; Vicky FONT RAM Bank
.190a16	e8		inx		                INX
.190a17	e0 00 08	cpx #$0800	                CPX #$0800
.190a1a	d0 f2		bne $190a0e	                BNE initFontsetbranch1
.190a1c	ea		nop		                NOP
.190a1d	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a1f	6b		rtl		                RTL
.190a20					INITMOUSEPOINTER
.190a20	e2 20		sep #$20	                SEP #$20        ; set A short
.190a22	c2 10		rep #$10	                REP #$10        ; set X long
.190a24	a2 00 00	ldx #$0000	                LDX #$0000
.190a27					FILL_MOUSE_MARKER
.190a27	bf 00 1c 19	lda $191c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190a2b	9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190a2f	e8		inx		                INX
.190a30	e0 00 01	cpx #$0100	                CPX #$0100
.190a33	d0 f2		bne $190a27	                BNE FILL_MOUSE_MARKER
.190a35	ea		nop		                nop
.190a36	a9 01		lda #$01	                LDA #$01
.190a38	8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190a3c	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a3e	6b		rtl		                RTL
.190a3f	48		pha		IINITCURSOR     PHA
.190a40	e2 20		sep #$20	                SEP #$20        ; set A short
.190a42	a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190a44	8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190a48	a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190a4a	8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190a4e	c2 30		rep #$30	                REP #$30        ; set A&X long
.190a50	a9 00 00	lda #$0000	                LDA #$0000;
.190a53	8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190a57	a9 06 00	lda #$0006	                LDA #$0006;
.190a5a	8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190a5e	68		pla		                PLA
.190a5f	6b		rtl		                RTL
.190a60	0b		phd		IINITSUPERIO	  PHD
.190a61	08		php		                PHP
.190a62	48		pha		                PHA
.190a63	e2 20		sep #$20	                SEP #$20        ; set A short
.190a65	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a67	8f 23 11 af	sta $af1123	                STA GP10_REG
.190a6b	af 23 11 af	lda $af1123	                LDA GP10_REG
.190a6f	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a71	8f 24 11 af	sta $af1124	                STA GP11_REG
.190a75	a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a77	8f 25 11 af	sta $af1125	                STA GP12_REG
.190a7b	a9 01		lda #$01	        				LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190a7d	8f 26 11 af	sta $af1126	        				STA GP13_REG
.190a81	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190a83	8f 27 11 af	sta $af1127	        				STA GP14_REG
.190a87	a9 05		lda #$05	        				LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190a89	8f 28 11 af	sta $af1128	        				STA GP15_REG
.190a8d	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190a8f	8f 29 11 af	sta $af1129	        				STA GP16_REG
.190a93	a9 05		lda #$05	        				LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190a95	8f 2a 11 af	sta $af112a	        				STA GP17_REG
.190a99	a9 00		lda #$00	        				LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190a9b	8f 2b 11 af	sta $af112b	        				STA GP20_REG
.190a9f	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190aa1	8f 2f 11 af	sta $af112f					        STA GP24_REG
.190aa5	a9 05		lda #$05					        LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190aa7	8f 30 11 af	sta $af1130					        STA GP25_REG
.190aab	a9 84		lda #$84				        	LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190aad	8f 31 11 af	sta $af1131					        STA GP26_REG
.190ab1	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190ab3	8f 33 11 af	sta $af1133					        STA GP30_REG
.190ab7	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190ab9	8f 34 11 af	sta $af1134					        STA GP31_REG
.190abd	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190abf	8f 35 11 af	sta $af1135					        STA GP32_REG
.190ac3	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190ac5	8f 36 11 af	sta $af1136					        STA GP33_REG
.190ac9	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190acb	8f 37 11 af	sta $af1137					        STA GP34_REG
.190acf	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190ad1	8f 38 11 af	sta $af1138					        STA GP35_REG
.190ad5	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190ad7	8f 39 11 af	sta $af1139					        STA GP36_REG
.190adb	a9 01		lda #$01					        LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190add	8f 3a 11 af	sta $af113a					        STA GP37_REG
.190ae1	a9 01		lda #$01					        LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190ae3	8f 3d 11 af	sta $af113d					        STA GP42_REG
.190ae7	a9 01		lda #$01				          LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190ae9	8f 3e 11 af	sta $af113e					        STA GP43_REG
.190aed	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190aef	8f 3f 11 af	sta $af113f					        STA GP50_REG
.190af3	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190af5	8f 40 11 af	sta $af1140					        STA GP51_REG
.190af9	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190afb	8f 41 11 af	sta $af1141					        STA GP52_REG
.190aff	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190b01	8f 42 11 af	sta $af1142					        STA GP53_REG
.190b05	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190b07	8f 43 11 af	sta $af1143					        STA GP54_REG
.190b0b	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190b0d	8f 44 11 af	sta $af1144					        STA GP55_REG
.190b11	a9 05		lda #$05					        LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190b13	8f 45 11 af	sta $af1145					        STA GP56_REG
.190b17	a9 04		lda #$04					        LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190b19	8f 46 11 af	sta $af1146					        STA GP57_REG
.190b1d	a9 84		lda #$84					        LDA #$84		;(C256 - LED1) - Open Drain - Output
.190b1f	8f 47 11 af	sta $af1147					        STA GP60_REG
.190b23	a9 84		lda #$84					        LDA #$84		;(C256 - LED2) - Open Drain - Output
.190b25	8f 48 11 af	sta $af1148					        STA GP61_REG
.190b29	a9 00		lda #$00				        	LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190b2b	8f 4b 11 af	sta $af114b					        STA GP1_REG
.190b2f	a9 01		lda #$01					        LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190b31	8f 4c 11 af	sta $af114c					        STA GP2_REG
.190b35	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190b37	8f 4d 11 af	sta $af114d					        STA GP3_REG
.190b3b	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190b3d	8f 4e 11 af	sta $af114e					        STA GP4_REG
.190b41	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190b43	8f 4f 11 af	sta $af114f					        STA GP5_REG
.190b47	a9 00		lda #$00					        LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190b49	8f 50 11 af	sta $af1150					        STA GP6_REG
.190b4d	a9 01		lda #$01					        LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190b4f	8f 5d 11 af	sta $af115d					        STA LED1_REG
.190b53	a9 02		lda #$02					        LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190b55	8f 5e 11 af	sta $af115e					        STA LED2_REG
.190b59	c2 20		rep #$20	                REP #$20        ; set A long
.190b5b	68		pla		                PLA
.190b5c	28		plp						        PLP
.190b5d	2b		pld					        	PLD
.190b5e	6b		rtl		                RTL
.190b5f	0b		phd		IINITKEYBOARD	  PHD
.190b60	08		php						        PHP
.190b61	48		pha						        PHA
.190b62	da		phx						        PHX
.190b63	e2 20		sep #$20	                SEP #$20        ; set A short
.190b65	c2 10		rep #$10	                REP #$10        ; set X long
.190b67	18		clc		                CLC
.190b68	20 34 0c	jsr $190c34	                JSR Poll_Inbuf ;
.190b6b	a9 aa		lda #$aa					        LDA #$AA			;Send self test command
.190b6d	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b71	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190b74	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Check self test result
.190b78	c9 55		cmp #$55					        CMP #$55
.190b7a	f0 03		beq $190b7f					        BEQ	passAAtest
.190b7c	82 a5 00	brl $190c24	                BRL initkb_loop_out
.190b7f	a2 d1 13	ldx #$13d1	passAAtest      LDX #<>pass_tst0xAAmsg
.190b82	22 76 05 19	jsl $190576	                JSL IPRINT      ; print Message
.190b86	a9 ab		lda #$ab					        LDA #$AB			;Send test Interface command
.190b88	8f 64 10 af	sta $af1064					        STA KBD_CMD_BUF
.190b8c	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190b8f	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		;Display Interface test results
.190b93	c9 00		cmp #$00					        CMP #$00			;Should be 00
.190b95	f0 03		beq $190b9a					        BEQ	passABtest
.190b97	82 8a 00	brl $190c24	                BRL initkb_loop_out
.190b9a	a2 ea 13	ldx #$13ea	passABtest      LDX #<>pass_tst0xABmsg
.190b9d	22 76 05 19	jsl $190576	                JSL IPRINT       ; print Message
.190ba1	a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.190ba3	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190ba7	20 34 0c	jsr $190c34	                JSR Poll_Inbuf ;
.190baa	a9 69		lda #$69	                LDA #%01101001      ; Enable Interrupt
.190bac	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190bb0	20 34 0c	jsr $190c34	                JSR Poll_Inbuf ;
.190bb3	a2 03 14	ldx #$1403	                LDX #<>pass_cmd0x60msg
.190bb6	22 76 05 19	jsl $190576	                JSL IPRINT       ; print Message
.190bba	a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.190bbc	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190bc0	a2 ff ff	ldx #$ffff	                LDX #$FFFF
.190bc3	ca		dex		DLY_LOOP1       DEX
.190bc4	ea		nop		                NOP
.190bc5	ea		nop		                NOP
.190bc6	ea		nop		                NOP
.190bc7	ea		nop		                NOP
.190bc8	ea		nop		                NOP
.190bc9	ea		nop		                NOP
.190bca	ea		nop		                NOP
.190bcb	ea		nop		                NOP
.190bcc	e0 00 00	cpx #$0000	                CPX #$0000
.190bcf	d0 f2		bne $190bc3	                BNE DLY_LOOP1
.190bd1	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190bd4	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.190bd8	a2 17 14	ldx #$1417	                LDX #<>pass_cmd0xFFmsg
.190bdb	22 76 05 19	jsl $190576	                JSL IPRINT       ; print Message
.190bdf					DO_CMD_F4_AGAIN
.190bdf	20 34 0c	jsr $190c34	                JSR Poll_Inbuf ;
.190be2	a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.190be4	8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.190be8	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190beb	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190bef	c9 fa		cmp #$fa	                CMP #$FA
.190bf1	d0 ec		bne $190bdf	                BNE DO_CMD_F4_AGAIN
.190bf3	20 4a 0c	jsr $190c4a	                JSR INIT_MOUSE
.190bf6	af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.190bfa	29 80		and #$80	                AND #FNX0_INT07_MOUSE
.190bfc	8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.190c00	af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.190c04	29 01		and #$01	                AND #FNX1_INT00_KBD
.190c06	8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.190c0a	af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.190c0e	29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.190c10	8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190c14	af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.190c18	29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.190c1a	8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190c1e	a2 4d 14	ldx #$144d	                LDX #<>Success_kb_init
.190c21	38		sec		                SEC
.190c22	b0 03		bcs $190c27	                BCS InitSuccess
.190c24	a2 5f 14	ldx #$145f	initkb_loop_out LDX #<>Failed_kb_init
.190c27	22 76 05 19	jsl $190576	InitSuccess     JSL IPRINT       ; print Message
.190c2b	c2 20		rep #$20	                REP #$20        ; set A long
.190c2d	c2 10		rep #$10	                REP #$10        ; set X long
.190c2f	fa		plx		                PLX
.190c30	68		pla		                PLA
.190c31	28		plp						        PLP
.190c32	2b		pld						        PLD
.190c33	6b		rtl		                RTL
.190c34					Poll_Inbuf
.190c34	af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.190c38	29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190c3a	c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190c3c	f0 f6		beq $190c34					        BEQ Poll_Inbuf
.190c3e	60		rts		                RTS
.190c3f					Poll_Outbuf
.190c3f	af 64 10 af	lda $af1064	                LDA STATUS_PORT
.190c43	29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190c45	c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190c47	d0 f6		bne $190c3f	                BNE Poll_Outbuf
.190c49	60		rts		                RTS
.190c4a					INIT_MOUSE
.190c4a	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190c4d	a9 a8		lda #$a8	                LDA #$A8          ; Enable the second PS2 Channel
.190c4f	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c53					DO_CMD_A9_AGAIN
.190c53	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190c56	a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.190c58	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c5c	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190c5f	af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.190c63	c9 00		cmp #$00	                CMP #$00
.190c65	d0 ec		bne $190c53	                BNE DO_CMD_A9_AGAIN
.190c67	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190c6a	a9 20		lda #$20	                LDA #$20
.190c6c	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c70	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190c73	af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF
.190c77	09 02		ora #$02	                ORA #$02
.190c79	48		pha		                PHA
.190c7a	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190c7d	a9 60		lda #$60	                LDA #$60
.190c7f	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190c83	20 34 0c	jsr $190c34	                JSR Poll_Inbuf ;
.190c86	68		pla		                PLA
.190c87	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190c8b	a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.190c8d	20 b0 0c	jsr $190cb0	                JSR MOUSE_WRITE
.190c90	20 c3 0c	jsr $190cc3	                JSR MOUSE_READ
.190c93	a9 e8		lda #$e8	                LDA #$E8
.190c95	20 b0 0c	jsr $190cb0	                JSR MOUSE_WRITE
.190c98	20 c3 0c	jsr $190cc3	                JSR MOUSE_READ
.190c9b	a9 00		lda #$00	                LDA #$00
.190c9d	20 b0 0c	jsr $190cb0	                JSR MOUSE_WRITE
.190ca0	20 c3 0c	jsr $190cc3	                JSR MOUSE_READ
.190ca3	a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.190ca5	20 b0 0c	jsr $190cb0	                JSR MOUSE_WRITE
.190ca8	20 c3 0c	jsr $190cc3	                JSR MOUSE_READ
.190cab	a9 00		lda #$00	                LDA #$00
.190cad	85 e0		sta $e0		                STA MOUSE_PTR
.190caf	60		rts		                RTS
.190cb0					MOUSE_WRITE
.190cb0	48		pha		                PHA
.190cb1	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190cb4	a9 d4		lda #$d4	                LDA #$D4
.190cb6	8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.190cba	20 34 0c	jsr $190c34	                JSR Poll_Inbuf
.190cbd	68		pla		                PLA
.190cbe	8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.190cc2	60		rts		                RTS
.190cc3					MOUSE_READ
.190cc3	20 3f 0c	jsr $190c3f	                JSR Poll_Outbuf ;
.190cc6	af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF
.190cca	60		rts		                RTS
.190ccb	48		pha		INITRTC         PHA
.190ccc	e2 20		sep #$20	                SEP #$20        ; set A short
.190cce	af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL
.190cd2	00		brk #		                BRK
.190cd3	c2 20		rep #$20	                REP #$20        ; set A long
.190cd5	68		pla		                PLA
.190cd6	6b		rtl		                RTL
.190cd7	48		pha		ITESTSID        PHA
.190cd8	e2 20		sep #$20	                SEP #$20        ; set A short
.190cda	a9 0f		lda #$0f	                LDA #$0F
.190cdc	8f 18 e4 af	sta $afe418	                STA SID0_MODE_VOL
.190ce0	a9 be		lda #$be	                LDA #$BE
.190ce2	8f 05 e4 af	sta $afe405	                STA SID0_V1_ATCK_DECY
.190ce6	a9 f8		lda #$f8	                LDA #$F8
.190ce8	8f 06 e4 af	sta $afe406	                STA SID0_V1_SSTN_RLSE
.190cec	a9 11		lda #$11	                LDA #$11
.190cee	8f 01 e4 af	sta $afe401	                STA SID0_V1_FREQ_HI
.190cf2	a9 25		lda #$25	                LDA #$25
.190cf4	8f 00 e4 af	sta $afe400	                STA SID0_V1_FREQ_LO
.190cf8	a9 11		lda #$11	                LDA #$11
.190cfa	8f 04 e4 af	sta $afe404	                STA SID0_V1_CTRL
.190cfe	c2 20		rep #$20	                REP #$20        ; set A long
.190d00	68		pla		                PLA
.190d01	6b		rtl		                RTL
.190d02	48		pha		IINITCODEC      PHA
.190d03	c2 20		rep #$20	                REP #$20        ; set A long
.190d05	a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190d08	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d0c	a9 01 00	lda #$0001	                LDA #$0001
.190d0f	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d13	20 5f 0d	jsr $190d5f	                JSR CODEC_TRF_FINISHED
.190d16	a9 03 2a	lda #$2a03	                LDA #%0010101000000011       ;R21 - Enable All the Analog In
.190d19	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d1d	a9 01 00	lda #$0001	                LDA #$0001
.190d20	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d24	20 5f 0d	jsr $190d5f	                JSR CODEC_TRF_FINISHED
.190d27	a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d2a	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d2e	a9 01 00	lda #$0001	                LDA #$0001
.190d31	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d35	20 5f 0d	jsr $190d5f	                JSR CODEC_TRF_FINISHED
.190d38	a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d3b	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d3f	a9 01 00	lda #$0001	                LDA #$0001
.190d42	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d46	20 5f 0d	jsr $190d5f	                JSR CODEC_TRF_FINISHED
.190d49	68		pla		                PLA
.190d4a	6b		rtl		                RTL
.190d4b					IRESETCODEC
.190d4b	c2 20		rep #$20	                REP #$20        ; set A long
.190d4d	a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d50	8f 20 e8 af	sta $afe820	                STA CODEC_DATA_LO
.190d54	a9 01 00	lda #$0001	                LDA #$0001
.190d57	8f 22 e8 af	sta $afe822	                STA CODEC_WR_CTRL             ; Execute the Write
.190d5b	20 5f 0d	jsr $190d5f	                JSR CODEC_TRF_FINISHED
.190d5e	6b		rtl		                RTL
.190d5f					CODEC_TRF_FINISHED
.190d5f	e2 20		sep #$20	                SEP #$20        ; set A short
.190d61	af 22 e8 af	lda $afe822	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d65	29 01		and #$01	                AND #$01
.190d67	c9 01		cmp #$01	                CMP #$01
.190d69	f0 f6		beq $190d61	                BEQ CODEC_LOOP
.190d6b	c2 20		rep #$20	                REP #$20        ; set A long
.190d6d	60		rts		                RTS
.190d6e					IBM_FILL_SCREEN
.190d6e	c2 30		rep #$30	                REP #$30        ; set A&X long
.190d70	a9 00 00	lda #$0000	                LDA #$0000
.190d73	a2 00 00	ldx #$0000	                LDX #$0000
.190d76					BM_FILL_SCREEN_LOOPY
.190d76	a0 00 00	ldy #$0000	                LDY #$0000
.190d79	e2 20		sep #$20	                SEP #$20        ; set A short
.190d7b					BM_FILL_SCREEN_LOOPX
.190d7b	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d7d	c8		iny		                INY
.190d7e	c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d80	d0 f9		bne $190d7b	                BNE BM_FILL_SCREEN_LOOPX
.190d82	20 8d 0d	jsr $190d8d	                JSR BM_FILL_COMPUTE_Y_DST
.190d85	e8		inx		                INX
.190d86	e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d88	d0 ec		bne $190d76	                BNE BM_FILL_SCREEN_LOOPY
.190d8a	c2 30		rep #$30	                REP #$30        ; set A&X long
.190d8c	6b		rtl		                RTL
.190d8d					BM_FILL_COMPUTE_Y_DST
.190d8d	c2 20		rep #$20	                REP #$20        ; set A long
.190d8f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190d91	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190d95	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190d97	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190d9b	a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190d9e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190da2	a9 00 00	lda #$0000	                LDA #$0000
.190da5	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190da9	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dad	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190daf	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190db3	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190db5	a9 00 00	lda #$0000	                LDA #$0000
.190db8	60		rts		                RTS
.190db9					IBMP_PARSER
.190db9	c2 30		rep #$30	                REP #$30        ; set A&X long
.190dbb	a0 00 00	ldy #$0000	                LDY #$0000
.190dbe	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dc0	c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dc3	f0 03		beq $190dc8	                BEQ IBMP_PARSER_CONT
.190dc5	82 04 01	brl $190ecc	                BRL BMP_PARSER_END_WITH_ERROR
.190dc8					IBMP_PARSER_CONT
.190dc8	a0 02 00	ldy #$0002	                LDY #$0002
.190dcb	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190dcd	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190dd1	a0 04 00	ldy #$0004	                LDY #$0004
.190dd4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190dd6	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190dda	a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190ddd	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190de1	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190de5	18		clc		                CLC
.190de6	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dea	85 50		sta $50		                STA BMP_FILE_SIZE
.190dec	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190df0	85 52		sta $52		                STA BMP_FILE_SIZE+2
.190df2	a0 12 00	ldy #$0012	                LDY #$0012
.190df5	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190df7	85 40		sta $40		                STA BMP_X_SIZE
.190df9	a0 16 00	ldy #$0016	                LDY #$0016
.190dfc	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190dfe	85 42		sta $42		                STA BMP_Y_SIZE
.190e00	a0 2e 00	ldy #$002e	                LDY #$002E
.190e03	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e05	0a		asl a		                ASL A; Multiply by 2
.190e06	0a		asl a		                ASL A; Multiply by 2
.190e07	85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e09	e0 00 00	cpx #$0000	                CPX #$0000
.190e0c	d0 05		bne $190e13	                BNE BMP_LUT1_PICK
.190e0e	20 d4 0e	jsr $190ed4	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e11	80 08		bra $190e1b	                BRA DONE_TRANSFER_LUT;
.190e13					  BMP_LUT1_PICK
.190e13	e0 01 00	cpx #$0001	                CPX #$0001
.190e16	d0 03		bne $190e1b	                BNE BMP_LUT2_PICK
.190e18	20 04 0f	jsr $190f04	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e1b					  BMP_LUT2_PICK
.190e1b					  DONE_TRANSFER_LUT
.190e1b	a5 56		lda $56		                LDA BMP_POSITION_Y
.190e1d	8f 00 01 00	sta $000100	                STA @lM0_OPERAND_A
.190e21	a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e23	8f 02 01 00	sta $000102	                STA @lM0_OPERAND_B
.190e27	af 04 01 00	lda $000104	                LDA @lM0_RESULT
.190e2b	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e2f	af 06 01 00	lda $000106	                LDA @lM0_RESULT+2
.190e33	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e37	a5 54		lda $54		                LDA BMP_POSITION_X
.190e39	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e3d	a9 00 00	lda #$0000	                LDA #$0000
.190e40	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e44	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e48	85 f0		sta $f0		                STA USER_TEMP
.190e4a	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e4e	85 f2		sta $f2		                STA USER_TEMP+2
.190e50	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e52	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e56	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e58	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e5c	a5 f0		lda $f0		                LDA USER_TEMP
.190e5e	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e62	a5 f2		lda $f2		                LDA USER_TEMP+2
.190e64	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e68	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e6c	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e6e	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e72	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e74	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e76	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e7a	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e7c	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e80	a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e82	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e86	a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e88	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e8c	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e90	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190e92	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e96	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190e98	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190e9a	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e9e	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190ea0	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ea4	18		clc		                CLC
.190ea5	a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190ea7	49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190eaa	69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ead	8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190eb1	a9 ff ff	lda #$ffff	                LDA #$FFFF
.190eb4	8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190eb8	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ebc	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ebe	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ec2	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190ec4	20 34 0f	jsr $190f34	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ec7	a2 9b 14	ldx #$149b	                LDX #<>bmp_parser_msg0
.190eca	80 03		bra $190ecf	                BRA BMP_PARSER_END_NO_ERROR
.190ecc					BMP_PARSER_END_WITH_ERROR
.190ecc	a2 87 14	ldx #$1487	                LDX #<>bmp_parser_err0
.190ecf					BMP_PARSER_END_NO_ERROR
.190ecf	22 76 05 19	jsl $190576	                JSL IPRINT       ; print the first line
.190ed3	6b		rtl		                RTL
.190ed4					BMP_PARSER_UPDATE_LUT0
.190ed4	38		sec		                SEC
.190ed5	a0 7a 00	ldy #$007a	                LDY #$007A
.190ed8	a2 00 00	ldx #$0000	                LDX #$0000
.190edb	e2 20		sep #$20	                SEP #$20        ; set A short
.190edd					BMP_PARSER_UPDATE_LOOP
.190edd	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190edf	9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190ee3	c8		iny		                INY
.190ee4	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190ee6	9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190eea	c8		iny		                INY
.190eeb	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190eed	9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190ef1	c8		iny		                INY
.190ef2	a9 80		lda #$80	                LDA #$80
.190ef4	9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190ef8	c8		iny		                INY ; For the Alpha Value, nobody cares
.190ef9	e8		inx		                INX
.190efa	e8		inx		                INX
.190efb	e8		inx		                INX
.190efc	e8		inx		                INX
.190efd	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190eff	d0 dc		bne $190edd	                BNE BMP_PARSER_UPDATE_LOOP
.190f01	c2 20		rep #$20	                REP #$20        ; set A long
.190f03	60		rts		                RTS
.190f04					BMP_PARSER_UPDATE_LUT1
.190f04	38		sec		                SEC
.190f05	a0 36 00	ldy #$0036	                LDY #$0036
.190f08	a2 00 00	ldx #$0000	                LDX #$0000
.190f0b	e2 20		sep #$20	                SEP #$20        ; set A short
.190f0d					PALETTE_LUT1_LOOP
.190f0d	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f0f	9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f13	c8		iny		                INY
.190f14	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f16	9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f1a	c8		iny		                INY
.190f1b	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f1d	9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f21	c8		iny		                INY
.190f22	a9 80		lda #$80	                LDA #$80
.190f24	9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f28	c8		iny		                INY ; For the Alpha Value, nobody cares
.190f29	e8		inx		                INX
.190f2a	e8		inx		                INX
.190f2b	e8		inx		                INX
.190f2c	e8		inx		                INX
.190f2d	e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f2f	d0 dc		bne $190f0d	                BNE PALETTE_LUT1_LOOP
.190f31	c2 20		rep #$20	                REP #$20        ; set A long
.190f33	60		rts		                RTS
.190f34					BMP_PARSER_DMA_SHIT_OUT
.190f34	a2 00 00	ldx #$0000	                LDX #$0000
.190f37					BMP_PARSER_LOOPY
.190f37	a0 00 00	ldy #$0000	                LDY #$0000
.190f3a	e2 20		sep #$20	                SEP #$20        ; set A short
.190f3c					BMP_PARSER_LOOPX
.190f3c	b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f3e	97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f40	c8		iny		                INY
.190f41	c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f43	d0 f7		bne $190f3c	                BNE BMP_PARSER_LOOPX
.190f45	20 51 0f	jsr $190f51	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f48	20 6c 0f	jsr $190f6c	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f4b	e8		inx		                INX
.190f4c	e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f4e	d0 e7		bne $190f37	                BNE BMP_PARSER_LOOPY
.190f50	60		rts		                RTS
.190f51					BMP_PARSER_COMPUTE_Y_SRC
.190f51	c2 20		rep #$20	                REP #$20        ; set A long
.190f53	a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f55	8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f59	a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f5b	8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f5f	af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f63	85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f65	af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f69	85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f6b	60		rts		                RTS
.190f6c					BMP_PARSER_COMPUTE_Y_DST
.190f6c	c2 20		rep #$20	                REP #$20        ; set A long
.190f6e	18		clc		                CLC
.190f6f	a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f71	65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f73	85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f75	a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f77	69 00 00	adc #$0000	                ADC #$0000
.190f7a	85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f7c	60		rts		                RTS
.190f7d	00		brk #		IRESTORE        BRK ; Warm boot routine
.190f7e	00		brk #		ISCINIT         BRK ;
.190f7f	00		brk #		IIOINIT         BRK ;
.190f80	00		brk #		IPUTBLOCK       BRK ; Ouput a binary block to the currently selected channel
.190f81	00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.190f82	00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.190f83	00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.190f84	00		brk #		ICLOSE          BRK ; Close a channel
.190f85	00		brk #		ISETIN          BRK ; Set the current input channel
.190f86	00		brk #		ISETOUT         BRK ; Set the current output channel
.190f87	00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.190f88	00		brk #		IGETBLOCK       BRK ; Get a X byes from input channel. If Carry is set, wait. If Carry is clear, do not wait.
.190f89	00		brk #		IGETCH          BRK ; Get a character from the input channel. A=0 and Carry=1 if no data is wating
.190f8a	00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.190f8b	00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.190f8c	00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.190f8d	00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.190f8e	00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.190f8f	00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.190f90	00		brk #		IPRINTF         BRK ; Print a float value
.190f91	00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.190f92	00		brk #		IPRINTAI        BRK ; Prints integer value in A
.190f93	00		brk #		IPRINTAH        BRK ; Prints hex value in A. Printed value is 2 wide if M flag is 1, 4 wide if M=0
.190f94	00		brk #		IPUSHKEY        BRK ;
.190f95	00		brk #		IPUSHKEYS       BRK ;
.190f96	00		brk #		ICSRLEFT        BRK ;
.190f97	00		brk #		ICSRHOME        BRK ;
.190f98	00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.190f99	00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.190f9a					KERNEL_DATA
>190f9a	20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, "C256 FOENIX DEVELOPMENT SYSTEM",$0D
>190fa2	0b 0c 0b 0c 0b 0c 43 32 35 36 20 46 4f 45 4e 49
>190fb2	58 20 44 45 56 45 4c 4f 50 4d 45 4e 54 20 53 59
>190fc2	53 54 45 4d 0d
>190fc7	20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "May the Power of the 65C816 Bring You Joy!",$0D
>190fcf	0c 0b 0c 0b 0c 20 4d 61 79 20 74 68 65 20 50 6f
>190fdf	77 65 72 20 6f 66 20 74 68 65 20 36 35 43 38 31
>190fef	36 20 42 72 69 6e 67 20 59 6f 75 20 4a 6f 79 21
>190fff	0d
>191000	20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, "System Designed by: Stefany Allaire",$0D
>191008	0b 0c 0b 0c 20 20 53 79 73 74 65 6d 20 44 65 73
>191018	69 67 6e 65 64 20 62 79 3a 20 53 74 65 66 61 6e
>191028	79 20 41 6c 6c 61 69 72 65 0d
>191032	20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, "www.c256foenix.com",$0D
>19103a	0c 0b 0c 20 20 20 77 77 77 2e 63 32 35 36 66 6f
>19104a	65 6e 69 78 2e 63 6f 6d 0d
>191053	0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, $20, $20, $20, "2048KB CODE RAM  4096K VIDEO MEM",$0D, $00
>19105b	0b 0c 20 20 20 20 32 30 34 38 4b 42 20 43 4f 44
>19106b	45 20 52 41 4d 20 20 34 30 39 36 4b 20 56 49 44
>19107b	45 4f 20 4d 45 4d 0d 00
.191083					old_pc_style_stat
>191083	d6 c4 c4 c4 c4 c4 c4 c4		                .text $D6, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C2
>19108b	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>19109b	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c2
>1910a7	c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $B7, $0D
>1910af	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1910bf	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 b7 0d
>1910cb	ba 20 4d 61 69 6e 20 50		                .text $BA, " Main Processor     : 65C816      ",$B3," Base Memory Size     : 2048K     ",$BA, $0D
>1910d3	72 6f 63 65 73 73 6f 72 20 20 20 20 20 3a 20 36
>1910e3	35 43 38 31 36 20 20 20 20 20 20 b3 20 42 61 73
>1910f3	65 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20 20
>191103	20 20 3a 20 32 30 34 38 4b 20 20 20 20 20 ba 0d
>191113	ba 20 4e 75 6d 65 72 69		                .text $BA, " Numeric Processor  : CFP9518     ",$B3," Video Memory Size    : 4096K     ",$BA, $0D
>19111b	63 20 50 72 6f 63 65 73 73 6f 72 20 20 3a 20 43
>19112b	46 50 39 35 31 38 20 20 20 20 20 b3 20 56 69 64
>19113b	65 6f 20 4d 65 6d 6f 72 79 20 53 69 7a 65 20 20
>19114b	20 20 3a 20 34 30 39 36 4b 20 20 20 20 20 ba 0d
>19115b	ba 20 46 6c 6f 70 70 79		                .text $BA, " Floppy Driver A:   : Yes         ",$B3," Hard Disk C: Type    : None      ",$BA, $0D
>191163	20 44 72 69 76 65 72 20 41 3a 20 20 20 3a 20 59
>191173	65 73 20 20 20 20 20 20 20 20 20 b3 20 48 61 72
>191183	64 20 44 69 73 6b 20 43 3a 20 54 79 70 65 20 20
>191193	20 20 3a 20 4e 6f 6e 65 20 20 20 20 20 20 ba 0d
>1911a3	ba 20 53 44 43 61 72 64		                .text $BA, " SDCard Card Reader : Yes         ",$B3," Serial Port(s)       : $AF:13F8, ",$BA, $0D
>1911ab	20 43 61 72 64 20 52 65 61 64 65 72 20 3a 20 59
>1911bb	65 73 20 20 20 20 20 20 20 20 20 b3 20 53 65 72
>1911cb	69 61 6c 20 50 6f 72 74 28 73 29 20 20 20 20 20
>1911db	20 20 3a 20 24 41 46 3a 31 33 46 38 2c 20 ba 0d
>1911eb	ba 20 44 69 73 70 6c 61		                .text $BA, " Display Type       : VGA         ",$B3,"                        $AF:12F8  ",$BA, $0D
>1911f3	79 20 54 79 70 65 20 20 20 20 20 20 20 3a 20 56
>191203	47 41 20 20 20 20 20 20 20 20 20 b3 20 20 20 20
>191213	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>191223	20 20 20 20 24 41 46 3a 31 32 46 38 20 20 ba 0d
>191233	ba 20 46 6f 65 6e 69 78		                .text $BA, " Foenix Kernel Date : 052319      ",$B3," Parallel Ports(s)    : $AF:1378  ",$BA, $0D
>19123b	20 4b 65 72 6e 65 6c 20 44 61 74 65 20 3a 20 30
>19124b	35 32 33 31 39 20 20 20 20 20 20 b3 20 50 61 72
>19125b	61 6c 6c 65 6c 20 50 6f 72 74 73 28 73 29 20 20
>19126b	20 20 3a 20 24 41 46 3a 31 33 37 38 20 20 ba 0d
>19127b	ba 20 4b 65 79 62 6f 61		                .text $BA, " Keyboard Type      : PS2         ",$B3," Sound Chip Installed : OPL2(2)   ",$BA, $0D
>191283	72 64 20 54 79 70 65 20 20 20 20 20 20 3a 20 50
>191293	53 32 20 20 20 20 20 20 20 20 20 b3 20 53 6f 75
>1912a3	6e 64 20 43 68 69 70 20 49 6e 73 74 61 6c 6c 65
>1912b3	64 20 3a 20 4f 50 4c 32 28 32 29 20 20 20 ba 0d
>1912c3	d3 c4 c4 c4 c4 c4 c4 c4		                .text $D3, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C1
>1912cb	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1912db	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c1
>1912e7	c4 c4 c4 c4 c4 c4 c4 c4		                .text      $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $C4, $BD, $00
>1912ef	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 c4
>1912ff	c4 c4 c4 c4 c4 c4 c4 c4 c4 c4 bd 00
>19130b	1d 1d 1d 1d 1d 1d 8d 8d		greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>191313	4d 4d 2d 2d 5d 5d
>191319	1d 1d 1d 1d 1d 8d 8d 4d		greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D
>191321	4d 2d 2d 5d 5d 5d
>191327	1d 1d 1d 1d 8d 8d 4d 4d		greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D
>19132f	2d 2d 5d 5d 5d 5d
>191335	1d 1d 1d 8d 8d 4d 4d 2d		greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D
>19133d	2d 5d 5d 5d 5d 5d
>191343	1d 1d 8d 8d 4d 4d 2d 2d		greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $5D, $5D, $5D, $5D
>19134b	5d 5d 5d 5d 5d 5d
>191351	00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>191355	00 00 80 ff			                .text $00, $00, $80, $FF
>191359	00 80 00 ff			                .text $00, $80, $00, $FF
>19135d	80 00 00 ff			                .text $80, $00, $00, $FF
>191361	00 80 80 ff			                .text $00, $80, $80, $FF
>191365	80 80 00 ff			                .text $80, $80, $00, $FF
>191369	80 00 80 ff			                .text $80, $00, $80, $FF
>19136d	80 80 80 ff			                .text $80, $80, $80, $FF
>191371	00 45 ff ff			                .text $00, $45, $FF, $FF
>191375	13 45 8b ff			                .text $13, $45, $8B, $FF
>191379	00 00 20 ff			                .text $00, $00, $20, $FF
>19137d	00 20 00 ff			                .text $00, $20, $00, $FF
>191381	20 00 00 ff			                .text $20, $00, $00, $FF
>191385	20 20 20 ff			                .text $20, $20, $20, $FF
>191389	40 40 40 ff			                .text $40, $40, $40, $FF
>19138d	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>191391	00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>191395	00 00 80 ff			                .text $00, $00, $80, $FF
>191399	00 80 00 ff			                .text $00, $80, $00, $FF
>19139d	80 00 00 ff			                .text $80, $00, $00, $FF
>1913a1	00 20 20 ff			                .text $00, $20, $20, $FF
>1913a5	20 20 00 ff			                .text $20, $20, $00, $FF
>1913a9	20 00 20 ff			                .text $20, $00, $20, $FF
>1913ad	20 20 20 ff			                .text $20, $20, $20, $FF
>1913b1	1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>1913b5	13 45 8b ff			                .text $13, $45, $8B, $FF
>1913b9	00 00 20 ff			                .text $00, $00, $20, $FF
>1913bd	00 20 00 ff			                .text $00, $20, $00, $FF
>1913c1	40 00 00 ff			                .text $40, $00, $00, $FF
>1913c5	10 10 10 ff			                .text $10, $10, $10, $FF
>1913c9	40 40 40 ff			                .text $40, $40, $40, $FF
>1913cd	ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1913d1	43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>1913d9	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>1913e9	00
>1913ea	43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>1913f2	20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>191402	00
>191403	43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>19140b	20 45 78 65 63 75 74 65 64 2e 0d 00
>191417	43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>19141f	20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>19142f	43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>191437	20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>191447	64 2e 2e 2e 0d 00
>19144d	4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>191455	20 50 72 65 73 65 6e 74 0d 00
>19145f	4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>191467	61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>191477	46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>191487	4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>19148f	54 55 52 45 20 46 4f 55 4e 44 2e 00
>19149b	42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>1914a3	45 44 2e 00
>1914a7	45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>1914af	47 20 42 4d 50 20 50 41 52 53 45 52 00
>1914bc	0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>1914c4	47 20 30 32 30 30 30 30		hello_ml        .null "G 020000",$0D
>1914cc	0d 00
>1914ce	48 45 4c 4c 4f 20 57 4f		                .null "HELLO WORLD",$0D
>1914d6	52 4c 44 0d 00
>1914db	0d 00				                .null $0D
>1914dd	20 50 43 20 20 20 20 20		                .null " PC     A    X    Y    SP   DBR DP   NVMXDIZC",$0D
>1914e5	41 20 20 20 20 58 20 20 20 20 59 20 20 20 20 53
>1914f5	50 20 20 20 44 42 52 20 44 50 20 20 20 4e 56 4d
>191505	58 44 49 5a 43 0d 00
>19150c	3b 30 30 32 31 31 32 20		                .null ";002112 0019 F0AA 0000 D6FF F8  0000 --M-----"
>191514	30 30 31 39 20 46 30 41 41 20 30 30 30 30 20 44
>191524	36 46 46 20 46 38 20 20 30 30 30 30 20 2d 2d 4d
>191534	2d 2d 2d 2d 2d 00
>19153a	41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>191542	52 4f 52 00
>191546	30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>19154e	38 39 41 42 43 44 45 46 00
>191557					.align 256
>191600	00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191608	37 38 39 30 2d 3d 08 09
>191610	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191618	6f 70 5b 5d 0d 00 61 73
>191620	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191628	27 60 00 5c 7a 78 63 76
>191630	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191638	00 20 00 00 00 00 00 00
>191640	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191648	00 00 00 00 00 00 00 00
>191650	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191658	00 00 00 00 00 00 00 00
>191660	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191668	00 00 00 00 00 00 00 00
>191670	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191678	00 00 00 00 00 00 00 00
>191680	00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>191688	26 2a 28 29 5f 2b 08 09
>191690	51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>191698	4f 50 7b 7d 0d 00 41 53
>1916a0	44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $5C, $5A, $58, $43, $56    ; $20
>1916a8	22 7e 00 5c 5a 58 43 56
>1916b0	42 4e 4d 3c 3e 3f 00 2a		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1916b8	00 20 00 00 00 00 00 00
>1916c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1916c8	00 00 00 00 00 00 00 00
>1916d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1916d8	00 00 00 00 00 00 00 00
>1916e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1916e8	00 00 00 00 00 00 00 00
>1916f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1916f8	00 00 00 00 00 00 00 00
>191700	00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191708	37 38 39 30 2d 3d 08 09
>191710	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191718	6f 70 5b 5d 0d 00 61 73
>191720	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191728	27 60 00 5c 7a 78 63 76
>191730	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191738	00 20 00 00 00 00 00 00
>191740	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191748	00 00 00 00 00 00 00 00
>191750	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191758	00 00 00 00 00 00 00 00
>191760	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191768	00 00 00 00 00 00 00 00
>191770	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191778	00 00 00 00 00 00 00 00
>191780	00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191788	37 38 39 30 2d 3d 08 09
>191790	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191798	6f 70 5b 5d 0d 00 61 73
>1917a0	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1917a8	27 60 00 5c 7a 78 63 76
>1917b0	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1917b8	00 20 00 00 00 00 00 00
>1917c0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1917c8	00 00 00 00 00 00 00 00
>1917d0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1917d8	00 00 00 00 00 00 00 00
>1917e0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1917e8	00 00 00 00 00 00 00 00
>1917f0	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1917f8	00 00 00 00 00 00 00 00
>191800	00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>191808	37 38 39 30 2d 3d 08 09
>191810	71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>191818	6f 70 5b 5d 0d 00 61 73
>191820	64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>191828	27 60 00 5c 7a 78 63 76
>191830	62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>191838	00 20 00 00 00 00 00 00
>191840	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>191848	00 00 00 00 00 00 00 00
>191850	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>191858	00 00 00 00 00 00 00 00
>191860	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>191868	00 00 00 00 00 00 00 00
>191870	00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>191878	00 00 00 00 00 00 00 00
>191880					.align 256
>191900	00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>191908	34 37 3a 3d 3f 41 44 46
>191910	48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>191918	57 58 5a 5b 5d 5e 60 61
>191920	63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>191928	6d 6f 70 71 72 73 75 76
>191930	77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>191938	80 81 82 83 84 85 86 87
>191940	88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>191948	8f 90 91 92 93 93 94 95
>191950	96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>191958	9d 9e 9e 9f a0 a1 a2 a2
>191960	a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>191968	a9 aa ab ab ac ad ae ae
>191970	af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>191978	b5 b5 b6 b7 b7 b8 b9 b9
>191980	ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>191988	bf c0 c0 c1 c2 c2 c3 c4
>191990	c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>191998	c9 ca ca cb cb cc cd cd
>1919a0	ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1919a8	d2 d3 d4 d4 d5 d5 d6 d6
>1919b0	d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1919b8	db dc dc dd de de df df
>1919c0	e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1919c8	e4 e4 e5 e5 e6 e6 e7 e7
>1919d0	e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1919d8	ec ec ed ed ee ee ef ef
>1919e0	f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1919e8	f4 f4 f5 f5 f6 f6 f7 f7
>1919f0	f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1919f8	fb fc fc fd fd fe fe ff
>191a00					.align 256
>191a00	00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>191a08	25 27 2a 2c 2e 30 32 34
>191a10	36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>191a18	44 46 47 49 4a 4c 4d 4f
>191a20	50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>191a28	5b 5c 5d 5e 60 61 62 63
>191a30	64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>191a38	6d 6e 70 71 72 73 74 75
>191a40	76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>191a48	7e 7f 80 81 82 83 84 84
>191a50	85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>191a58	8d 8e 8e 8f 90 91 92 93
>191a60	94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>191a68	9a 9b 9c 9d 9e 9f 9f a0
>191a70	a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>191a78	a7 a8 a9 aa aa ab ac ad
>191a80	ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>191a88	b3 b4 b5 b6 b6 b7 b8 b8
>191a90	b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>191a98	bf bf c0 c1 c2 c2 c3 c4
>191aa0	c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>191aa8	ca ca cb cc cc cd ce ce
>191ab0	cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>191ab8	d4 d5 d6 d6 d7 d7 d8 d9
>191ac0	d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>191ac8	de df e0 e0 e1 e1 e2 e3
>191ad0	e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>191ad8	e8 e9 e9 ea ea eb ec ec
>191ae0	ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>191ae8	f1 f2 f3 f3 f4 f4 f5 f5
>191af0	f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>191af8	fb fb fc fc fd fd fe ff
>191b00					.align 256
>191b00	1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>191b08	83 dd ce 39 cd c5 3b 15
>191b10	22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>191b18	87 12 31 65 89 27 88 42
>191b20	b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>191b28	94 ce 56 ec fe da 58 c9
>191b30	c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>191b38	d0 10 2c b2 4b ea 32 61
>191b40	da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>191b48	a1 e6 ca 2d b3 ce b0 79
>191b50	44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>191b58	5f e3 fb bd 15 2e be f5
>191b60	e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>191b68	8d 8f 2c 80 0a 5e 99 36
>191b70	ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>191b78	13 52 44 2f e3 ef 44 a2
>191b80	86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>191b88	be 23 02 58 0a 52 5e b4
>191b90	9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>191b98	d5 cf 3e df c4 9e da bb
>191ba0	9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>191ba8	77 7d b1 3b 4a 68 35 6e
>191bb0	ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>191bb8	b5 8f 44 63 55 6f e1 50
>191bc0	f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>191bc8	57 74 b9 bd 05 14 50 eb
>191bd0	a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>191bd8	44 bc ec db 22 58 fc be
>191be0	5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>191be8	24 aa 82 11 5c 9f 43 4d
>191bf0	8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>191bf8	3e 3d 66 7e 0a 1c 6b 74
>191c00					.align 16
>191c00	00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>191c08	01 01 01 00 00 00 00 00
>191c10	01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>191c18	ff ff ff 01 00 00 00 00
>191c20	01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>191c28	01 55 ff ff 01 00 00 00
>191c30	01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>191c38	ff ff ff ff 01 00 00 00
>191c40	00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>191c48	ff ff 01 ff ff 01 00 00
>191c50	00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>191c58	01 ff ff 01 ff 01 00 00
>191c60	00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>191c68	ff 01 ff ff ff 01 00 00
>191c70	00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>191c78	ff ff ff ff ff 01 01 00
>191c80	00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>191c88	ff ff ff ff 01 ff ff 01
>191c90	00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>191c98	ff ff ff ff ff ff ff 01
>191ca0	00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>191ca8	55 55 01 ff ff 55 01 00
>191cb0	00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>191cb8	01 01 55 ff 55 01 00 00
>191cc0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>191cc8	01 55 55 55 01 00 00 00
>191cd0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>191cd8	01 55 55 01 00 00 00 00
>191ce0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>191ce8	00 01 01 00 00 00 00 00
>191cf0	00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>191cf8	00 00 00 00 00 00 00 00
.1ff000					FONT_4_BANK0
>1ff000	00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1ff008	7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1ff018	00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1ff028	00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1ff038	00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1ff048	00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1ff058	01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1ff068	04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1ff078	00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1ff088	00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1ff098	66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1ff0a8	7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1ff0b8	18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1ff0c8	18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1ff0d8	00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1ff0e8	00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1ff0f8	00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1ff108	30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1ff118	6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1ff128	f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1ff138	0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1ff148	10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1ff158	00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1ff168	00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1ff178	02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1ff188	18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1ff198	7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1ff1a8	fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1ff1b8	fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1ff1c8	7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1ff1d8	00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1ff1e8	00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1ff1f8	7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1ff208	7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1ff218	7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1ff228	fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1ff238	7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1ff248	3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1ff258	c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1ff268	c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1ff278	7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1ff288	7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1ff298	7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1ff2a8	c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1ff2b8	c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1ff2c8	66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1ff2d8	1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1ff2e8	70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1ff2f8	00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1ff308	00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1ff318	00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1ff328	00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1ff338	00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1ff348	18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1ff358	c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1ff368	00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1ff378	00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1ff388	00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1ff398	00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1ff3a8	00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1ff3b8	00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1ff3c8	00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1ff3d8	0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1ff3e8	e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1ff3f8	00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1ff408	66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1ff418	18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1ff428	38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1ff438	00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1ff448	66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1ff458	66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1ff468	38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1ff478	18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1ff488	00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1ff498	18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1ff4a8	38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1ff4b8	38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1ff4c8	66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1ff4d8	18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1ff4e8	66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1ff4f8	00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1ff508	1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1ff518	0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1ff528	66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1ff538	7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1ff548	00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1ff558	c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1ff568	30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1ff578	00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1ff588	aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1ff598	18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1ff5a8	18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1ff5b8	00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1ff5c8	36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1ff5d8	00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1ff5e8	36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1ff5f8	00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1ff608	18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1ff618	18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1ff628	18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1ff638	36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1ff648	00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1ff658	00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1ff668	00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1ff678	18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1ff688	00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1ff698	36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1ff6a8	00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1ff6b8	36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1ff6c8	18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1ff6d8	ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1ff6e8	f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1ff6f8	ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1ff708	1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1ff718	00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1ff728	00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1ff738	00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1ff748	00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1ff758	1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1ff768	00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1ff778	00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1ff788	18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1ff798	1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1ff7a8	18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1ff7b8	00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1ff7c8	00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1ff7d8	0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1ff7e8	f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1ff7f8	00 00 00 00 00 00 00 00
.1ff800					FONT_4_BANK1
>1ff800	00 00 00 00 00 00 00 00		.binary "FONT/CBM-ASCII_8x8.bin", 0, 2048
>1ff808	7c 82 aa 82 ba 92 82 7c 7c fe d6 fe c6 ee fe 7c
>1ff818	ff fd fb f5 eb d5 ab ff ff e1 fd 85 85 87 87 ff
>1ff828	ff bd db e7 e7 db bd ff ff 81 81 bd bd bd 81 ff
>1ff838	ff ff ff ff ff 81 81 ff 00 08 10 20 10 08 00 00
>1ff848	00 24 14 0c 14 24 00 00 00 8e 88 8c 88 e8 00 00
>1ff858	00 00 00 00 00 00 00 00 00 ee 88 cc 88 88 00 00
>1ff868	00 00 04 14 3c 10 00 00 00 30 4c 4c 30 00 00 00
>1ff878	00 38 28 38 28 00 00 00 ff 81 bd bd bd bd 81 ff
>1ff888	ff 55 aa 55 aa 55 aa ff ab d5 ab d5 ab d5 ab d5
>1ff898	ff 81 81 81 81 81 81 ff ff f9 e1 81 81 e1 f9 ff
>1ff8a8	ff 9f 87 81 81 87 9f ff ff e7 e7 c3 c3 81 81 ff
>1ff8b8	ff 81 81 c3 c3 e7 e7 ff 00 26 54 04 04 04 06 00
>1ff8c8	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 3 times (48 bytes)...
>1ff908	10 10 10 10 00 10 00 00 24 24 24 00 00 00 00 00
>1ff918	24 7e 24 24 7e 24 00 00 10 3c 50 38 14 78 10 00
>1ff928	62 64 08 10 20 4c 8c 00 30 48 48 30 58 4c 4c 38
>1ff938	10 10 10 00 00 00 00 00 08 10 20 20 20 20 10 08
>1ff948	10 08 04 04 04 04 08 10 00 24 18 7e 18 24 00 00
>1ff958	00 10 10 7c 10 10 00 00 00 00 00 00 10 10 20 00
>1ff968	00 00 00 3c 00 00 00 00 00 00 00 00 18 18 00 00
>1ff978	04 04 08 08 10 10 20 20 3c 46 4a 52 62 42 3c 00
>1ff988	10 30 10 10 10 10 38 00 38 44 04 18 20 40 7c 00
>1ff998	38 44 04 18 04 44 38 00 08 18 28 48 7c 08 08 00
>1ff9a8	7c 40 78 04 04 44 38 00 38 44 40 78 44 44 38 00
>1ff9b8	7c 44 04 08 08 10 10 00 38 44 44 38 44 44 38 00
>1ff9c8	38 44 44 3c 04 44 38 00 00 00 18 00 00 18 00 00
>1ff9d8	00 00 18 00 00 18 18 30 00 08 10 20 10 08 00 00
>1ff9e8	00 00 3c 00 3c 00 00 00 00 10 08 04 08 10 00 00
>1ff9f8	38 44 04 08 10 00 10 00 38 44 4c 4c 40 44 38 00
>1ffa08	10 28 44 7c 44 44 00 00 78 44 78 44 44 78 00 00
>1ffa18	38 44 40 40 44 38 00 00 78 44 44 44 44 78 00 00
>1ffa28	7c 40 78 40 40 7c 00 00 7c 40 78 40 40 40 00 00
>1ffa38	38 44 40 4c 44 38 00 00 44 44 7c 44 44 44 00 00
>1ffa48	38 10 10 10 10 38 00 00 1c 08 08 08 48 30 00 00
>1ffa58	24 28 30 30 28 24 00 00 20 20 20 20 20 3c 00 00
>1ffa68	44 6c 7c 54 44 44 00 00 44 64 54 4c 44 44 00 00
>1ffa78	38 44 44 44 44 38 00 00 78 44 44 78 40 40 00 00
>1ffa88	38 44 44 44 44 38 0c 00 78 44 44 78 48 44 00 00
>1ffa98	3c 40 38 04 04 78 00 00 7c 10 10 10 10 10 00 00
>1ffaa8	44 44 44 44 44 38 00 00 44 44 44 44 28 10 00 00
>1ffab8	82 82 82 92 92 6c 00 00 42 24 18 18 24 42 00 00
>1ffac8	44 44 28 10 10 10 00 00 7c 08 10 20 40 7c 00 00
>1ffad8	38 20 20 20 20 20 38 00 20 20 10 10 08 08 04 04
>1ffae8	38 08 08 08 08 08 38 00 00 10 28 44 00 00 00 00
>1ffaf8	00 00 00 00 00 00 00 7e 40 20 10 00 00 00 00 00
>1ffb08	00 38 04 3c 64 3c 00 00 40 40 78 44 44 78 00 00
>1ffb18	00 00 38 40 40 38 00 00 04 04 3c 44 44 3c 00 00
>1ffb28	00 38 44 7c 40 3c 00 00 0c 10 3c 10 10 10 00 00
>1ffb38	00 00 3c 44 44 3c 04 78 40 40 78 44 44 44 00 00
>1ffb48	10 00 30 10 10 38 00 00 08 00 08 08 08 08 08 30
>1ffb58	20 20 24 38 28 24 00 00 30 10 10 10 10 10 00 00
>1ffb68	00 00 68 54 54 44 00 00 00 00 38 24 24 24 00 00
>1ffb78	00 00 38 44 44 38 00 00 00 00 78 44 44 78 40 40
>1ffb88	00 00 3c 44 44 3c 04 04 00 00 78 44 40 40 00 00
>1ffb98	00 00 1c 30 0c 38 00 00 00 10 7c 10 10 10 0c 00
>1ffba8	00 00 44 44 44 3c 00 00 00 00 42 42 24 18 00 00
>1ffbb8	00 00 82 82 92 6c 00 00 00 00 24 18 18 24 00 00
>1ffbc8	00 00 24 24 24 1c 04 38 00 00 7c 18 30 7c 00 00
>1ffbd8	0c 10 10 30 30 10 10 0c 18 18 18 00 18 18 18 00
>1ffbe8	30 08 08 0c 0c 08 08 30 00 00 32 7e 4c 00 00 00
>1ffbf8	00 00 10 28 38 00 00 00 00 00 3c 3c 3c 3c 00 00
>1ffc08	00 00 3c 24 24 3c 00 00 00 00 18 3c 3c 18 00 00
>1ffc18	00 00 18 24 24 18 00 00 18 24 24 18 00 00 00 00
>1ffc28	00 3c 42 42 66 24 66 00 00 18 00 18 0c 06 66 3c
>1ffc38	0c 12 30 7c 30 62 fc 00 1c 20 70 20 70 20 1c 00
>1ffc48	02 06 0c d8 f0 e0 c0 00 18 18 ff 00 00 ff 00 00
>1ffc58	00 00 ff 00 00 ff 18 18 24 24 24 e7 e7 24 24 24
>1ffc68	18 18 ff 00 00 ff 18 18 24 24 24 27 27 24 24 24
>1ffc78	24 24 24 e4 e4 24 24 24 00 00 00 ff ff ff ff ff
>1ffc88	00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>1ffc98	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00
>1ffca8	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00
>1ffcb8	f8 f8 f8 f8 f8 f8 f8 f8 fc fc fc fc fc fc fc fc
>1ffcc8	fe fe fe fe fe fe fe fe 7f 7f 7f 7f 7f 7f 7f 7f
>1ffcd8	3f 3f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f
>1ffce8	0f 0f 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00
>1ffcf8	00 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff
>1ffd08	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>1ffd18	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1ffd28	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>1ffd38	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>1ffd48	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>1ffd58	18 18 18 1f 1f 18 18 18 00 00 00 00 0f 0f 0f 0f
>1ffd68	18 18 18 1f 1f 00 00 00 00 00 00 f8 f8 18 18 18
>1ffd78	00 00 00 00 00 00 ff ff 00 00 00 1f 1f 18 18 18
>1ffd88	18 18 18 ff ff 00 00 00 00 00 00 ff ff 18 18 18
>1ffd98	18 18 18 f8 f8 18 18 18 c0 c0 c0 c0 c0 c0 c0 c0
>1ffda8	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>1ffdb8	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>1ffdc8	00 00 00 00 00 ff ff ff 03 03 03 03 03 03 ff ff
>1ffdd8	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>1ffde8	18 18 18 f8 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>1ffdf8	f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 ff ff 00 00 00
>1ffe08	08 1c 3e 7f 7f 1c 3e 00 18 18 18 18 18 18 18 18
>1ffe18	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00
>1ffe28	00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00 00
>1ffe38	30 30 30 30 30 30 30 30 0c 0c 0c 0c 0c 0c 0c 0c
>1ffe48	00 00 00 e0 f0 38 18 18 18 18 1c 0f 07 00 00 00
>1ffe58	18 18 38 f0 e0 00 00 00 c0 c0 c0 c0 c0 c0 ff ff
>1ffe68	c0 e0 70 38 1c 0e 07 03 03 07 0e 1c 38 70 e0 c0
>1ffe78	ff ff c0 c0 c0 c0 c0 c0 ff ff 03 03 03 03 03 03
>1ffe88	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 ff ff 00
>1ffe98	36 7f 7f 7f 3e 1c 08 00 60 60 60 60 60 60 60 60
>1ffea8	00 00 00 07 0f 1c 18 18 c3 e7 7e 3c 3c 7e e7 c3
>1ffeb8	00 3c 7e 66 66 7e 3c 00 18 18 66 66 18 18 3c 00
>1ffec8	06 06 06 06 06 06 06 06 08 1c 3e 7f 3e 1c 08 00
>1ffed8	18 18 18 ff ff 18 18 18 c0 c0 30 30 c0 c0 30 30
>1ffee8	18 18 18 18 18 18 18 18 00 00 03 3e 76 36 36 00
>1ffef8	ff 7f 3f 1f 0f 07 03 01 24 24 24 24 24 24 24 24
>1fff08	00 00 ff 00 00 ff 00 00 00 00 3f 20 20 27 24 24
>1fff18	00 00 ff 00 00 e7 24 24 00 00 fc 04 04 e4 24 24
>1fff28	24 24 27 20 20 3f 00 00 24 24 e7 00 00 ff 00 00
>1fff38	24 24 e4 04 04 fc 00 00 24 24 27 20 20 27 24 24
>1fff48	24 24 e4 04 04 e4 24 24 24 24 e7 00 00 e7 24 24
>1fff58	0f 0f 0f 0f f0 f0 f0 f0 01 03 07 0f 1f 3f 7f ff
>1fff68	80 c0 e0 f0 f8 fc fe ff 33 99 cc 66 33 99 cc 66
>1fff78	cc 99 33 66 cc 99 33 66 f0 f0 f0 f0 ff ff ff ff
>1fff88	0f 0f 0f 0f ff ff ff ff ff ff ff ff f0 f0 f0 f0
>1fff98	ff ff ff ff 0f 0f 0f 0f 05 0a 05 0a 00 00 00 00
>1fffa8	00 00 00 00 0a 05 0a 05 a0 50 a0 50 00 00 00 00
>1fffb8	00 00 00 00 a0 50 a0 50 0a 05 0a 05 0a 05 0a 05
>1fffc8	aa 55 aa 55 00 00 00 00 00 18 3c 7e 18 18 18 18
>1fffd8	00 10 30 7f 7f 30 10 00 00 08 0c fe fe 0c 08 00
>1fffe8	18 18 18 18 7e 3c 18 00 00 00 36 49 36 00 00 00
>1ffff8	00 00 00 00 00 00 00 00

;******  End of listing
